<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pranav Rajan&#39;s Blog</title>
<link>https://mozartfish.github.io/blog/index.html</link>
<atom:link href="https://mozartfish.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>This is a blog</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 17 Jan 2024 08:00:00 GMT</lastBuildDate>
<item>
  <title>FastAI Lesson 5: From-scratch model</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson5/fastai-lesson5.html</link>
  <description><![CDATA[ 




<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>All of this code was written by Jeremy Howard and the FastAI team and I modified it slightly to include my own print statements and additional helper functions based on Jeremy’s code. This is the source for the original code <a href="https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch">Linear model and neural net from scratch</a> and <a href="https://www.kaggle.com/code/jhoward/why-you-should-use-a-framework">Why you should use a framework</a>.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this lesson, Jeremy goes over training a model from scratch using a linear model, neural network and deep learning before finally walking through training a model using fastai + pytorch and an ensemble. This lesson is actually <a href="https://course.fast.ai/Lessons/lesson3.html">lesson 3</a>, <a href="https://course.fast.ai/Lessons/lesson5.html">lesson 5</a> and part of <a href="https://course.fast.ai/Lessons/lesson6.html">lesson 6</a> so I had to go back to review <a href="https://course.fast.ai/Lessons/lesson3.html">lesson 3</a> to make sure I understood the material for <a href="https://course.fast.ai/Lessons/lesson5.html">lesson 5</a>. I highly recommend going over <a href="https://course.fast.ai/Lessons/lesson3.html">lesson 3</a> and <a href="https://nbviewer.org/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb">chapter 4</a> before this lesson because Jeremy doesn’t go too deep into the meaning of tensor shape and rank as he does in <code>chapter 4</code>.</p>
<p>This lesson was really exciting from the programming side because I learned more about python and numerical programming with partials, broadcasting, data cleaning with pandas, and <a href="https://www.kaggle.com/code/gunesevitan/titanic-advanced-feature-engineering-tutorial/">feature engineering</a>.</p>
</section>
<section id="titanic---machine-learning-from-disaster" class="level2">
<h2 class="anchored" data-anchor-id="titanic---machine-learning-from-disaster">Titanic - Machine Learning From Disaster</h2>
<p>The Titanic - Machine Learning from Disaster is used as the case study for this lesson. More information about the data can be found here <a href="https://www.kaggle.com/competitions/titanic/">Titanic - Machine Learning from Disaster</a>.</p>
</section>
<section id="load-data-and-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-data-and-libraries">Load Data and Libraries</h2>
<div class="cell" data-outputid="da7d73bf-9a9c-4643-8e05-85ba8e335081" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import libraries and files</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required libraries + packages for any ml/data science project</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fastai library contains all the packages above and wraps them in the fastai library</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kaggle API package install</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install kaggle</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.5.16)
Requirement already satisfied: six&gt;=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.16.0)
Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from kaggle) (2023.11.17)
Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.31.0)
Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.66.1)
Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.1)
Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.0.7)
Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.1.0)
Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach-&gt;kaggle) (0.5.1)
Requirement already satisfied: text-unidecode&gt;=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify-&gt;kaggle) (1.3)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;kaggle) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;kaggle) (3.6)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import stuff from fastai</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings, logging, torch</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup Kaggle dataset download locally</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore all warnings</span></span>
<span id="cb3-9">warnings.simplefilter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb3-10">logging.disable(logging.WARNING)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable to check whether we're running on kaggle website or not</span></span>
<span id="cb3-13">iskaggle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_KERNEL_RUN_TYPE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kaggle API Key Credentials</span></span>
<span id="cb3-16">creds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Path set up for downloading and extracting data from kaggle</span></span>
<span id="cb3-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-20"></span>
<span id="cb3-21">cred_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb3-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> cred_path.exists():</span>
<span id="cb3-23">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-24">    cred_path.write_text(creds)</span>
<span id="cb3-25">    cred_path.chmod(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0o600</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="db3ca853-a31e-4840-d055-ffd907bdaeb2" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download data from Kaggle to path and extract it at path location</span></span>
<span id="cb4-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titanic'</span>)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> iskaggle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb4-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zipfile,kaggle</span>
<span id="cb4-5">    kaggle.api.competition_download_cli(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path))</span>
<span id="cb4-6">    zipfile.ZipFile(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>).extractall(path)</span>
<span id="cb4-7"></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if on kaggle</span></span>
<span id="cb4-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> iskaggle:</span>
<span id="cb4-11">  path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../input/titanic'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading titanic.zip to /content
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 34.1k/34.1k [00:00&lt;00:00, 6.62MB/s]</code></pre>
</div>
</div>
<div class="cell" data-outputid="323e3f07-3bf0-4e38-a99a-b26633bda9cb" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check data files</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls {path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>gender_submission.csv  test.csv  train.csv</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up pandas and pytorch default settings</span></span>
<span id="cb9-2">torch.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, edgeitems<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb9-3">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>)</span></code></pre></div>
</div>
</section>
<section id="problem-statement" class="level2">
<h2 class="anchored" data-anchor-id="problem-statement">Problem Statement</h2>
<p><code>Problem</code>: what sorts of people were more likely to survive the Titanic Disaster - use machine learning to create a model that predicts which passengers survived the Titanic Shipwreck using passenger data(name, age, gender, socio-economic class, etc)</p>
<p><code>Training Data</code> - contains subset of the passengers on board Titanic (891 passengers) with information on whether they survived or not(ground truth)</p>
<p><code>Test(Inference) Data</code> - contains same information as train data but does disclose the ground truth (whether passenger survived or not) - using patterns found in train data, predict whether the other 418 passsengers on board (test data) survived</p>
<p><code>Evaluation Goal</code> - Predict if a passenger survived the sinking of the titanic or not - For each value in test set, predict 0 or 1 value for the variable</p>
<p><code>Evaluation Metric</code> - Score is the percentage of passenger correctly predicted (accuracy)</p>
<p><code>Submission Format</code> - PassengerID, Survived (contains binary predictions: 1 for survived, 0 for deceased)</p>
</section>
<section id="exploratory-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-data-analysis">Exploratory Data Analysis</h2>
<section id="exploratory-data-analysis-data-processing" class="level3">
<h3 class="anchored" data-anchor-id="exploratory-data-analysis-data-processing">Exploratory Data Analysis: Data Processing</h3>
<div class="cell" data-outputid="03afcad3-2182-4f24-edba-d5a71f26068c" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load data and view data</span></span>
<span id="cb10-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train.csv'</span>)</span>
<span id="cb10-3">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

  <div id="df-64779b3d-323c-4357-9d34-be2e6aad091b" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">PassengerId</th>
<th data-quarto-table-cell-role="th">Survived</th>
<th data-quarto-table-cell-role="th">Pclass</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Sex</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">SibSp</th>
<th data-quarto-table-cell-role="th">Parch</th>
<th data-quarto-table-cell-role="th">Ticket</th>
<th data-quarto-table-cell-role="th">Fare</th>
<th data-quarto-table-cell-role="th">Cabin</th>
<th data-quarto-table-cell-role="th">Embarked</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>Braund, Mr. Owen Harris</td>
<td>male</td>
<td>22.0</td>
<td>1</td>
<td>0</td>
<td>A/5 21171</td>
<td>7.2500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>1</td>
<td>1</td>
<td>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>
<td>female</td>
<td>38.0</td>
<td>1</td>
<td>0</td>
<td>PC 17599</td>
<td>71.2833</td>
<td>C85</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>Heikkinen, Miss. Laina</td>
<td>female</td>
<td>26.0</td>
<td>0</td>
<td>0</td>
<td>STON/O2. 3101282</td>
<td>7.9250</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
<td>female</td>
<td>35.0</td>
<td>1</td>
<td>0</td>
<td>113803</td>
<td>53.1000</td>
<td>C123</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>Allen, Mr. William Henry</td>
<td>male</td>
<td>35.0</td>
<td>0</td>
<td>0</td>
<td>373450</td>
<td>8.0500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">886</td>
<td>887</td>
<td>0</td>
<td>2</td>
<td>Montvila, Rev. Juozas</td>
<td>male</td>
<td>27.0</td>
<td>0</td>
<td>0</td>
<td>211536</td>
<td>13.0000</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">887</td>
<td>888</td>
<td>1</td>
<td>1</td>
<td>Graham, Miss. Margaret Edith</td>
<td>female</td>
<td>19.0</td>
<td>0</td>
<td>0</td>
<td>112053</td>
<td>30.0000</td>
<td>B42</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">888</td>
<td>889</td>
<td>0</td>
<td>3</td>
<td>Johnston, Miss. Catherine Helen "Carrie"</td>
<td>female</td>
<td>NaN</td>
<td>1</td>
<td>2</td>
<td>W./C. 6607</td>
<td>23.4500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">889</td>
<td>890</td>
<td>1</td>
<td>1</td>
<td>Behr, Mr. Karl Howell</td>
<td>male</td>
<td>26.0</td>
<td>0</td>
<td>0</td>
<td>111369</td>
<td>30.0000</td>
<td>C148</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">890</td>
<td>891</td>
<td>0</td>
<td>3</td>
<td>Dooley, Mr. Patrick</td>
<td>male</td>
<td>32.0</td>
<td>0</td>
<td>0</td>
<td>370376</td>
<td>7.7500</td>
<td>NaN</td>
<td>Q</td>
</tr>
</tbody>
</table>


<p>891 rows × 12 columns</p>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-64779b3d-323c-4357-9d34-be2e6aad091b')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-64779b3d-323c-4357-9d34-be2e6aad091b button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-64779b3d-323c-4357-9d34-be2e6aad091b');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-00f75c33-03eb-4110-bbf9-7078e873672c">
  <button class="colab-df-quickchart" onclick="quickchart('df-00f75c33-03eb-4110-bbf9-7078e873672c')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-00f75c33-03eb-4110-bbf9-7078e873672c button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

  <div id="id_c3956994-445a-4050-a973-e88b65b66532">
    <style>
      .colab-df-generate {
        background-color: #E8F0FE;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: none;
        fill: #1967D2;
        height: 32px;
        padding: 0 0 0 0;
        width: 32px;
      }

      .colab-df-generate:hover {
        background-color: #E2EBFA;
        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
        fill: #174EA6;
      }

      [theme=dark] .colab-df-generate {
        background-color: #3B4455;
        fill: #D2E3FC;
      }

      [theme=dark] .colab-df-generate:hover {
        background-color: #434B5C;
        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
        fill: #FFFFFF;
      }
    </style>
    <button class="colab-df-generate" onclick="generateWithVariable('df')" title="Generate code using this dataframe." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z"></path>
  </svg>
    </button>
    <script>
      (() => {
      const buttonEl =
        document.querySelector('#id_c3956994-445a-4050-a973-e88b65b66532 button.colab-df-generate');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      buttonEl.onclick = () => {
        google.colab.notebook.generateWithVariable('df');
      }
      })();
    </script>
  </div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="2e898d02-14cd-411d-cf5e-c33f33820907" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count number of missing values in each category</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - 1 - represents NaN value</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - summation tells how many NaN values are in each column</span></span>
<span id="cb11-4">df.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace NaN with mode</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - replace missing values with something meaningful -&gt; mean, median, mode etc</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in case of ties select first value</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="c011c04a-b1f2-4115-8505-66de629e5a69" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find modes in different categories</span></span>
<span id="cb14-2">modes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.mode().iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb14-3">modes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>PassengerId                      1
Survived                       0.0
Pclass                         3.0
Name           Abbing, Mr. Anthony
Sex                           male
Age                           24.0
SibSp                          0.0
Parch                          0.0
Ticket                        1601
Fare                          8.05
Cabin                      B96 B98
Embarked                         S
Name: 0, dtype: object</code></pre>
</div>
</div>
<div class="cell" data-outputid="c84e242b-c9ad-4cc3-e1f3-a579db2d6503" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace NaN with mode and verify there are no NaN values</span></span>
<span id="cb16-2">df.fillna(modes, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-3">df.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>PassengerId    0
Survived       0
Pclass         0
Name           0
Sex            0
Age            0
SibSp          0
Parch          0
Ticket         0
Fare           0
Cabin          0
Embarked       0
dtype: int64</code></pre>
</div>
</div>
</section>
<section id="exploratory-data-analysis-numeric-data" class="level3">
<h3 class="anchored" data-anchor-id="exploratory-data-analysis-numeric-data">Exploratory Data Analysis: Numeric Data</h3>
<div class="cell" data-outputid="abad89c8-7b19-4597-f595-422e56b6925f" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># summary of all numeric columns in data</span></span>
<span id="cb18-2">df.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(np.number))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">

  <div id="df-fe5282b7-1de2-4b14-bb96-f2cd9909f475" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">PassengerId</th>
<th data-quarto-table-cell-role="th">Survived</th>
<th data-quarto-table-cell-role="th">Pclass</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">SibSp</th>
<th data-quarto-table-cell-role="th">Parch</th>
<th data-quarto-table-cell-role="th">Fare</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>891.000000</td>
<td>891.000000</td>
<td>891.000000</td>
<td>891.000000</td>
<td>891.000000</td>
<td>891.000000</td>
<td>891.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>446.000000</td>
<td>0.383838</td>
<td>2.308642</td>
<td>28.566970</td>
<td>0.523008</td>
<td>0.381594</td>
<td>32.204208</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>257.353842</td>
<td>0.486592</td>
<td>0.836071</td>
<td>13.199572</td>
<td>1.102743</td>
<td>0.806057</td>
<td>49.693429</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>1.000000</td>
<td>0.000000</td>
<td>1.000000</td>
<td>0.420000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>223.500000</td>
<td>0.000000</td>
<td>2.000000</td>
<td>22.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>7.910400</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>446.000000</td>
<td>0.000000</td>
<td>3.000000</td>
<td>24.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>14.454200</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>668.500000</td>
<td>1.000000</td>
<td>3.000000</td>
<td>35.000000</td>
<td>1.000000</td>
<td>0.000000</td>
<td>31.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>891.000000</td>
<td>1.000000</td>
<td>3.000000</td>
<td>80.000000</td>
<td>8.000000</td>
<td>6.000000</td>
<td>512.329200</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-fe5282b7-1de2-4b14-bb96-f2cd9909f475')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-fe5282b7-1de2-4b14-bb96-f2cd9909f475 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-fe5282b7-1de2-4b14-bb96-f2cd9909f475');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-a33fe91d-b5df-4470-983a-c5e8d359d31f">
  <button class="colab-df-quickchart" onclick="quickchart('df-a33fe91d-b5df-4470-983a-c5e8d359d31f')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-a33fe91d-b5df-4470-983a-c5e8d359d31f button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="a10f92fb-3028-4c29-824e-dbc4f8bdfd26" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># histogram of fare data</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># long tail to the right histogram</span></span>
<span id="cb19-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>].hist()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson5/fastai-lesson5_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="d8d5fb6d-80f4-40c3-db73-e624fd422ef9" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log histogram of fare data to center data</span></span>
<span id="cb20-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>].hist()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson5/fastai-lesson5_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="exploratory-data-analysis-categorical-data" class="level3">
<h3 class="anchored" data-anchor-id="exploratory-data-analysis-categorical-data">Exploratory Data Analysis: Categorical Data</h3>
<div class="cell" data-outputid="6aadc26d-db36-449c-a24d-88c2b2b3b534" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Passenger Classes</span></span>
<span id="cb21-2">pclasses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(df.Pclass.unique())</span>
<span id="cb21-3">pclasses</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[1, 2, 3]</code></pre>
</div>
</div>
<div class="cell" data-outputid="af9e71ef-9f09-48f2-c3e9-af78bcced429" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># non-numeric data summary</span></span>
<span id="cb23-2">df.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">

  <div id="df-2ee18c5b-dbe7-48d3-8e93-124effc155f0" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Sex</th>
<th data-quarto-table-cell-role="th">Ticket</th>
<th data-quarto-table-cell-role="th">Cabin</th>
<th data-quarto-table-cell-role="th">Embarked</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>891</td>
<td>891</td>
<td>891</td>
<td>891</td>
<td>891</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">unique</td>
<td>891</td>
<td>2</td>
<td>681</td>
<td>147</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">top</td>
<td>Braund, Mr. Owen Harris</td>
<td>male</td>
<td>347082</td>
<td>B96 B98</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">freq</td>
<td>1</td>
<td>577</td>
<td>7</td>
<td>691</td>
<td>646</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-2ee18c5b-dbe7-48d3-8e93-124effc155f0')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-2ee18c5b-dbe7-48d3-8e93-124effc155f0 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-2ee18c5b-dbe7-48d3-8e93-124effc155f0');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-d7acd3a9-55df-456a-8e02-e3bf488b0060">
  <button class="colab-df-quickchart" onclick="quickchart('df-d7acd3a9-55df-456a-8e02-e3bf488b0060')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-d7acd3a9-55df-456a-8e02-e3bf488b0060 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert Categorical Data to Numerical Data - Dummy Variables</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Dummy variable is a column that contains 1 where a particular columns contains a particular value</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and 0 otherwise</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="df5cbbbe-7793-464c-c287-f7a354d49aca" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create dummy variables for categorical variables</span></span>
<span id="cb25-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get_dummies(df, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>])</span>
<span id="cb25-3">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>Index(['PassengerId', 'Survived', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'LogFare', 'Sex_female', 'Sex_male',
       'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S'],
      dtype='object')</code></pre>
</div>
</div>
<div class="cell" data-outputid="5c9d44eb-11b2-4cea-adfa-cc5c9b95ae9d" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new data with dummy variables</span></span>
<span id="cb27-2">added_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex_male'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex_female'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_Q'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_S'</span>]</span>
<span id="cb27-3">df[added_cols].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

  <div id="df-6327f409-42a7-47bf-9f4f-1f335584ed6d" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Sex_male</th>
<th data-quarto-table-cell-role="th">Sex_female</th>
<th data-quarto-table-cell-role="th">Pclass_1</th>
<th data-quarto-table-cell-role="th">Pclass_2</th>
<th data-quarto-table-cell-role="th">Pclass_3</th>
<th data-quarto-table-cell-role="th">Embarked_C</th>
<th data-quarto-table-cell-role="th">Embarked_Q</th>
<th data-quarto-table-cell-role="th">Embarked_S</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-6327f409-42a7-47bf-9f4f-1f335584ed6d')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-6327f409-42a7-47bf-9f4f-1f335584ed6d button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-6327f409-42a7-47bf-9f4f-1f335584ed6d');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-086e88b7-e1d4-4f9a-9779-1e15e9c1b267">
  <button class="colab-df-quickchart" onclick="quickchart('df-086e88b7-e1d4-4f9a-9779-1e15e9c1b267')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-086e88b7-e1d4-4f9a-9779-1e15e9c1b267 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
</section>
</section>
<section id="linear-model" class="level2">
<h2 class="anchored" data-anchor-id="linear-model">Linear Model</h2>
<section id="linear-model-variables" class="level3">
<h3 class="anchored" data-anchor-id="linear-model-variables">Linear Model Variables</h3>
<ul>
<li><strong>Independent Variables</strong> - predictors: all continuous variables + dummy variables</li>
<li><strong>Dependent Variables</strong> - target: survived</li>
</ul>
<div class="cell" data-outputid="27bd880e-ce7e-4c79-97be-358dc271a472" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linear Model Data Processing</span></span>
<span id="cb28-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># independent(predictors)</span></span>
<span id="cb28-5">indep_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SibSp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> added_cols</span>
<span id="cb28-6">t_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(df[indep_cols].values, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dependent(target) variables - Survived</span></span>
<span id="cb28-9">t_dep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(df.Survived)</span>
<span id="cb28-10"></span>
<span id="cb28-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print information about tensors</span></span>
<span id="cb28-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Indendent Tensors Shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_indep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Independent Tensors Rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t_indep.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dependent Tensors Shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_dep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Dependent Tensors Rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t_dep.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Indendent Tensors Shape: torch.Size([891, 12])
Independent Tensors Rank: 2
Dependent Tensors Shape: torch.Size([891])
Dependent Tensors Rank: 1</code></pre>
</div>
</div>
<div class="cell" data-outputid="0b17fa60-2b1e-4dd4-f691-bc8d35970f51" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do not use this in practice -&gt; this is to ensure reproducibility in experimentation</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do not seed manually when done with experimentation</span></span>
<span id="cb30-3">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span>
<span id="cb30-4"></span>
<span id="cb30-5">n_coeff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_indep.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-6">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_coeff) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb30-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Coefficients shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coeffs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb30-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Coefficients rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(coeffs.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb30-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Coefficients: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coeffs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Coefficients shape: torch.Size([12])
Coefficients rank: 1
Coefficients: tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,  0.2799, -0.4392,  0.2103,  0.3625])</code></pre>
</div>
</div>
<div class="cell" data-outputid="43a38b5c-ab32-4dfd-a093-050d69bc5eee" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># element wise multiplication using broadcasting - multiply every row by coefficients</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  - can be interpreted as looping 891 times and multiplying each row value by corresponding coeff value</span></span>
<span id="cb32-3">t_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor([[-10.1838,   0.1386,   0.0000,  -0.4772,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-17.5902,   0.1386,   0.0000,  -0.9681,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.4392,   0.0000,   0.0000],
        [-12.0354,   0.0000,   0.0000,  -0.4950,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-16.2015,   0.1386,   0.0000,  -0.9025,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        [-16.2015,   0.0000,   0.0000,  -0.4982,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-11.1096,   0.0000,   0.0000,  -0.5081,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000],
        [-24.9966,   0.0000,   0.0000,  -0.8973,  -0.2632,  -0.0000,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        ...,
        [-11.5725,   0.0000,   0.0000,  -0.4717,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-18.0531,   0.0000,   1.2045,  -0.7701,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000],
        [-12.4983,   0.0000,   0.0000,  -0.5968,  -0.2632,  -0.0000,   0.0000,   0.3136,   0.0000,  -0.0000,   0.0000,   0.3625],
        [ -8.7951,   0.0000,   0.0000,  -0.7766,  -0.0000,  -0.3147,   0.4876,   0.0000,   0.0000,  -0.0000,   0.0000,   0.3625],
        [-11.1096,   0.1386,   0.4818,  -0.7229,  -0.0000,  -0.3147,   0.0000,   0.0000,   0.2799,  -0.0000,   0.0000,   0.3625],
        [-12.0354,   0.0000,   0.0000,  -0.7766,  -0.2632,  -0.0000,   0.4876,   0.0000,   0.0000,  -0.4392,   0.0000,   0.0000],
        [-14.8128,   0.0000,   0.0000,  -0.4905,  -0.2632,  -0.0000,   0.0000,   0.0000,   0.2799,  -0.0000,   0.2103,   0.0000]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="42ce729b-27f4-4c03-9ede-a6c08a1fd5f6" data-execution_count="24">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum of each row are dominated by Age since Age is larger than all the other variables</span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># center data to between 0 and 1 by averaging each column</span></span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find max val in each row</span></span>
<span id="cb34-5">vals,indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_indep.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb34-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vals shape </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vals<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"vals rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vals.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - can be interpreted as looping 891 times and dividing each row value by corresponding value in vals</span></span>
<span id="cb34-10">t_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vals</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>vals shape torch.Size([12])
vals rank: 1</code></pre>
</div>
</div>
<div class="cell" data-outputid="5ae12da1-18c8-43d3-9064-a08f2dafcaad" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recompute coefficients using new new centered independent variable values</span></span>
<span id="cb36-2">t_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor([[-0.1273,  0.0173,  0.0000, -0.0765, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2199,  0.0173,  0.0000, -0.1551, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.4392,  0.0000,  0.0000],
        [-0.1504,  0.0000,  0.0000, -0.0793, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2025,  0.0173,  0.0000, -0.1446, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.2025,  0.0000,  0.0000, -0.0798, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.1389,  0.0000,  0.0000, -0.0814, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000],
        [-0.3125,  0.0000,  0.0000, -0.1438, -0.2632, -0.0000,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        ...,
        [-0.1447,  0.0000,  0.0000, -0.0756, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.2257,  0.0000,  0.2008, -0.1234, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000],
        [-0.1562,  0.0000,  0.0000, -0.0956, -0.2632, -0.0000,  0.0000,  0.3136,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.1099,  0.0000,  0.0000, -0.1244, -0.0000, -0.3147,  0.4876,  0.0000,  0.0000, -0.0000,  0.0000,  0.3625],
        [-0.1389,  0.0173,  0.0803, -0.1158, -0.0000, -0.3147,  0.0000,  0.0000,  0.2799, -0.0000,  0.0000,  0.3625],
        [-0.1504,  0.0000,  0.0000, -0.1244, -0.2632, -0.0000,  0.4876,  0.0000,  0.0000, -0.4392,  0.0000,  0.0000],
        [-0.1852,  0.0000,  0.0000, -0.0786, -0.2632, -0.0000,  0.0000,  0.0000,  0.2799, -0.0000,  0.2103,  0.0000]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="3e083aae-586d-43a7-80c9-884fc4e84577" data-execution_count="26">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate Prediction</span></span>
<span id="cb38-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (t_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> coeffs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"first few predictions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>preds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>first few predictions: tensor([ 0.1927, -0.6239,  0.0979,  0.2056,  0.0968,  0.0066,  0.1306,  0.3476,  0.1613, -0.6285])</code></pre>
</div>
</div>
<div class="cell" data-outputid="8d29a31c-42aa-44c5-d612-62892e4ee1e6" data-execution_count="27">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss Function -&gt; Mean Absolute Error</span></span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Loss function is required for doing gradient descent</span></span>
<span id="cb40-3">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_dep).mean()</span>
<span id="cb40-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loss: 0.5382388234138489</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions for computing predictions and loss</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Predictions</span></span>
<span id="cb42-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb42-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (indeps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> coeffs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-6"></span>
<span id="cb42-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Loss</span></span>
<span id="cb42-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_loss(coeffs, indeps, deps):</span>
<span id="cb42-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(calc_preds(coeffs, indeps) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> deps).mean()</span></code></pre></div>
</div>
</section>
<section id="gradient-descent" class="level3">
<h3 class="anchored" data-anchor-id="gradient-descent">Gradient Descent</h3>
<div class="cell" data-outputid="c014db5e-c53e-431e-e571-8c138c162362" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tell pytorch to calculate gradients</span></span>
<span id="cb43-2">coeffs.requires_grad_()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,  0.2799, -0.4392,  0.2103,  0.3625], requires_grad=True)</code></pre>
</div>
</div>
<div class="cell" data-outputid="de49f11b-26b4-4907-99ad-839ecd794422" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb45-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb45-3">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor(0.5382, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate gradients</span></span>
<span id="cb47-2">loss.backward()</span></code></pre></div>
</div>
<div class="cell" data-outputid="40403800-ea53-48c4-da1f-fee785750af7" data-execution_count="32">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gradients</span></span>
<span id="cb48-2">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor([-0.0106,  0.0129, -0.0041, -0.0484,  0.2099, -0.2132, -0.1212, -0.0247,  0.1425, -0.1886, -0.0191,  0.2043])</code></pre>
</div>
</div>
<div class="cell" data-outputid="6a97b245-e226-4351-ab69-88bb1393ce6d" data-execution_count="33">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - each call to backward, gradients are added to the value stored in grad attribute</span></span>
<span id="cb50-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb50-3">loss.backward()</span>
<span id="cb50-4">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor([-0.0212,  0.0258, -0.0082, -0.0969,  0.4198, -0.4265, -0.2424, -0.0494,  0.2851, -0.3771, -0.0382,  0.4085])</code></pre>
</div>
</div>
<div class="cell" data-outputid="4abe8b8a-5a8a-416c-b3ea-f3ee28657bc8" data-execution_count="34">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset gradients to zero after doing a single gradient step</span></span>
<span id="cb52-2">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(coeffs, t_indep, t_dep)</span>
<span id="cb52-3">loss.backward()</span>
<span id="cb52-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb52-5">  coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb52-6">  coeffs.grad.zero_()</span>
<span id="cb52-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(calc_loss(coeffs, t_indep, t_dep))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0.4945)</code></pre>
</div>
</div>
</section>
<section id="linear-model-training" class="level3">
<h3 class="anchored" data-anchor-id="linear-model-training">Linear Model Training</h3>
<div class="cell" data-outputid="233b9476-92a4-440b-db8c-ffd818ec727c" data-execution_count="35">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data split</span></span>
<span id="cb54-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.data.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomSplitter</span>
<span id="cb54-3">trn_split,val_split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)(df)</span>
<span id="cb54-4"></span>
<span id="cb54-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Data Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trn_split)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Data Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_split)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Data Indices: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trn_split<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Data Indices: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val_split<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Data Size: 713
Validation Data Size: 178
Training Data Indices: [788, 525, 821, 253, 374, 98, 215, 313, 281, 305, 701, 812, 76, 50, 387, 47, 516, 564, 434, 117, 150, 513, 676, 470, 569, 603, 816, 719, 120, 88, 204, 617, 615, 61, 648, 139, 840, 831, 302, 118, 58, 257, 404, 24, 618, 730, 371, 104, 370, 592, 548, 633, 216, 682, 157, 103, 512, 574, 650, 312, 757, 225, 241, 557, 808, 827, 334, 208, 23, 2, 28, 319, 463, 77, 34, 637, 842, 30, 460, 888, 217, 405, 10, 66, 852, 291, 249, 872, 75, 450, 597, 377, 178, 207, 737, 318, 573, 64, 415, 220, 184, 49, 384, 97, 121, 111, 568, 873, 343, 495, 611, 712, 723, 829, 871, 29, 641, 69, 844, 383, 560, 394, 817, 643, 820, 832, 409, 645, 441, 732, 636, 848, 475, 317, 884, 881, 367, 562, 689, 841, 805, 716, 81, 54, 44, 136, 364, 35, 796, 373, 342, 550, 543, 851, 185, 85, 451, 826, 761, 399, 16, 125, 264, 162, 197, 309, 804, 42, 545, 846, 622, 177, 273, 559, 815, 74, 248, 809, 403, 728, 613, 96, 549, 258, 192, 780, 263, 109, 803, 20, 715, 487, 375, 570, 108, 628, 153, 474, 572, 306, 341, 763, 877, 227, 454, 535, 767, 33, 193, 793, 62, 311, 285, 861, 687, 738, 498, 235, 507, 5, 743, 499, 160, 686, 445, 368, 660, 748, 813, 614, 431, 534, 152, 810, 314, 423, 166, 567, 447, 296, 621, 688, 147, 176, 662, 481, 407, 22, 878, 702, 542, 219, 604, 448, 866, 508, 267, 786, 190, 339, 222, 473, 365, 363, 469, 746, 554, 349, 428, 60, 421, 25, 331, 429, 39, 752, 419, 553, 879, 558, 802, 360, 372, 19, 156, 483, 251, 801, 882, 547, 744, 704, 602, 164, 608, 78, 750, 201, 722, 142, 171, 762, 3, 828, 482, 472, 458, 130, 576, 231, 468, 843, 43, 647, 11, 132, 760, 785, 206, 556, 72, 886, 413, 293, 284, 348, 751, 759, 488, 68, 529, 503, 389, 381, 883, 432, 830, 238, 345, 269, 555, 83, 672, 14, 818, 167, 651, 819, 718, 502, 316, 836, 410, 99, 625, 278, 352, 640, 295, 765, 741, 112, 847, 539, 165, 616, 772, 596, 320, 546, 181, 709, 395, 401, 230, 347, 510, 626, 223, 127, 205, 756, 355, 52, 773, 697, 565, 610, 337, 158, 329, 795, 15, 749, 792, 486, 789, 430, 416, 544, 149, 73, 210, 855, 254, 776, 522, 739, 114, 661, 777, 380, 600, 107, 36, 856, 396, 838, 354, 161, 351, 708, 590, 734, 393, 632, 406, 703, 138, 426, 845, 674, 668, 500, 247, 680, 659, 653, 620, 262, 41, 781, 652, 307, 350, 382, 577, 40, 209, 357, 17, 717, 527, 666, 196, 174, 116, 124, 530, 82, 133, 607, 679, 850, 272, 771, 849, 137, 57, 457, 195, 268, 601, 497, 145, 745, 95, 839, 453, 561, 287, 684, 858, 571, 675, 433, 876, 422, 654, 186, 627, 673, 511, 493, 214, 520, 308, 338, 720, 323, 727, 496, 101, 234, 692, 455, 13, 663, 237, 665, 203, 724, 501, 449, 521, 261, 860, 514, 609, 259, 726, 169, 731, 541, 80, 335, 420, 86, 612, 794, 536, 244, 332, 669, 328, 664, 655, 524, 667, 677, 461, 834, 271, 92, 199, 243, 631, 155, 696, 46, 392, 325, 711, 379, 523, 494, 578, 9, 200, 485, 93, 437, 800, 221, 87, 154, 27, 255, 290, 833, 53, 327, 678, 425, 48, 583, 198, 0, 835, 194, 491, 94, 6, 353, 594, 79, 100, 863, 90, 310, 336, 859, 402, 775, 444, 159, 634, 791, 623, 466, 528, 649, 340, 624, 887, 294, 240, 478, 823, 588, 714, 889, 671, 862, 356, 551, 304, 135, 378, 346, 552, 629, 733, 517, 212, 7, 321, 265, 398, 442, 400, 84, 228, 436, 725, 783, 681, 411, 700, 67, 584, 635, 91, 277, 875, 388, 239, 582, 774, 440, 141, 694, 4, 766, 857, 424, 105, 683, 279, 867, 55, 51, 479, 747, 657, 242, 110, 326, 260, 59, 297, 180, 408, 63, 32, 822, 106, 270, 427, 698, 806, 755, 799, 824, 693, 465, 256, 418, 446, 695, 276, 26, 885, 599, 707, 585, 646, 595, 758, 189, 8, 170, 144, 280, 146, 391, 807, 179, 173, 462, 358, 532, 344]
Validation Data Indices: [303, 778, 531, 385, 134, 476, 691, 443, 386, 128, 579, 65, 869, 359, 202, 187, 456, 880, 705, 797, 656, 467, 581, 754, 131, 768, 172, 252, 163, 300, 417, 71, 566, 814, 322, 119, 515, 369, 89, 729, 226, 563, 148, 218, 12, 638, 509, 333, 825, 376, 245, 480, 182, 784, 619, 70, 126, 605, 37, 735, 452, 721, 630, 115, 854, 102, 864, 811, 188, 706, 870, 140, 439, 868, 168, 764, 589, 224, 191, 586, 183, 742, 753, 250, 526, 685, 505, 435, 874, 658, 769, 45, 537, 798, 644, 292, 397, 330, 289, 143, 175, 274, 519, 606, 690, 288, 286, 670, 484, 477, 506, 18, 740, 412, 464, 366, 736, 790, 699, 299, 266, 587, 459, 233, 598, 782, 246, 315, 282, 236, 504, 639, 518, 123, 31, 283, 232, 713, 122, 211, 213, 591, 129, 890, 229, 275, 471, 533, 853, 362, 38, 593, 56, 787, 301, 324, 837, 113, 21, 538, 710, 361, 490, 390, 1, 779, 580, 865, 438, 492, 642, 575, 151, 770, 414, 540, 298, 489]</code></pre>
</div>
</div>
<div class="cell" data-outputid="36eefeba-bf5e-44c5-c9df-4f94395a31b5" data-execution_count="36">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training Data, Validation Data</span></span>
<span id="cb56-2">trn_indep, val_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_indep[trn_split], t_indep[val_split]</span>
<span id="cb56-3">trn_dep, val_dep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_dep[trn_split], t_dep[val_split]</span>
<span id="cb56-4"></span>
<span id="cb56-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Independent Data Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trn_indep)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Dependent Data Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trn_dep)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Indepdent Data Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_indep)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb56-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Dependent Data Size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_dep)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Independent Data Size: 713
Training Dependent Data Size: 713
Validation Indepdent Data Size: 178
Validation Dependent Data Size: 178</code></pre>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly initialize coefficients</span></span>
<span id="cb58-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_coeffs():</span>
<span id="cb58-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.rand(n_coeff) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).requires_grad_()</span>
<span id="cb58-4"></span>
<span id="cb58-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update coefficents</span></span>
<span id="cb58-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb58-7">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb58-8">    coeffs.grad.zero_()</span>
<span id="cb58-9"></span>
<span id="cb58-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One full gradient descent step</span></span>
<span id="cb58-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_epoch(coeffs, lr):</span>
<span id="cb58-12">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(coeffs, trn_indep, trn_dep)</span>
<span id="cb58-13">    loss.backward()</span>
<span id="cb58-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb58-15">        update_coeffs(coeffs, lr)</span>
<span id="cb58-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"; "</span>)</span>
<span id="cb58-17"></span>
<span id="cb58-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model</span></span>
<span id="cb58-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_model(epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>):</span>
<span id="cb58-20">    torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span>
<span id="cb58-21">    coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_coeffs()</span>
<span id="cb58-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb58-23">      one_epoch(coeffs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb58-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> coeffs</span>
<span id="cb58-25"></span>
<span id="cb58-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average accuracy of model</span></span>
<span id="cb58-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> acc(coeffs):</span>
<span id="cb58-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (val_dep.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (calc_preds(coeffs, val_indep) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb58-29"></span>
<span id="cb58-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show coefficients for each column</span></span>
<span id="cb58-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_coeffs():</span>
<span id="cb58-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indep_cols, coeffs.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</div>
<div class="cell" data-outputid="ead3b7fe-0106-4dd3-c28a-cfc39e22749e" data-execution_count="38">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model</span></span>
<span id="cb59-2">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.536; 0.502; 0.477; 0.454; 0.431; 0.409; 0.388; 0.367; 0.349; 0.336; 0.330; 0.326; 0.329; 0.304; 0.314; 0.296; 0.300; 0.289; </code></pre>
</div>
</div>
<div class="cell" data-outputid="31946d7f-27c6-4cbf-a541-5850d8372e44" data-execution_count="39">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Coefficients for every column</span></span>
<span id="cb61-2">show_coeffs()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>{'Age': tensor(-0.2694),
 'SibSp': tensor(0.0901),
 'Parch': tensor(0.2359),
 'LogFare': tensor(0.0280),
 'Sex_male': tensor(-0.3990),
 'Sex_female': tensor(0.2345),
 'Pclass_1': tensor(0.7232),
 'Pclass_2': tensor(0.4112),
 'Pclass_3': tensor(0.3601),
 'Embarked_C': tensor(0.0955),
 'Embarked_Q': tensor(0.2395),
 'Embarked_S': tensor(0.2122)}</code></pre>
</div>
</div>
<div class="cell" data-outputid="8fe9f59f-856f-4041-9df1-edfe828995ad" data-execution_count="40">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate accuracy</span></span>
<span id="cb63-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_preds(coeffs, val_indep)</span>
<span id="cb63-3"></span>
<span id="cb63-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - assume that any passenger with score &gt; 0.5 is predicted to survive</span></span>
<span id="cb63-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - correct for  each row where preds &gt; 0.5 is the same as dependent variable</span></span>
<span id="cb63-6">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_dep.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>(preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb63-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"First 16 results: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>results[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-8"></span>
<span id="cb63-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average accuracy</span></span>
<span id="cb63-10">avg_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb63-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>First 16 results: tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True, False, False, False,  True,  True, False])
Average Accuracy: 0.7865168452262878</code></pre>
</div>
</div>
</section>
<section id="sigmoid" class="level3">
<h3 class="anchored" data-anchor-id="sigmoid">Sigmoid</h3>
<div class="cell" data-outputid="4fbaa3de-79a1-4532-81ef-44f44ff30594" data-execution_count="41">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - some of the predictions of the survival probability are &gt; 1 or &lt; 0</span></span>
<span id="cb65-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - can fix this issue by passing prediction through sigmoid function</span></span>
<span id="cb65-3">preds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>tensor([ 0.8160,  0.1295, -0.0148,  0.1831,  0.1520,  0.1350,  0.7279,  0.7754,  0.3222,  0.6740,  0.0753,  0.0389,  0.2216,  0.7631,
         0.0678,  0.3997,  0.3324,  0.8278,  0.1078,  0.7126,  0.1023,  0.3627,  0.9937,  0.8050,  0.1153,  0.1455,  0.8652,  0.3425])</code></pre>
</div>
</div>
<div class="cell" data-outputid="546a17e8-5970-446d-b48f-727f7931fb26" data-execution_count="42">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sigmoid function has a minimum of 0 and max at 1</span></span>
<span id="cb67-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sympy</span>
<span id="cb67-3">sympy.plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1/(1+exp(-x))"</span>, xlim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson5/fastai-lesson5_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update calc predictions to use sigmoid</span></span>
<span id="cb68-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb68-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.sigmoid((indeps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coeffs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="cell" data-outputid="52da9ab7-7ff2-403c-e72a-e160468bdd91" data-execution_count="44">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model with Sigmoid Predictions</span></span>
<span id="cb69-2">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.510; 0.327; 0.294; 0.207; 0.201; 0.199; 0.198; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; </code></pre>
</div>
</div>
<div class="cell" data-outputid="0e607318-505a-42fd-c0c4-9eea6561a156" data-execution_count="45">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check coeffcients</span></span>
<span id="cb71-2">show_coeffs()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>{'Age': tensor(-1.5061),
 'SibSp': tensor(-1.1575),
 'Parch': tensor(-0.4267),
 'LogFare': tensor(0.2543),
 'Sex_male': tensor(-10.3320),
 'Sex_female': tensor(8.4185),
 'Pclass_1': tensor(3.8389),
 'Pclass_2': tensor(2.1398),
 'Pclass_3': tensor(-6.2331),
 'Embarked_C': tensor(1.4771),
 'Embarked_Q': tensor(2.1168),
 'Embarked_S': tensor(-4.7958)}</code></pre>
</div>
</div>
<div class="cell" data-outputid="87ef2966-0c55-4048-cb2a-2166d2d9ac57" data-execution_count="46">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Accuracy</span></span>
<span id="cb73-2">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
</section>
<section id="final-linear-model-setup" class="level3">
<h3 class="anchored" data-anchor-id="final-linear-model-setup">Final Linear Model Setup</h3>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of coefficients</span></span>
<span id="cb75-2">n_coeff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_indep.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb75-3"></span>
<span id="cb75-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly initialize coefficients</span></span>
<span id="cb75-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_coeffs():</span>
<span id="cb75-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.rand(n_coeff)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).requires_grad_()</span>
<span id="cb75-7"></span>
<span id="cb75-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss Function - MAE (Mean Absolute Error)</span></span>
<span id="cb75-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_loss(coeffs, indeps, deps):</span>
<span id="cb75-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(calc_preds(coeffs, indeps) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> deps).mean()</span>
<span id="cb75-11"></span>
<span id="cb75-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update coefficents</span></span>
<span id="cb75-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb75-14">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb75-15">    coeffs.grad.zero_()</span>
<span id="cb75-16"></span>
<span id="cb75-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One full gradient descent step</span></span>
<span id="cb75-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_epoch(coeffs, lr):</span>
<span id="cb75-19">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(coeffs, trn_indep, trn_dep)</span>
<span id="cb75-20">    loss.backward()</span>
<span id="cb75-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb75-22">      update_coeffs(coeffs, lr)</span>
<span id="cb75-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"; "</span>)</span>
<span id="cb75-24"></span>
<span id="cb75-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model</span></span>
<span id="cb75-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_model(epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>):</span>
<span id="cb75-27">    torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span>
<span id="cb75-28">    coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_coeffs()</span>
<span id="cb75-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb75-30">      one_epoch(coeffs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb75-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> coeffs</span>
<span id="cb75-32"></span>
<span id="cb75-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average accuracy of model</span></span>
<span id="cb75-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> acc(coeffs):</span>
<span id="cb75-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (val_dep.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (calc_preds(coeffs, val_indep) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb75-36">acc(coeffs)</span>
<span id="cb75-37"></span>
<span id="cb75-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate predictions</span></span>
<span id="cb75-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb75-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.sigmoid((indeps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> coeffs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb75-41"></span>
<span id="cb75-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show coefficients for each column</span></span>
<span id="cb75-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_coeffs():</span>
<span id="cb75-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indep_cols, coeffs.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</div>
<div class="cell" data-outputid="f4799705-14a9-4ba6-c10d-8edc648e63f8" data-execution_count="48">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.510; 0.327; 0.294; 0.207; 0.201; 0.199; 0.198; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; </code></pre>
</div>
</div>
</section>
<section id="test-model-on-inference-data" class="level3">
<h3 class="anchored" data-anchor-id="test-model-on-inference-data">Test model on inference data</h3>
<section id="inference-data-processing" class="level4">
<h4 class="anchored" data-anchor-id="inference-data-processing">Inference Data Processing</h4>
<div class="cell" data-outputid="c77ca5ab-8c68-4a70-e861-23021987e23d" data-execution_count="49">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load data</span></span>
<span id="cb78-2">tst_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.csv'</span>)</span>
<span id="cb78-3"></span>
<span id="cb78-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fare data is missing one passenger -&gt; substitute 0 to fix the issue</span></span>
<span id="cb78-5">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df.Fare.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb78-6">tst_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">

  <div id="df-1d794f17-43ff-424d-a202-c1456aca2975" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">PassengerId</th>
<th data-quarto-table-cell-role="th">Pclass</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Sex</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">SibSp</th>
<th data-quarto-table-cell-role="th">Parch</th>
<th data-quarto-table-cell-role="th">Ticket</th>
<th data-quarto-table-cell-role="th">Fare</th>
<th data-quarto-table-cell-role="th">Cabin</th>
<th data-quarto-table-cell-role="th">Embarked</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>892</td>
<td>3</td>
<td>Kelly, Mr. James</td>
<td>male</td>
<td>34.5</td>
<td>0</td>
<td>0</td>
<td>330911</td>
<td>7.8292</td>
<td>NaN</td>
<td>Q</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>893</td>
<td>3</td>
<td>Wilkes, Mrs. James (Ellen Needs)</td>
<td>female</td>
<td>47.0</td>
<td>1</td>
<td>0</td>
<td>363272</td>
<td>7.0000</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>894</td>
<td>2</td>
<td>Myles, Mr. Thomas Francis</td>
<td>male</td>
<td>62.0</td>
<td>0</td>
<td>0</td>
<td>240276</td>
<td>9.6875</td>
<td>NaN</td>
<td>Q</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>895</td>
<td>3</td>
<td>Wirz, Mr. Albert</td>
<td>male</td>
<td>27.0</td>
<td>0</td>
<td>0</td>
<td>315154</td>
<td>8.6625</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>896</td>
<td>3</td>
<td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>
<td>female</td>
<td>22.0</td>
<td>1</td>
<td>1</td>
<td>3101298</td>
<td>12.2875</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">413</td>
<td>1305</td>
<td>3</td>
<td>Spector, Mr. Woolf</td>
<td>male</td>
<td>NaN</td>
<td>0</td>
<td>0</td>
<td>A.5. 3236</td>
<td>8.0500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">414</td>
<td>1306</td>
<td>1</td>
<td>Oliva y Ocana, Dona. Fermina</td>
<td>female</td>
<td>39.0</td>
<td>0</td>
<td>0</td>
<td>PC 17758</td>
<td>108.9000</td>
<td>C105</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">415</td>
<td>1307</td>
<td>3</td>
<td>Saether, Mr. Simon Sivertsen</td>
<td>male</td>
<td>38.5</td>
<td>0</td>
<td>0</td>
<td>SOTON/O.Q. 3101262</td>
<td>7.2500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">416</td>
<td>1308</td>
<td>3</td>
<td>Ware, Mr. Frederick</td>
<td>male</td>
<td>NaN</td>
<td>0</td>
<td>0</td>
<td>359309</td>
<td>8.0500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">417</td>
<td>1309</td>
<td>3</td>
<td>Peter, Master. Michael J</td>
<td>male</td>
<td>NaN</td>
<td>1</td>
<td>1</td>
<td>2668</td>
<td>22.3583</td>
<td>NaN</td>
<td>C</td>
</tr>
</tbody>
</table>


<p>418 rows × 11 columns</p>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-1d794f17-43ff-424d-a202-c1456aca2975')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-1d794f17-43ff-424d-a202-c1456aca2975 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-1d794f17-43ff-424d-a202-c1456aca2975');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-d6375a6a-33f7-4421-bef1-ce90fdaad2c3">
  <button class="colab-df-quickchart" onclick="quickchart('df-d6375a6a-33f7-4421-bef1-ce90fdaad2c3')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-d6375a6a-33f7-4421-bef1-ce90fdaad2c3 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

  <div id="id_f96a3810-28ff-45d4-99a4-74698e6f2054">
    <style>
      .colab-df-generate {
        background-color: #E8F0FE;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: none;
        fill: #1967D2;
        height: 32px;
        padding: 0 0 0 0;
        width: 32px;
      }

      .colab-df-generate:hover {
        background-color: #E2EBFA;
        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
        fill: #174EA6;
      }

      [theme=dark] .colab-df-generate {
        background-color: #3B4455;
        fill: #D2E3FC;
      }

      [theme=dark] .colab-df-generate:hover {
        background-color: #434B5C;
        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
        fill: #FFFFFF;
      }
    </style>
    <button class="colab-df-generate" onclick="generateWithVariable('tst_df')" title="Generate code using this dataframe." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z"></path>
  </svg>
    </button>
    <script>
      (() => {
      const buttonEl =
        document.querySelector('#id_f96a3810-28ff-45d4-99a4-74698e6f2054 button.colab-df-generate');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      buttonEl.onclick = () => {
        google.colab.notebook.generateWithVariable('tst_df');
      }
      })();
    </script>
  </div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - these steps follow the same process as the training data processing</span></span>
<span id="cb79-2">tst_df.fillna(modes, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb79-3">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb79-4">tst_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get_dummies(tst_df, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>])</span>
<span id="cb79-5"></span>
<span id="cb79-6">added_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex_male'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex_female'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_Q'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_S'</span>]</span>
<span id="cb79-7">indep_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SibSp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> added_cols</span>
<span id="cb79-8"></span>
<span id="cb79-9">tst_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(tst_df[indep_cols].values, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb79-10">tst_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_indep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vals</span></code></pre></div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate predictions of which passengers survived in titanic dataset</span></span>
<span id="cb80-2">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (calc_preds(tst_indep, coeffs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>()</span></code></pre></div>
</div>
</section>
</section>
<section id="linear-model-submit-results-to-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="linear-model-submit-results-to-kaggle">Linear Model: Submit Results to Kaggle</h3>
<div class="cell" data-outputid="a535a2b2-19fb-4284-b2de-2172e53944dc" data-execution_count="52">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Submit to Kaggle</span></span>
<span id="cb81-2">sub_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>]]</span>
<span id="cb81-3">sub_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sub.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb81-4"></span>
<span id="cb81-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check first few rows</span></span>
<span id="cb81-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head sub.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PassengerId,Survived
892,0
893,0
894,0
895,0
896,0
897,0
898,1
899,0
900,1</code></pre>
</div>
</div>
</section>
</section>
<section id="cleaning-up-linear-model-code" class="level2">
<h2 class="anchored" data-anchor-id="cleaning-up-linear-model-code">Cleaning up Linear Model Code</h2>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Multiplying elements together and then adding across rows is the same as matrix-vector multiply</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="975bf680-50ea-4063-ab49-1cdd349e0453" data-execution_count="54">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original Matrix-Vector multiply</span></span>
<span id="cb84-2">(val_indep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coeffs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>tensor([ 12.3288, -14.8119, -15.4540, -13.1513, -13.3512, -13.6469,   3.6248,   5.3429, -22.0878,   3.1233, -21.8742, -15.6421, -21.5504,
          3.9393, -21.9190, -12.0010, -12.3775,   5.3550, -13.5880,  -3.1015, -21.7237, -12.2081,  12.9767,   4.7427, -21.6525, -14.9135,
         -2.7433, -12.3210, -21.5886,   3.9387,   5.3890,  -3.6196, -21.6296, -21.8454,  12.2159,  -3.2275, -12.0289,  13.4560, -21.7230,
         -3.1366, -13.2462, -21.7230, -13.6831,  13.3092, -21.6477,  -3.5868, -21.6854, -21.8316, -14.8158,  -2.9386,  -5.3103, -22.2384,
        -22.1097, -21.7466, -13.3780, -13.4909, -14.8119, -22.0690, -21.6666, -21.7818,  -5.4439, -21.7407, -12.6551, -21.6671,   4.9238,
        -11.5777, -13.3323, -21.9638, -15.3030,   5.0243, -21.7614,   3.1820, -13.4721, -21.7170, -11.6066, -21.5737, -21.7230, -11.9652,
        -13.2382, -13.7599, -13.2170,  13.1347, -21.7049, -21.7268,   4.9207,  -7.3198,  -5.3081,   7.1065,  11.4948, -13.3135, -21.8723,
        -21.7230,  13.3603, -15.5670,   3.4105,  -7.2857, -13.7197,   3.6909,   3.9763, -14.7227, -21.8268,   3.9387, -21.8743, -21.8367,
        -11.8518, -13.6712, -21.8299,   4.9440,  -5.4471, -21.9666,   5.1333,  -3.2187, -11.6008,  13.7920, -21.7230,  12.6369,  -3.7268,
        -14.8119, -22.0637,  12.9468, -22.1610,  -6.1827, -14.8119,  -3.2838, -15.4540, -11.6950,  -2.9926,  -3.0110, -21.5664, -13.8268,
          7.3426, -21.8418,   5.0744,   5.2582,  13.3415, -21.6289, -13.9898, -21.8112,  -7.3316,   5.2296, -13.4453,  12.7891, -22.1235,
        -14.9625,  -3.4339,   6.3089, -21.9839,   3.1968,   7.2400,   2.8558,  -3.1187,   3.7965,   5.4667, -15.1101, -15.0597, -22.9391,
        -21.7230,  -3.0346, -13.5206, -21.7011,  13.4425,  -7.2690, -21.8335, -12.0582,  13.0489,   6.7993,   5.2160,   5.0794, -12.6957,
        -12.1838,  -3.0873, -21.6070,   7.0744, -21.7170, -22.1001,   6.8159, -11.6002, -21.6310], grad_fn=&lt;SumBackward1&gt;)</code></pre>
</div>
</div>
<div class="cell" data-outputid="104b57bc-c9e6-4525-dbb3-4220a55205f5" data-execution_count="55">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch optimized matrix-vector multiply</span></span>
<span id="cb86-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - python uses @ operator to indicate matrix products and is supported by pytorch tensors</span></span>
<span id="cb86-3">val_indep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>coeffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>tensor([ 12.3288, -14.8119, -15.4540, -13.1513, -13.3511, -13.6468,   3.6248,   5.3429, -22.0878,   3.1233, -21.8742, -15.6421, -21.5504,
          3.9393, -21.9190, -12.0010, -12.3775,   5.3550, -13.5880,  -3.1015, -21.7237, -12.2081,  12.9767,   4.7427, -21.6525, -14.9135,
         -2.7433, -12.3210, -21.5886,   3.9387,   5.3890,  -3.6196, -21.6296, -21.8454,  12.2159,  -3.2275, -12.0289,  13.4560, -21.7230,
         -3.1366, -13.2462, -21.7230, -13.6831,  13.3092, -21.6477,  -3.5868, -21.6854, -21.8316, -14.8158,  -2.9386,  -5.3103, -22.2384,
        -22.1097, -21.7466, -13.3780, -13.4909, -14.8119, -22.0690, -21.6666, -21.7818,  -5.4439, -21.7407, -12.6551, -21.6671,   4.9238,
        -11.5777, -13.3323, -21.9638, -15.3030,   5.0243, -21.7614,   3.1820, -13.4721, -21.7170, -11.6066, -21.5737, -21.7230, -11.9652,
        -13.2382, -13.7599, -13.2170,  13.1347, -21.7049, -21.7268,   4.9207,  -7.3198,  -5.3081,   7.1065,  11.4948, -13.3135, -21.8723,
        -21.7230,  13.3603, -15.5670,   3.4105,  -7.2857, -13.7197,   3.6909,   3.9763, -14.7227, -21.8268,   3.9387, -21.8743, -21.8367,
        -11.8518, -13.6712, -21.8299,   4.9440,  -5.4471, -21.9666,   5.1333,  -3.2187, -11.6008,  13.7920, -21.7230,  12.6369,  -3.7268,
        -14.8119, -22.0637,  12.9468, -22.1610,  -6.1827, -14.8119,  -3.2838, -15.4540, -11.6950,  -2.9926,  -3.0110, -21.5664, -13.8268,
          7.3426, -21.8418,   5.0744,   5.2582,  13.3415, -21.6289, -13.9898, -21.8112,  -7.3316,   5.2296, -13.4453,  12.7891, -22.1235,
        -14.9625,  -3.4339,   6.3089, -21.9839,   3.1968,   7.2400,   2.8558,  -3.1187,   3.7965,   5.4667, -15.1101, -15.0597, -22.9391,
        -21.7230,  -3.0346, -13.5206, -21.7011,  13.4425,  -7.2690, -21.8335, -12.0582,  13.0489,   6.7993,   5.2160,   5.0794, -12.6957,
        -12.1838,  -3.0873, -21.6070,   7.0744, -21.7170, -22.1001,   6.8159, -11.6002, -21.6310], grad_fn=&lt;MvBackward0&gt;)</code></pre>
</div>
</div>
<section id="linear-model-pytorch-matrix-vector-multiply" class="level3">
<h3 class="anchored" data-anchor-id="linear-model-pytorch-matrix-vector-multiply">Linear Model: PyTorch Matrix-Vector Multiply</h3>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of coefficients</span></span>
<span id="cb88-2">n_coeff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t_indep.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb88-3"></span>
<span id="cb88-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly initialize coefficients</span></span>
<span id="cb88-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_coeffs():</span>
<span id="cb88-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - 1 turns torch.rand() into a column vector</span></span>
<span id="cb88-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.rand(n_coeff, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>).requires_grad_()</span>
<span id="cb88-8"></span>
<span id="cb88-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss Function - MAE (Mean Absolute Error)</span></span>
<span id="cb88-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_loss(coeffs, indeps, deps):</span>
<span id="cb88-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(calc_preds(coeffs, indeps) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> deps).mean()</span>
<span id="cb88-12"></span>
<span id="cb88-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update coefficents</span></span>
<span id="cb88-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb88-15">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb88-16">    coeffs.grad.zero_()</span>
<span id="cb88-17"></span>
<span id="cb88-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One full gradient descent step</span></span>
<span id="cb88-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_epoch(coeffs, lr):</span>
<span id="cb88-20">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(coeffs, trn_indep, trn_dep)</span>
<span id="cb88-21">    loss.backward()</span>
<span id="cb88-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb88-23">      update_coeffs(coeffs, lr)</span>
<span id="cb88-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"; "</span>)</span>
<span id="cb88-25"></span>
<span id="cb88-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train model</span></span>
<span id="cb88-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_model(epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>):</span>
<span id="cb88-28">    torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span>
<span id="cb88-29">    coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_coeffs()</span>
<span id="cb88-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb88-31">      one_epoch(coeffs, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb88-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> coeffs</span>
<span id="cb88-33"></span>
<span id="cb88-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average accuracy of model</span></span>
<span id="cb88-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> acc(coeffs):</span>
<span id="cb88-36">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (val_dep.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (calc_preds(coeffs, val_indep) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb88-37">acc(coeffs)</span>
<span id="cb88-38"></span>
<span id="cb88-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate predictions</span></span>
<span id="cb88-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb88-41">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.sigmoid(indeps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>coeffs)</span>
<span id="cb88-42"></span>
<span id="cb88-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show coefficients for each column</span></span>
<span id="cb88-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_coeffs():</span>
<span id="cb88-45">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indep_cols, coeffs.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</div>
<div class="cell" data-outputid="d58bfc8a-986d-44eb-87a4-fe3135706d56" data-execution_count="57">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change dependent variable into a column vector - rank 2 tensor</span></span>
<span id="cb89-2">trn_dep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trn_dep[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb89-3">val_dep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_dep[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb89-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Data Shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trn_dep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb89-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Data Rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trn_dep.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb89-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Data Shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val_dep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb89-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Data Rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_dep.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training Data Shape: torch.Size([713, 1])
Training Data Rank: 2
Validation Data Shape: torch.Size([178, 1])
Validation Data Rank: 2</code></pre>
</div>
</div>
<div class="cell" data-outputid="80035620-671d-47da-9d06-e38aead156d8" data-execution_count="58">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb91-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb91-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"coefficients shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coeffs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb91-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"coefficients rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(coeffs.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb91-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc(coeffs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.512; 0.323; 0.290; 0.205; 0.200; 0.198; 0.197; 0.197; 0.196; 0.196; 0.196; 0.195; 0.195; 0.195; 0.195; 0.195; 0.195; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 0.194; 
coefficients shape: torch.Size([12, 1])
coefficients rank: 2
accuracy: 0.8258426785469055</code></pre>
</div>
</div>
</section>
</section>
<section id="neural-network" class="level2">
<h2 class="anchored" data-anchor-id="neural-network">Neural Network</h2>
<ul>
<li>Define coefficients for each layer of the neural network</li>
</ul>
<p><code>n hidden</code> - higher number gives more flexibility for neural network to approximate data but slower and harder to train</p>
<p><code>First Layer</code> <code>input</code> - n_coeff values <code>output</code> - n_hidden values (input to second layer) - need matrix of size n_coeffs by n_hidden - divide coefficients by n_hidden so that when we sum them up in the next layer so that we end up with similar magnitude numbers to what we started with</p>
<p><code>Second Layer</code> <code>input</code> - n_hidden values (output of first layer) <code>output</code> - 1 value - need n_hidden by 1 + constant term</p>
<p><code>Steps</code> 1. Two matrix products - indeps@l1 and res@l2 (res is output of first layer) 2. First layer output is passed to F.relu (non-linearity) 3. Second layer output is passed to sigmoid</p>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_coeffs(n_hidden<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb93-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set of coefficients to go from input to hidden</span></span>
<span id="cb93-3">    layer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.rand(n_coeff, n_hidden) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_hidden</span>
<span id="cb93-4"></span>
<span id="cb93-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set of coefficients to from hiddent to an output</span></span>
<span id="cb93-6">    layer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_hidden, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span>
<span id="cb93-7">    const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb93-8"></span>
<span id="cb93-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return a tuple of layer1 gradient, layer2 gradient, and constant gradient</span></span>
<span id="cb93-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> layer1.requires_grad_(), layer2.requires_grad_(), const.requires_grad_()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb94-2"></span>
<span id="cb94-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># neural network</span></span>
<span id="cb94-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb94-5">    l1, l2, const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb94-6"></span>
<span id="cb94-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># layer 1</span></span>
<span id="cb94-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace negative values with zeroes</span></span>
<span id="cb94-9">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(indeps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>l1)</span>
<span id="cb94-10"></span>
<span id="cb94-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># layer 2</span></span>
<span id="cb94-12">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> const</span>
<span id="cb94-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.sigmoid(res)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update Coefficients</span></span>
<span id="cb95-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Three sets of coefficients to update per epoch(layer1, layer2, constant)</span></span>
<span id="cb95-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb95-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> coeffs:</span>
<span id="cb95-5">    layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb95-6">    layer.grad.zero_()</span></code></pre></div>
</div>
<div class="cell" data-outputid="2049d19d-87b5-488c-9aa2-abe2ac07d329" data-execution_count="63">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model</span></span>
<span id="cb96-2">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.543; 0.532; 0.520; 0.505; 0.487; 0.466; 0.439; 0.407; 0.373; 0.343; 0.319; 0.301; 0.286; 0.274; 0.264; 0.256; 0.250; 0.245; 0.240; 0.237; 0.234; 0.231; 0.229; 0.227; 0.226; 0.224; 0.223; 0.222; 0.221; 0.220; </code></pre>
</div>
</div>
<div class="cell" data-outputid="11f6f651-0aaa-48c8-8282-49ce92289e15" data-execution_count="64">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model</span></span>
<span id="cb98-2">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.543; 0.400; 0.260; 0.390; 0.221; 0.211; 0.197; 0.195; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.193; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; 0.192; </code></pre>
</div>
</div>
<div class="cell" data-outputid="026dd66f-e44f-4681-af8c-41333573f265" data-execution_count="65">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Accuracy</span></span>
<span id="cb100-2">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
</section>
<section id="deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="deep-learning">Deep Learning</h2>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_coeffs():</span>
<span id="cb102-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of each hidden layer</span></span>
<span id="cb102-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two hidden layers - 10 activations in each layer</span></span>
<span id="cb102-4">    hiddens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb102-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - n_coeffs to 10</span></span>
<span id="cb102-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - 10 to 10</span></span>
<span id="cb102-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - 10 to 1</span></span>
<span id="cb102-8">    sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n_coeff] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hiddens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb102-9">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sizes)</span>
<span id="cb102-10">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(torch.rand(sizes[i], sizes[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sizes[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb102-11">    consts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb102-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> consts:</span>
<span id="cb102-13">      l.requires_grad_()</span>
<span id="cb102-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> layers,consts</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb103-2"></span>
<span id="cb103-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_preds(coeffs, indeps):</span>
<span id="cb103-4">    layers,consts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb103-5">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layers)</span>
<span id="cb103-6">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indeps</span>
<span id="cb103-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(layers):</span>
<span id="cb103-8">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> consts[i]</span>
<span id="cb103-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RELU for every layer except for last layer</span></span>
<span id="cb103-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb103-11">          res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(res)</span>
<span id="cb103-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sigmoid only for the last layer</span></span>
<span id="cb103-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.sigmoid(res)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_coeffs(coeffs, lr):</span>
<span id="cb104-2">    layers,consts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeffs</span>
<span id="cb104-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> consts:</span>
<span id="cb104-4">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb104-5">        layer.grad.zero_()</span></code></pre></div>
</div>
<div class="cell" data-outputid="e89c7be0-73d4-4811-a8fc-2dc4ffe4d4bd" data-execution_count="69">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model</span></span>
<span id="cb105-2">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.521; 0.483; 0.427; 0.379; 0.379; 0.379; 0.379; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.378; 0.377; 0.376; 0.371; 0.333; 0.239; 0.224; 0.208; 0.204; 0.203; 0.203; 0.207; 0.197; 0.196; 0.195; </code></pre>
</div>
</div>
<div class="cell" data-outputid="e106ddcf-bd0e-4a41-c0db-32071f9fc353" data-execution_count="70">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Accuracy</span></span>
<span id="cb107-2">acc(coeffs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>tensor(0.8258)</code></pre>
</div>
</div>
</section>
<section id="framework-fastai-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="framework-fastai-pytorch">Framework: fastai + PyTorch</h2>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load stuff</span></span>
<span id="cb109-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.tabular.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb109-3"></span>
<span id="cb109-4">pd.options.display.float_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span></span>
<span id="cb109-5">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Data</span></span>
<span id="cb110-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train.csv'</span>)</span>
<span id="cb110-3"></span>
<span id="cb110-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feature Engineering</span></span>
<span id="cb110-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_features(df):</span>
<span id="cb110-6">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log1p(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>])</span>
<span id="cb110-7">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Deck'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Cabin.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>, B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>, C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>, D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DE"</span>, E<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DE"</span>, F<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FG"</span>, G<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FG"</span>))</span>
<span id="cb110-8">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.SibSp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>df.Parch</span>
<span id="cb110-9">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alone'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb110-10">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TicketFreq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ticket'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ticket'</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>)</span>
<span id="cb110-11">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Name.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb110-12">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.Title.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(Mr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mr"</span>,Miss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miss"</span>,Mrs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mrs"</span>,Master<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Master"</span>))</span>
<span id="cb110-13"></span>
<span id="cb110-14">add_features(df)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data Split</span></span>
<span id="cb111-2">splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomSplitter(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)(df)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tabular Dataloaders</span></span>
<span id="cb112-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPandas(</span>
<span id="cb112-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># splits for indices of training and validation sets</span></span>
<span id="cb112-4">    df, splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>splits,</span>
<span id="cb112-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn strings into categories, fill missing values in numeric columns with the median, normalise all numeric columns</span></span>
<span id="cb112-6">    procs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Categorify, FillMissing, Normalize],</span>
<span id="cb112-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># categorical independent variables</span></span>
<span id="cb112-8">    cat_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deck"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>],</span>
<span id="cb112-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># continuous independent variables</span></span>
<span id="cb112-10">    cont_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SibSp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alone'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TicketFreq'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Family'</span>],</span>
<span id="cb112-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dependent variable</span></span>
<span id="cb112-12">    y_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survived"</span>,</span>
<span id="cb112-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dependent variable is categorical(build a classification model)</span></span>
<span id="cb112-14">    y_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CategoryBlock(),</span>
<span id="cb112-15">).dataloaders(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb112-16"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model</span></span>
<span id="cb113-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - data + model = Learner</span></span>
<span id="cb113-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - dls -&gt; data</span></span>
<span id="cb113-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - layers -&gt; size of each hidden layer</span></span>
<span id="cb113-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - metrics -&gt; any metric we want to use for loss function</span></span>
<span id="cb113-6">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tabular_learner(dls, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy, layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
</div>
<div class="cell" data-outputid="d0477a5b-5411-466b-9d54-f57b68de2c30" data-execution_count="76">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find learning rate</span></span>
<span id="cb114-2">learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(slide, valley))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>SuggestedLRs(slide=0.05754399299621582, valley=0.013182567432522774)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson5/fastai-lesson5_files/figure-html/cell-74-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="72077548-e61e-4a3e-b1d4-dddb880cefbe" data-execution_count="77">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify number of epochs and learning rate and train model</span></span>
<span id="cb116-2">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.577146</td>
<td>0.582949</td>
<td>0.606742</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.510818</td>
<td>0.498523</td>
<td>0.786517</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.467023</td>
<td>0.459841</td>
<td>0.797753</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.439957</td>
<td>0.468547</td>
<td>0.797753</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.427232</td>
<td>0.415261</td>
<td>0.825843</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.416340</td>
<td>0.437362</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.408347</td>
<td>0.413253</td>
<td>0.848315</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.400442</td>
<td>0.406075</td>
<td>0.803371</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.397265</td>
<td>0.443730</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.392389</td>
<td>0.432267</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.389983</td>
<td>0.415384</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.386057</td>
<td>0.425319</td>
<td>0.820225</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.382527</td>
<td>0.435054</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.378309</td>
<td>0.429746</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.374304</td>
<td>0.419489</td>
<td>0.825843</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.372190</td>
<td>0.425430</td>
<td>0.831461</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
<section id="test-fastai-model-on-inference-data" class="level3">
<h3 class="anchored" data-anchor-id="test-fastai-model-on-inference-data">Test fastai model on inference data</h3>
<div class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inference Data Processing</span></span>
<span id="cb117-2">tst_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.csv'</span>)</span>
<span id="cb117-3">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df.Fare.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb117-4">add_features(tst_df)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply data modeling information from learner to inference</span></span>
<span id="cb118-2">tst_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.test_dl(tst_df)</span></code></pre></div>
</div>
<div class="cell" data-outputid="81968a8d-ce5b-4d74-8b6b-70f33745c5c3" data-execution_count="80">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get predictions for the inference data</span></span>
<span id="cb119-2">preds,_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
</section>
<section id="fastai-model-submit-to-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="fastai-model-submit-to-kaggle">fastai Model: Submit to Kaggle</h3>
<div class="cell" data-outputid="e31a27de-72e1-4b9c-dcd6-20f0edc5bebf" data-execution_count="81">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># submit to kaggle</span></span>
<span id="cb120-2">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>()</span>
<span id="cb120-3">sub_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>]]</span>
<span id="cb120-4">sub_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'framework_sub.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb120-5"></span>
<span id="cb120-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check predictions file</span></span>
<span id="cb120-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head framework_sub.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PassengerId,Survived
892,0
893,0
894,0
895,0
896,1
897,0
898,1
899,0
900,1</code></pre>
</div>
</div>
</section>
</section>
<section id="ensembling" class="level2">
<h2 class="anchored" data-anchor-id="ensembling">Ensembling</h2>
<ul>
<li>create multiple models and combine predictions</li>
</ul>
<div class="cell" data-execution_count="83">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ensemble():</span>
<span id="cb122-2">    learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tabular_learner(dls, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy, layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb122-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> learn.no_bar(),learn.no_logging():</span>
<span id="cb122-4">      learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)</span>
<span id="cb122-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tst_dl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-outputid="43ba9bc6-b447-47eb-9cbb-7826b16da981" data-execution_count="84">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a set of 5 different predictions</span></span>
<span id="cb123-2">learns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ensemble() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take average of all predictions</span></span>
<span id="cb124-2">ens_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(learns).mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<section id="ensembling-submit-to-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="ensembling-submit-to-kaggle">Ensembling: Submit to Kaggle</h3>
<div class="cell" data-outputid="922c340a-2f61-445d-a5b1-a6683ae4bb99" data-execution_count="86">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># submit to kaggle</span></span>
<span id="cb125-2">tst_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>()</span>
<span id="cb125-3">sub_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tst_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>]]</span>
<span id="cb125-4">sub_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensemble_sub.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb125-5"></span>
<span id="cb125-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check predictions file</span></span>
<span id="cb125-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>head ensemble_sub.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PassengerId,Survived
892,0
893,0
894,0
895,0
896,1
897,0
898,1
899,0
900,1</code></pre>
</div>
</div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://course.fast.ai/Lessons/lesson3.html">FastAI Lesson 3</a></li>
<li><a href="https://course.fast.ai/Lessons/lesson5.html">FastAI Lesson 5</a></li>
<li><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb">FastAI Chapter 4</a></li>
<li><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/09_tabular.ipynb">FastAI Chapter 9</a></li>
<li><a href="https://www.kaggle.com/competitions/titanic">Titanic - Machine Learning from Disaster</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work">How does a neural net really work?</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch">Linear model and neural net from scratch</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/why-you-should-use-a-framework">Why you should use a framework</a></li>
<li><a href="https://www.kaggle.com/code/gunesevitan/titanic-advanced-feature-engineering-tutorial/">Titanic - Advanced Feature Engineering Tutorial</a></li>
<li><a href="https://docs.fast.ai/">fast.ai docs</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson5/fastai-lesson5.html</guid>
  <pubDate>Wed, 17 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 4: Natural Language(NLP)</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4.html</link>
  <description><![CDATA[ 




<section id="announcements" class="level2">
<h2 class="anchored" data-anchor-id="announcements">Announcements</h2>
<p>Happy New Year! I’m finally back to FastAI after taking a break due to job applications, trying to learn Golang and reflecting on my job search. This lesson was particularly challenging for me because I ran into a bunch of weird bugs and updates to the hugging face transformer API. I had no idea what the code was doing in the FastAI example despite copying Jeremy’s code verbatim and printing print statements. After spending some time trying to debug and understand what each part of the code setup was doing with hugging face and Jeremy’s code I finally feel comfortable trying to write a blog post about this lesson.</p>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>All of this code was written by Jeremy Howard and the FastAI team and I modified it slightly to include my own print statements and additional helper functions based on Jeremy’s code. This is the source for the original code <a href="https://www.kaggle.com/code/jhoward/getting-started-with-nlp-for-absolute-beginners">Getting Start With NLP for Absolute Begginers</a> and <a href="https://www.kaggle.com/code/jhoward/iterate-like-a-grandmaster/">Iterate Like A Grandmaster</a>.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this lesson, Jeremy gives an overview of his pioneering work with ULMFit, how to use Transformers and the set up for participating on kaggle. I’m no NLP expert and don’t have an interest in NLP but what really excited me was that I finally understood what the iteration and development process was for a Kaggle Competition. This had been one of my goals when I embarked on FastAI.</p>
</section>
<section id="jeremys-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremys-advice">Jeremy’s Advice</h2>
<p>Know the tools for your trade really well - <strong>Data Science Core Tools</strong>: Python, Numpy, Pandas Matplotlib, ScikitLearn, Pytorch, Scipy</p>
</section>
<section id="us-patent-phrase-to-phrase-matching-competition" class="level2">
<h2 class="anchored" data-anchor-id="us-patent-phrase-to-phrase-matching-competition">US Patent Phrase to Phrase Matching Competition</h2>
<p>The US Patent Phrase to Phrase Matching Kaggle Competition is used as the case study for learning the basics of NLP, how to use transformers and the kaggle workflow. More information about the data and competition can be found here <a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching/">US Patent Phrase to Phrase Matching Competition</a></p>
</section>
<section id="data-sciencekaggle-competition-workflow" class="level2">
<h2 class="anchored" data-anchor-id="data-sciencekaggle-competition-workflow">Data Science/Kaggle Competition Workflow</h2>
<p>This is the workflow that I figured out from this chapter.</p>
<ol type="1">
<li>Import data and check files</li>
<li>Exploratory Data Analysis</li>
<li>Data Representation (Wrangling, Tokenization, Numericalization)</li>
<li>Metrics</li>
<li>Training Model</li>
<li>Evaluate Model Performance</li>
</ol>
<p>I found the steps similar to the visualization process and could have dedicated some more time to iterating and fine-tuning my model for scoring high on this kaggle competition but in this chapter I was aiming to get an understanding of the general workflow and process that goes into building and iterating a model.</p>
</section>
<section id="load-data-and-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-data-and-libraries">Load Data and Libraries</h2>
<div class="cell" data-outputid="bea2f320-0252-4808-f91e-b361743efb15" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import libraries and files</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required libraries + packages for any ml/data science project</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fastai library contains all the packages above and wraps them in the fastai library</span></span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kaggle API package install</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install kaggle</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hugging Face required libraries + packages</span></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q datasets</span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install transformers sentencepiece</span>
<span id="cb1-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install transformers[torch]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.5.16)
Requirement already satisfied: six&gt;=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.16.0)
Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from kaggle) (2023.11.17)
Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.31.0)
Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.66.1)
Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.1)
Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.0.7)
Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.1.0)
Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach-&gt;kaggle) (0.5.1)
Requirement already satisfied: text-unidecode&gt;=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify-&gt;kaggle) (1.3)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;kaggle) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;kaggle) (3.6)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 507.1/507.1 kB 4.7 MB/s eta 0:00:00
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 115.3/115.3 kB 7.9 MB/s eta 0:00:00
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 134.8/134.8 kB 7.7 MB/s eta 0:00:00
Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.35.2)
Collecting sentencepiece
  Downloading sentencepiece-0.1.99-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.3/1.3 MB 10.4 MB/s eta 0:00:00
Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.13.1)
Requirement already satisfied: huggingface-hub&lt;1.0,&gt;=0.16.4 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.20.2)
Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.23.5)
Requirement already satisfied: packaging&gt;=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (23.2)
Requirement already satisfied: pyyaml&gt;=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)
Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.6.3)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)
Requirement already satisfied: tokenizers&lt;0.19,&gt;=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.15.0)
Requirement already satisfied: safetensors&gt;=0.3.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.1)
Requirement already satisfied: tqdm&gt;=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.1)
Requirement already satisfied: fsspec&gt;=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.16.4-&gt;transformers) (2023.6.0)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.16.4-&gt;transformers) (4.5.0)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (2.0.7)
Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (2023.11.17)
Installing collected packages: sentencepiece
Successfully installed sentencepiece-0.1.99
Requirement already satisfied: transformers[torch] in /usr/local/lib/python3.10/dist-packages (4.35.2)
Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (3.13.1)
Requirement already satisfied: huggingface-hub&lt;1.0,&gt;=0.16.4 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.20.2)
Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (1.23.5)
Requirement already satisfied: packaging&gt;=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (23.2)
Requirement already satisfied: pyyaml&gt;=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (6.0.1)
Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2023.6.3)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.31.0)
Requirement already satisfied: tokenizers&lt;0.19,&gt;=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.15.0)
Requirement already satisfied: safetensors&gt;=0.3.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.4.1)
Requirement already satisfied: tqdm&gt;=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (4.66.1)
Requirement already satisfied: torch!=1.12.0,&gt;=1.10 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.1.0+cu121)
Collecting accelerate&gt;=0.20.3 (from transformers[torch])
  Downloading accelerate-0.26.1-py3-none-any.whl (270 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 270.9/270.9 kB 8.2 MB/s eta 0:00:00
Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate&gt;=0.20.3-&gt;transformers[torch]) (5.9.5)
Requirement already satisfied: fsspec&gt;=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.16.4-&gt;transformers[torch]) (2023.6.0)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.16.4-&gt;transformers[torch]) (4.5.0)
Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch!=1.12.0,&gt;=1.10-&gt;transformers[torch]) (1.12)
Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch!=1.12.0,&gt;=1.10-&gt;transformers[torch]) (3.2.1)
Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch!=1.12.0,&gt;=1.10-&gt;transformers[torch]) (3.1.3)
Requirement already satisfied: triton==2.1.0 in /usr/local/lib/python3.10/dist-packages (from torch!=1.12.0,&gt;=1.10-&gt;transformers[torch]) (2.1.0)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers[torch]) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers[torch]) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers[torch]) (2.0.7)
Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers[torch]) (2023.11.17)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2-&gt;torch!=1.12.0,&gt;=1.10-&gt;transformers[torch]) (2.1.3)
Requirement already satisfied: mpmath&gt;=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy-&gt;torch!=1.12.0,&gt;=1.10-&gt;transformers[torch]) (1.3.0)
Installing collected packages: accelerate
Successfully installed accelerate-0.26.1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import stuff from fastai</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup Kaggle dataset download locally</span></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable to check whether we're running on kaggle website or not</span></span>
<span id="cb3-7">iskaggle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_KERNEL_RUN_TYPE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kaggle API Key Credentials</span></span>
<span id="cb3-10">creds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Path set up for downloading and extracting data from kaggle</span></span>
<span id="cb3-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-14"></span>
<span id="cb3-15">cred_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'~/.kaggle/kaggle.json'</span>).expanduser()</span>
<span id="cb3-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> cred_path.exists():</span>
<span id="cb3-17">    cred_path.parent.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-18">    cred_path.write_text(creds)</span>
<span id="cb3-19">    cred_path.chmod(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0o600</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="f0e27e38-de0d-4f88-fe4a-d6c3ccfe2944" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download data from Kaggle to path and extract it at path location</span></span>
<span id="cb4-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-patent-phrase-to-phrase-matching'</span>)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> iskaggle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb4-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zipfile,kaggle</span>
<span id="cb4-5">    kaggle.api.competition_download_cli(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(path))</span>
<span id="cb4-6">    zipfile.ZipFile(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>).extractall(path)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if on kaggle</span></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> iskaggle:</span>
<span id="cb4-10">    path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../input/us-patent-phrase-to-phrase-matching'</span>)</span>
<span id="cb4-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q datasets</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading us-patent-phrase-to-phrase-matching.zip to /content
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 682k/682k [00:00&lt;00:00, 78.5MB/s]</code></pre>
</div>
</div>
<p><strong>Document</strong> - A file containing some text</p>
<p><strong>Large Documents</strong> - One text file per document, often organized into one folder per category</p>
<p><strong>Smaller Documents</strong> - One document per row in a CSV File</p>
<div class="cell" data-outputid="13be1885-b16d-4deb-a832-b61cc17d0c6d" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check data files</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls {path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sample_submission.csv  test.csv  train.csv</code></pre>
</div>
</div>
</section>
<section id="exploratory-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-data-analysis">Exploratory Data Analysis</h2>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up data path</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training data path</span></span>
<span id="cb9-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train.csv'</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># testing data path</span></span>
<span id="cb9-7">eval_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.csv'</span>)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample submission data path</span></span>
<span id="cb9-10">submit_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample_submission.csv'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="a16b83b0-e083-47f4-f40a-476dee6f4bf6" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test Data Length</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>36473</code></pre>
</div>
</div>
<div class="cell" data-outputid="68beffb1-8741-4a85-aecc-f812792943b5" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training Data Info</span></span>
<span id="cb12-2">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

  <div id="df-885a881f-20d6-4565-ae00-9b435c34e7ad" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
<th data-quarto-table-cell-role="th">score</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>37d61fd2272659b1</td>
<td>abatement</td>
<td>abatement of pollution</td>
<td>A47</td>
<td>0.50</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>7b9652b17b68b7a4</td>
<td>abatement</td>
<td>act of abating</td>
<td>A47</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>36d72442aefd8232</td>
<td>abatement</td>
<td>active catalyst</td>
<td>A47</td>
<td>0.25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>5296b0c19e1ce60e</td>
<td>abatement</td>
<td>eliminating process</td>
<td>A47</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>54c1e3b9184cb5b6</td>
<td>abatement</td>
<td>forest region</td>
<td>A47</td>
<td>0.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36468</td>
<td>8e1386cbefd7f245</td>
<td>wood article</td>
<td>wooden article</td>
<td>B44</td>
<td>1.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">36469</td>
<td>42d9e032d1cd3242</td>
<td>wood article</td>
<td>wooden box</td>
<td>B44</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36470</td>
<td>208654ccb9e14fa3</td>
<td>wood article</td>
<td>wooden handle</td>
<td>B44</td>
<td>0.50</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">36471</td>
<td>756ec035e694722b</td>
<td>wood article</td>
<td>wooden material</td>
<td>B44</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36472</td>
<td>8d135da0b55b8c88</td>
<td>wood article</td>
<td>wooden substrate</td>
<td>B44</td>
<td>0.50</td>
</tr>
</tbody>
</table>


<p>36473 rows × 5 columns</p>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-885a881f-20d6-4565-ae00-9b435c34e7ad')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-885a881f-20d6-4565-ae00-9b435c34e7ad button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-885a881f-20d6-4565-ae00-9b435c34e7ad');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-6c4894b4-ebcd-4ca9-b7e5-c1cf3e98f510">
  <button class="colab-df-quickchart" onclick="quickchart('df-6c4894b4-ebcd-4ca9-b7e5-c1cf3e98f510')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-6c4894b4-ebcd-4ca9-b7e5-c1cf3e98f510 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

  <div id="id_1dc893a5-4b38-4d07-b661-53b0ffa00d35">
    <style>
      .colab-df-generate {
        background-color: #E8F0FE;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: none;
        fill: #1967D2;
        height: 32px;
        padding: 0 0 0 0;
        width: 32px;
      }

      .colab-df-generate:hover {
        background-color: #E2EBFA;
        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
        fill: #174EA6;
      }

      [theme=dark] .colab-df-generate {
        background-color: #3B4455;
        fill: #D2E3FC;
      }

      [theme=dark] .colab-df-generate:hover {
        background-color: #434B5C;
        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
        fill: #FFFFFF;
      }
    </style>
    <button class="colab-df-generate" onclick="generateWithVariable('df')" title="Generate code using this dataframe." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z"></path>
  </svg>
    </button>
    <script>
      (() => {
      const buttonEl =
        document.querySelector('#id_1dc893a5-4b38-4d07-b661-53b0ffa00d35 button.colab-df-generate');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      buttonEl.onclick = () => {
        google.colab.notebook.generateWithVariable('df');
      }
      })();
    </script>
  </div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="cc13ccf5-b026-49ba-ba59-13bfd9c1506b" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training Data Summary</span></span>
<span id="cb13-2">df.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

  <div id="df-e1d180d0-bbf3-4f17-bd88-34c98a102f6d" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>36473</td>
<td>36473</td>
<td>36473</td>
<td>36473</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">unique</td>
<td>36473</td>
<td>733</td>
<td>29340</td>
<td>106</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">top</td>
<td>37d61fd2272659b1</td>
<td>component composite coating</td>
<td>composition</td>
<td>H01</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">freq</td>
<td>1</td>
<td>152</td>
<td>24</td>
<td>2186</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-e1d180d0-bbf3-4f17-bd88-34c98a102f6d')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-e1d180d0-bbf3-4f17-bd88-34c98a102f6d button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-e1d180d0-bbf3-4f17-bd88-34c98a102f6d');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-25a3dcdf-ac16-4d76-8e11-74e4f81eb25f">
  <button class="colab-df-quickchart" onclick="quickchart('df-25a3dcdf-ac16-4d76-8e11-74e4f81eb25f')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-25a3dcdf-ac16-4d76-8e11-74e4f81eb25f button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="969011e8-eea6-4742-dacf-2efcab117fc3" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test Data Length</span></span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(eval_df)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>36</code></pre>
</div>
</div>
<div class="cell" data-outputid="ab70e9dd-ab22-400f-c338-72b09b35dda6" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test Data Info</span></span>
<span id="cb16-2">eval_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

  <div id="df-ead07b9d-6989-48d3-8c6d-aaaaf68faabd" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>4112d61851461f60</td>
<td>opc drum</td>
<td>inorganic photoconductor drum</td>
<td>G02</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>09e418c93a776564</td>
<td>adjust gas flow</td>
<td>altering gas flow</td>
<td>F23</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>36baf228038e314b</td>
<td>lower trunnion</td>
<td>lower locating</td>
<td>B60</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1f37ead645e7f0c8</td>
<td>cap component</td>
<td>upper portion</td>
<td>D06</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>71a5b6ad068d531f</td>
<td>neural stimulation</td>
<td>artificial neural network</td>
<td>H04</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-ead07b9d-6989-48d3-8c6d-aaaaf68faabd')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-ead07b9d-6989-48d3-8c6d-aaaaf68faabd button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-ead07b9d-6989-48d3-8c6d-aaaaf68faabd');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-f5127246-8fd6-4d42-82c9-04de7ea77db5">
  <button class="colab-df-quickchart" onclick="quickchart('df-f5127246-8fd6-4d42-82c9-04de7ea77db5')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-f5127246-8fd6-4d42-82c9-04de7ea77db5 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="f41a67f6-8fc5-4d1f-c649-c6196dc5d6f6" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test Data Summary</span></span>
<span id="cb17-2">eval_df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

  <div id="df-8d669075-fd8b-4d79-868b-0a8c5f111119" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>36</td>
<td>36</td>
<td>36</td>
<td>36</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">unique</td>
<td>36</td>
<td>34</td>
<td>36</td>
<td>29</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">top</td>
<td>4112d61851461f60</td>
<td>el display</td>
<td>inorganic photoconductor drum</td>
<td>G02</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">freq</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>3</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-8d669075-fd8b-4d79-868b-0a8c5f111119')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-8d669075-fd8b-4d79-868b-0a8c5f111119 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-8d669075-fd8b-4d79-868b-0a8c5f111119');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-2a59be3a-ae68-426f-be8c-54d8add62c9a">
  <button class="colab-df-quickchart" onclick="quickchart('df-2a59be3a-ae68-426f-be8c-54d8add62c9a')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-2a59be3a-ae68-426f-be8c-54d8add62c9a button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
</section>
<section id="problem-statement" class="level2">
<h2 class="anchored" data-anchor-id="problem-statement">Problem Statement</h2>
<ul>
<li><p>Compare two words or short phrases and score them based on whether they’re similar or not based on the patent class they were used in.</p></li>
<li><p>A score of 1 is considered that the two inputs have identical meaning</p></li>
<li><p>A score of 0 is considered that the two inputs have totally different meaning</p></li>
<li><p>A score in between ie. 0.5 means they’re somewhat similar but not identical</p></li>
<li><p>Problem Type - NLP Classification Problem -&gt; classify document automatically into some category</p></li>
</ul>
</section>
<section id="data-representation-tokenization-numericalization-data-wrangling" class="level2">
<h2 class="anchored" data-anchor-id="data-representation-tokenization-numericalization-data-wrangling">Data Representation (Tokenization, Numericalization, Data Wrangling)</h2>
<p>Models require numbers as inputs -&gt; need some strategy of mapping words, characters etc to a numerical value</p>
<p><strong>Tokenization</strong>: Split each text up into tokens</p>
<p><strong>Numericalization</strong>: Convert each token to a number</p>
<p><strong>Autokenizer</strong>:function for creating a tokenizer appropriate for the selected NLP model</p>
<p><strong>Vocab</strong>: A special list in the tokenizer which contains a unique integer for every possible token string</p>
<p>The start of a new word is indicated by __</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings,transformers,logging,torch</span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TrainingArguments,Trainer</span>
<span id="cb18-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification,AutoTokenizer</span>
<span id="cb18-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb18-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset, Dataset, DatasetDict</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore hugging face warnings</span></span>
<span id="cb18-9">warnings.simplefilter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb18-10">logging.disable(logging.WARNING)</span></code></pre></div>
</div>
<div class="cell" data-outputid="2356d756-5714-4470-b446-a9bb456fdf71" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenization + Numericalization</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Models require numbers as inputs -&gt; need to convert text to numbers:</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenization - split each text into tokens</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numericalization - convert each word into a number</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - This process depends on the model that is used. AutoTokenizer creates the appropriate tokenizer based on the selected model</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - This is a reasonable model to start nearly NLP problem. Replace small with large for a slower but more accurate model</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># once data exploration and experimentation is completed</span></span>
<span id="cb19-11">model_nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'microsoft/deberta-v3-small'</span></span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenizer</span></span>
<span id="cb19-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification,AutoTokenizer</span>
<span id="cb19-15">tokz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_nm)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test Tokenizer</span></span>
<span id="cb19-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Favorite Line from The Bear: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokz<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tokenize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Every Second Counts'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Uncommon words: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokz<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tokenize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A platypus is an ornithorhynchus anatinus.'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-20"></span>
<span id="cb19-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for tokenizing</span></span>
<span id="cb19-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tok_func(x):</span>
<span id="cb19-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokz(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b426f810d7dd42e3948aab30a92eb265","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7ddbcf40a7e340729818bf8702a11d41","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a88b75bf478c4fb3b6a30cce18b0ef3b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Favorite Line from The Bear: ['▁Every', '▁Second', '▁Counts']
Uncommon words: ['▁A', '▁platypus', '▁is', '▁an', '▁or', 'ni', 'tho', 'rhynch', 'us', '▁an', 'at', 'inus', '.']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine Context + Anchor + Target</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1 - Baseline</span></span>
<span id="cb22-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CONTEXT: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT1: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.target</span>
<span id="cb22-3">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CONTEXT: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT1: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.target</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data to Transformer DataSet Data Structure</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rename score to labels for training data -&gt; Transformers require a label column</span></span>
<span id="cb23-3">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(df).rename_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb23-4">eval_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(eval_df)</span></code></pre></div>
</div>
<div class="cell" data-outputid="4a546c3d-cbea-44b1-8ad0-ba2811fbc943" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize Training Data</span></span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Input Data"</span>)</span>
<span id="cb24-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test tokenizing function</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tok_func(ds[0])</span></span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize all input data in parallel</span></span>
<span id="cb24-9">tok_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tokenized Input Data"</span>)</span>
<span id="cb24-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tok_ds)</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check tokenized data</span></span>
<span id="cb24-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Check Tokenized Input Data"</span>)</span>
<span id="cb24-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tok_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Input Data
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input'],
    num_rows: 36473
})
Tokenized Input Data
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Check Tokenized Input Data
{'id': '37d61fd2272659b1', 'anchor': 'abatement', 'target': 'abatement of pollution', 'context': 'A47', 'label': 0.5, 'input': 'CONTEXT: A47; TEXT1: abatement; TEXT2: abatement of pollution', 'input_ids': [1, 20967, 104917, 294, 336, 5753, 346, 54453, 435, 294, 47284, 346, 54453, 445, 294, 47284, 265, 6435, 2], 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"942b57d994914897951089cf2bd0f5ae","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="9e1f8932-ac76-492b-ed21-1e8de9d9668e" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize Inference Data</span></span>
<span id="cb26-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Inference Data"</span>)</span>
<span id="cb26-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eval_ds)</span>
<span id="cb26-4"></span>
<span id="cb26-5">eval_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tokenized Inference Data"</span>)</span>
<span id="cb26-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eval_ds)</span>
<span id="cb26-9"></span>
<span id="cb26-10"></span>
<span id="cb26-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Check Tokenized Inference Data"</span>)</span>
<span id="cb26-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eval_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Inference Data
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input'],
    num_rows: 36
})
Tokenized Inference Data
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36
})
Check Tokenized Inference Data
{'id': '4112d61851461f60', 'anchor': 'opc drum', 'target': 'inorganic photoconductor drum', 'context': 'G02', 'input': 'CONTEXT: G02; TEXT1: opc drum; TEXT2: inorganic photoconductor drum', 'input_ids': [1, 20967, 104917, 294, 1098, 4159, 346, 54453, 435, 294, 8847, 1207, 8263, 346, 54453, 445, 294, 31553, 1456, 48133, 8263, 2], 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"85c88536b1d7408fa70a5fe3d8fd97c9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="4b559f0d-0409-4524-a79b-8614ed0525b5" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenization Exploration</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Vocab -&gt; specal list in the tokenizer which contains a unique integer for every possible token string</span></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Input IDs are generated from the vocab list</span></span>
<span id="cb28-5">row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb28-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Input: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Input IDs: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Token for the word "of"</span></span>
<span id="cb28-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Token for the word of: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokz<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>vocab[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'▁of'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Input: CONTEXT: A47; TEXT1: abatement; TEXT2: abatement of pollution, Input IDs: [1, 20967, 104917, 294, 336, 5753, 346, 54453, 435, 294, 47284, 346, 54453, 445, 294, 47284, 265, 6435, 2]
Token for the word of: 265</code></pre>
</div>
</div>
</section>
<section id="datasets-training-validation-testinginference" class="level2">
<h2 class="anchored" data-anchor-id="datasets-training-validation-testinginference">Datasets Training, Validation, Testing(Inference)</h2>
<section id="training-dataset" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset">Training Dataset</h3>
<p>A set of data that the model uses to learn the weights needed to create a function that best approximates the data.</p>
</section>
<section id="validation-dataset" class="level3">
<h3 class="anchored" data-anchor-id="validation-dataset">Validation Dataset</h3>
<ul>
<li>A dataset that is used to determine whether the model is under-fitting, overfitting or fitting the data (to some threshold degree). - This dataset is withheld from training and the model never sees it. The validation set is only used for evaluating the model during training and never used as inputs to train the model</li>
<li>Creating validation datasets is an active area of research and engineering. See this post by Dr.&nbsp;Rachel Thomas on validation datasets - <a href="https://www.fast.ai/posts/2017-11-13-validation-sets.html">How (and why) to create a good validation set</a></li>
<li>Transformers call the validation dataset in the DataSetDict object test</li>
</ul>
</section>
<section id="testinference-set" class="level3">
<h3 class="anchored" data-anchor-id="testinference-set">Test(Inference Set)</h3>
<ul>
<li>A dataset that is withheld from training and reporting metrics. The accuracy of the model on the test set is only checked <code>after</code> completing the entire training process -&gt; trying different models, training methods, data processing, optimizations etc.</li>
<li>Kaggle has a second test set which is a held out dataset used only at the end of competitions to assess predictions (private leaderboard).</li>
</ul>
<div class="cell" data-outputid="a3fa92be-04ea-47bb-b06d-a65d5a92125c" data-execution_count="21">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validation Set - subset of training dataset which the model doesn't see at all</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - The validation set is used to check if model is underfit, overfit or just right</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - The validation set is nost used as input to the training model</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Transformers use DatasetDict to store both the training and validation dataset</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - fastai automatically creates the validation set for you if you don't have one and reports the metrics</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (accuracy of model) using the validation set</span></span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 25% validation set, 75% training set using hugging face transformer</span></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test refers to the validation set</span></span>
<span id="cb30-10">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_ds.train_test_split(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Check Training-Validation Split"</span>)</span>
<span id="cb30-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Check Training-Validation Split
DatasetDict({
    train: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 27354
    })
    test: Dataset({
        features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'input_ids', 'token_type_ids', 'attention_mask'],
        num_rows: 9119
    })
})</code></pre>
</div>
</div>
</section>
</section>
<section id="metrics" class="level2">
<h2 class="anchored" data-anchor-id="metrics">Metrics</h2>
<ul>
<li><p>Measurements that help evaluate how good the model is</p></li>
<li><p>Kaggle tells users the metric and how submissions are evaluated in the problem description. In industry and research problems developing metrics is more complicated. See this post by Dr.&nbsp;Rachel Thomas on metrics - <a href="https://www.fast.ai/posts/2019-09-24-metrics.html">The problem with metrics is a big problem for AI</a></p></li>
<li><p>In this challenge, Kaggle has stated that submissions are evaluated based on the <em>Pearson Correlation Coefficient between the predicted and actual similarity scores</em>.</p></li>
<li><p>Pearson’s Correlation Coefficient is represented with <strong>r</strong> and is one of the most widely used measures of the degree of relationship between two variables.</p></li>
<li><p><em>r</em> can vary between <strong>-1</strong> indicating a <strong>perfect inverse correlation</strong> and <em>+1</em> indicating a <strong>perfect positive correlation</strong></p></li>
<li><p><em>r</em> is sensitive to outliers -&gt; outliers will dominate the data in a pearson correlation visualization producing skewed results.</p></li>
</ul>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Metrics - Correlation</span></span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for returning the correlation between two variables</span></span>
<span id="cb32-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> corr(x,y):</span>
<span id="cb32-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.corrcoef(x,y)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Transformers expect metrics to be returned as a dict, since that way the trainer knows what label to use</span></span>
<span id="cb32-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> corr_d(eval_pred):</span>
<span id="cb32-9">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>: corr(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>eval_pred)}</span></code></pre></div>
</div>
</section>
<section id="train-model" class="level2">
<h2 class="anchored" data-anchor-id="train-model">Train Model</h2>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up hyperparameter values</span></span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># learning rate</span></span>
<span id="cb33-4">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8e-5</span></span>
<span id="cb33-5"></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch size</span></span>
<span id="cb33-7">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weight decay</span></span>
<span id="cb33-10">wd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb33-11"></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># epochs</span></span>
<span id="cb33-13">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Transformer uses Trainging Arguments class to set up arguments</span></span>
<span id="cb34-2">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outputs'</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, warmup_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, lr_scheduler_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cosine'</span>, fp16<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb34-3">    evaluation_strategy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>, per_device_train_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, per_device_eval_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb34-4">    num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wd, report_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="582480eb-6615-4d9c-bf49-055e99b8c68b" data-execution_count="25">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create model and Trainer -&gt; trainer is a class combining the data and model together (like learner does in fastai)</span></span>
<span id="cb35-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-3">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Trainer(model, args, train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>], eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>],</span>
<span id="cb35-4">                  tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokz, compute_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>corr_d)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"eccea6f0c70c42d0881878f379e3ba99","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="08bd0921-119e-468b-cf6c-cb3a03f6d582" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the model</span></span>
<span id="cb36-2">trainer.train()</span></code></pre></div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:37, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.025936</td>
<td>0.805831</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.022584</td>
<td>0.824539</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.029200</td>
<td>0.021827</td>
<td>0.834042</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.029200</td>
<td>0.022164</td>
<td>0.834599</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>TrainOutput(global_step=856, training_loss=0.022475789640551417, metrics={'train_runtime': 220.3331, 'train_samples_per_second': 496.594, 'train_steps_per_second': 3.885, 'total_flos': 717218678299260.0, 'train_loss': 0.022475789640551417, 'epoch': 4.0})</code></pre>
</div>
</div>
</section>
<section id="evaluate-model-performance" class="level2">
<h2 class="anchored" data-anchor-id="evaluate-model-performance">Evaluate Model Performance</h2>
<div class="cell" data-outputid="85e0d0ae-75fb-4729-89e8-26f3b425d89a" data-execution_count="27">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate Model on the Inference Data</span></span>
<span id="cb38-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.predict(eval_ds).predictions.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb38-3">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(preds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-4">preds</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>array([[0.44775391],
       [0.66210938],
       [0.57324219],
       [0.37231445],
       [0.        ],
       [0.45141602],
       [0.54296875],
       [0.        ],
       [0.34619141],
       [1.        ],
       [0.24865723],
       [0.25146484],
       [0.77832031],
       [0.81738281],
       [0.76855469],
       [0.42260742],
       [0.31494141],
       [0.        ],
       [0.65087891],
       [0.32666016],
       [0.46362305],
       [0.22399902],
       [0.0925293 ],
       [0.22180176],
       [0.63330078],
       [0.        ],
       [0.        ],
       [0.        ],
       [0.        ],
       [0.56982422],
       [0.40283203],
       [0.07336426],
       [0.72900391],
       [0.484375  ],
       [0.42163086],
       [0.18859863]])</code></pre>
</div>
</div>
</section>
<section id="improving-iterating-on-the-model-for-kaggle-and-beyond" class="level2">
<h2 class="anchored" data-anchor-id="improving-iterating-on-the-model-for-kaggle-and-beyond">Improving + Iterating on the Model for Kaggle and Beyond</h2>
<p>In the previous code, I mostly followed a standard template for how to get a model running and producing values for a kaggle competition.</p>
<p>This section is based on Jeremy’s advice and experience for understanding how one might go about refining and finetune a model using transfer learning to win a kaggle competition. My goal was to try and beat the original base line evaluation I had in the previous section but I didn’t do enough experiments to develop a model that could match or produce a better result than my first attempt. In this section, I was more interested in getting a feel for the iteration and engineering workflow process of developing a model for a kaggle contest/data science challenge so I might revisit this post in the future to see if I can produce a better result once I gain more experience iterating and building models.</p>
<section id="problem-statement-1" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement-1">Problem Statement</h3>
<ul>
<li><p>Compare two words or short phrases and score them based on whether they’re similar or not based on the patent class they were used in.</p></li>
<li><p>A score of 1 is considered that the two inputs have identical meaning</p></li>
<li><p>A score of 0 is considered that the two inputs have totally different meaning</p></li>
<li><p>A score in between ie. 0.5 means they’re somewhat similar but not identical</p></li>
<li><p>Problem Type - NLP Classification Problem -&gt; classify document automatically into some category</p></li>
</ul>
</section>
<section id="data-exploration-data-meaning-representation" class="level3">
<h3 class="anchored" data-anchor-id="data-exploration-data-meaning-representation">Data Exploration: Data Meaning + Representation</h3>
<p><code>anchor</code> - first phrase</p>
<p><code>target</code> - second phrase</p>
<p><code>context</code> - cpc classification which indicates the subject within which the similarity is to be scored</p>
<p><code>score</code> - the similarity. A combination of one or more manual expert ratings</p>
</section>
</section>
<section id="exploratory-data-analysis-1" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-data-analysis-1">Exploratory Data Analysis</h2>
<div class="cell" data-outputid="b1b9a17a-4e7e-4d2f-c40d-22ae394175b6" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distribution of values of Target</span></span>
<span id="cb40-2">df.target.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>composition                    24
data                           22
metal                          22
motor                          22
assembly                       21
                               ..
switching switch over valve     1
switching switch off valve      1
switching over valve            1
switching off valve             1
wooden substrate                1
Name: target, Length: 29340, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-outputid="8cd6f6dd-c9ed-4773-c6cd-0f7ca5690ac5" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distribution of values of Anchor</span></span>
<span id="cb42-2">df.anchor.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>component composite coating              152
sheet supply roller                      150
source voltage                           140
perfluoroalkyl group                     136
el display                               135
                                        ... 
plug nozzle                                2
shannon                                    2
dry coating composition1                   2
peripheral nervous system stimulation      1
conduct conducting material                1
Name: anchor, Length: 733, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-outputid="2408c8ae-64e4-43a5-ce15-3190b9ef91f2" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distribution of values of Context</span></span>
<span id="cb44-2">df.context.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>H01    2186
H04    2177
G01    1812
A61    1477
F16    1091
       ... 
B03      47
F17      33
B31      24
A62      23
F26      18
Name: context, Length: 106, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-outputid="c6a2f22a-7328-49aa-a99e-af840c766ba9" data-execution_count="33">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distribution of values of Section</span></span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Patent Section - first character of context is the section the patent was filed under</span></span>
<span id="cb46-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'section'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.context.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb46-4">df.section.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>B    8019
H    6195
G    6013
C    5288
A    4094
F    4054
E    1531
D    1279
Name: section, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-outputid="36952ec0-f676-403c-a1ab-e2ecdc69c4fc" data-execution_count="34">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'section'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_df.context.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb48-2">eval_df.section.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>B    8
G    7
F    6
H    5
C    4
A    3
E    2
D    1
Name: section, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-outputid="4892f7b8-c3ec-4e84-b272-d50624524e4b" data-execution_count="35">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distribution of values of Score</span></span>
<span id="cb50-2">df.score.hist()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-33-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="8f733328-fc2b-4b44-a6e2-dca56cfbb624" data-execution_count="36">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Items that were identical</span></span>
<span id="cb52-2">df[df.score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">

  <div id="df-2641b8e9-99a9-40db-83a1-0aa224d73cc5" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">anchor</th>
<th data-quarto-table-cell-role="th">target</th>
<th data-quarto-table-cell-role="th">context</th>
<th data-quarto-table-cell-role="th">score</th>
<th data-quarto-table-cell-role="th">input</th>
<th data-quarto-table-cell-role="th">section</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>473137168ebf7484</td>
<td>abatement</td>
<td>abating</td>
<td>F24</td>
<td>1.0</td>
<td>CONTEXT: F24; TEXT1: abatement; TEXT2: abating</td>
<td>F</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">158</td>
<td>621b048d70aa8867</td>
<td>absorbent properties</td>
<td>absorbent characteristics</td>
<td>D01</td>
<td>1.0</td>
<td>CONTEXT: D01; TEXT1: absorbent properties; TEXT2: absorbent characteristics</td>
<td>D</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">161</td>
<td>bc20a1c961cb073a</td>
<td>absorbent properties</td>
<td>absorption properties</td>
<td>D01</td>
<td>1.0</td>
<td>CONTEXT: D01; TEXT1: absorbent properties; TEXT2: absorption properties</td>
<td>D</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">311</td>
<td>e955700dffd68624</td>
<td>acid absorption</td>
<td>absorption of acid</td>
<td>B08</td>
<td>1.0</td>
<td>CONTEXT: B08; TEXT1: acid absorption; TEXT2: absorption of acid</td>
<td>B</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">315</td>
<td>3a09aba546aac675</td>
<td>acid absorption</td>
<td>acid absorption</td>
<td>B08</td>
<td>1.0</td>
<td>CONTEXT: B08; TEXT1: acid absorption; TEXT2: acid absorption</td>
<td>B</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36398</td>
<td>913141526432f1d6</td>
<td>wiring trough</td>
<td>wiring troughs</td>
<td>F16</td>
<td>1.0</td>
<td>CONTEXT: F16; TEXT1: wiring trough; TEXT2: wiring troughs</td>
<td>F</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">36435</td>
<td>ee0746f2a8ecef97</td>
<td>wood article</td>
<td>wood articles</td>
<td>B05</td>
<td>1.0</td>
<td>CONTEXT: B05; TEXT1: wood article; TEXT2: wood articles</td>
<td>B</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36440</td>
<td>ecaf479135cf0dfd</td>
<td>wood article</td>
<td>wooden article</td>
<td>B05</td>
<td>1.0</td>
<td>CONTEXT: B05; TEXT1: wood article; TEXT2: wooden article</td>
<td>B</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">36464</td>
<td>8ceaa2b5c2d56250</td>
<td>wood article</td>
<td>wood article</td>
<td>B44</td>
<td>1.0</td>
<td>CONTEXT: B44; TEXT1: wood article; TEXT2: wood article</td>
<td>B</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36468</td>
<td>8e1386cbefd7f245</td>
<td>wood article</td>
<td>wooden article</td>
<td>B44</td>
<td>1.0</td>
<td>CONTEXT: B44; TEXT1: wood article; TEXT2: wooden article</td>
<td>B</td>
</tr>
</tbody>
</table>


<p>1154 rows × 7 columns</p>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-2641b8e9-99a9-40db-83a1-0aa224d73cc5')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-2641b8e9-99a9-40db-83a1-0aa224d73cc5 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-2641b8e9-99a9-40db-83a1-0aa224d73cc5');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-a6c194f5-037b-4730-a131-b01b1a827c84">
  <button class="colab-df-quickchart" onclick="quickchart('df-a6c194f5-037b-4730-a131-b01b1a827c84')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-a6c194f5-037b-4730-a131-b01b1a827c84 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
</section>
<section id="training-model---setup" class="level2">
<h2 class="anchored" data-anchor-id="training-model---setup">Training Model - Setup</h2>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constants for Training</span></span>
<span id="cb53-2"></span>
<span id="cb53-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model</span></span>
<span id="cb53-4">model_nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'microsoft/deberta-v3-small'</span></span>
<span id="cb53-5"></span>
<span id="cb53-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tokenizer</span></span>
<span id="cb53-7">tokz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_nm)</span>
<span id="cb53-8"></span>
<span id="cb53-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># learning rate</span></span>
<span id="cb53-10">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8e-5</span></span>
<span id="cb53-11"></span>
<span id="cb53-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch size</span></span>
<span id="cb53-13">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb53-14"></span>
<span id="cb53-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weight decay</span></span>
<span id="cb53-16">wd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb53-17"></span>
<span id="cb53-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># epochs</span></span>
<span id="cb53-19">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function that determines the split for validation and training data</span></span>
<span id="cb54-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set a default validation dataset split percentage as 25%</span></span>
<span id="cb54-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set a default training dataset split percentage as 75%</span></span>
<span id="cb54-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_dataSplit(vp):</span>
<span id="cb54-5">  anchors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.anchor.unique()</span>
<span id="cb54-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unique Anchors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(anchors)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-7">  np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb54-8">  np.random.shuffle(anchors)</span>
<span id="cb54-9"></span>
<span id="cb54-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify how much validation set we want</span></span>
<span id="cb54-11">  val_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vp</span>
<span id="cb54-12">  val_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(anchors)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>val_prop)</span>
<span id="cb54-13">  val_anchors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anchors[:val_sz]</span>
<span id="cb54-14"></span>
<span id="cb54-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find which rows match the valid anchors and get their indices</span></span>
<span id="cb54-16">  is_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.isin(df.anchor, val_anchors)</span>
<span id="cb54-17">  idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df))</span>
<span id="cb54-18"></span>
<span id="cb54-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validation Data</span></span>
<span id="cb54-20">  val_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idxs[ is_val]</span>
<span id="cb54-21">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation Dataset Length: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_idxs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training Data</span></span>
<span id="cb54-23">  trn_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idxs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>is_val]</span>
<span id="cb54-24">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Training Dataset Length: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trn_idxs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-25"></span>
<span id="cb54-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (val_idxs, trn_idxs)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to tokenize training data</span></span>
<span id="cb55-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_dds(df, vp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>):</span>
<span id="cb55-3">  ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(df).rename_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb55-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Input Dataset"</span>)</span>
<span id="cb55-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds)</span>
<span id="cb55-6">  eval_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dataset.from_pandas(eval_df)</span>
<span id="cb55-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Inference Dataset"</span>)</span>
<span id="cb55-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eval_ds)</span>
<span id="cb55-9">  inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"anchor"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"context"</span></span>
<span id="cb55-10">  tok_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tok_func, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, remove_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>inps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'section'</span>))</span>
<span id="cb55-11">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tokenized Input Dataset"</span>)</span>
<span id="cb55-12">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tok_ds)</span>
<span id="cb55-13">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tokenized Inference Dataset"</span>)</span>
<span id="cb55-14">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eval_ds)</span>
<span id="cb55-15">  val_idxs, trn_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dataSplit(vp)</span>
<span id="cb55-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> DatasetDict({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>:tok_ds.select(trn_idxs), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>: tok_ds.select(val_idxs)})</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to get the model</span></span>
<span id="cb56-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model():</span>
<span id="cb56-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to create a Trainer</span></span>
<span id="cb57-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Trainer -&gt; class which combines the data and model together (similar to Learner in FastAI)</span></span>
<span id="cb57-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_trainer(dds, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb57-4"></span>
<span id="cb57-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize model</span></span>
<span id="cb57-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model()</span>
<span id="cb57-7"></span>
<span id="cb57-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transformers require the TrainingArguments class to set up the arguments for the trainer</span></span>
<span id="cb57-9">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outputs'</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, warmup_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, lr_scheduler_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cosine'</span>, fp16<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb57-10">        evaluation_strategy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>, per_device_train_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, per_device_eval_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb57-11">        num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wd, report_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb57-12"></span>
<span id="cb57-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Trainer(model, args, train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>], eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>],</span>
<span id="cb57-14">                   tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokz, compute_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>corr_d)</span></code></pre></div>
</div>
</section>
<section id="data-representation" class="level2">
<h2 class="anchored" data-anchor-id="data-representation">Data Representation</h2>
<section id="combine-context-anchor-target-experiments" class="level3">
<h3 class="anchored" data-anchor-id="combine-context-anchor-target-experiments">Combine Context + Anchor + Target Experiments</h3>
<section id="method-1---baseline" class="level4">
<h4 class="anchored" data-anchor-id="method-1---baseline">Method 1 - Baseline</h4>
<div class="cell" data-outputid="c635e16a-cb7c-4982-c369-5974047db8ff" data-execution_count="42">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1 - Baseline</span></span>
<span id="cb58-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CONTEXT: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT1: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.target</span>
<span id="cb58-3">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CONTEXT: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT1: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; TEXT2: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.target</span>
<span id="cb58-4"></span>
<span id="cb58-5">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dds(df)</span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create and train model</span></span>
<span id="cb58-8">get_trainer(dds).train()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Input Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'section'],
    num_rows: 36473
})
Original Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Tokenized Input Dataset
Dataset({
    features: ['label', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Tokenized Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Unique Anchors: 733
Validation Dataset Length: 9116
Training Dataset Length: 27357</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"51df049f880b4012ba5346f8b09482cc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:31, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.026578</td>
<td>0.796921</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.023371</td>
<td>0.818602</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.036700</td>
<td>0.024409</td>
<td>0.820100</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.036700</td>
<td>0.023927</td>
<td>0.819576</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>TrainOutput(global_step=856, training_loss=0.02694343183642236, metrics={'train_runtime': 211.2936, 'train_samples_per_second': 517.895, 'train_steps_per_second': 4.051, 'total_flos': 723683047099410.0, 'train_loss': 0.02694343183642236, 'epoch': 4.0})</code></pre>
</div>
</div>
</section>
<section id="method-2---separate-token" class="level4">
<h4 class="anchored" data-anchor-id="method-2---separate-token">Method 2 - Separate Token</h4>
<div class="cell" data-outputid="1b35044e-013a-4a92-df6a-df1da90910c9" data-execution_count="43">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2 - Separate Token</span></span>
<span id="cb61-2">sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokz.sep_token</span>
<span id="cb61-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Separate Token: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.target</span>
<span id="cb61-5">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.target</span>
<span id="cb61-6"></span>
<span id="cb61-7">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dds(df)</span>
<span id="cb61-8"></span>
<span id="cb61-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create and train model</span></span>
<span id="cb61-10">get_trainer(dds).train()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Separate Token: [SEP]
Original Input Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'section'],
    num_rows: 36473
})
Original Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Tokenized Input Dataset
Dataset({
    features: ['label', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Tokenized Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Unique Anchors: 733
Validation Dataset Length: 9116
Training Dataset Length: 27357</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5bd0d53cdd5d4a659bfd20f282cb51e7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:17, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.026330</td>
<td>0.792181</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.025083</td>
<td>0.809545</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.032000</td>
<td>0.024699</td>
<td>0.812255</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.032000</td>
<td>0.024956</td>
<td>0.812318</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>TrainOutput(global_step=856, training_loss=0.024021479013924287, metrics={'train_runtime': 197.9103, 'train_samples_per_second': 552.917, 'train_steps_per_second': 4.325, 'total_flos': 468872298987930.0, 'train_loss': 0.024021479013924287, 'epoch': 4.0})</code></pre>
</div>
</div>
</section>
<section id="method-3---change-token-separator" class="level4">
<h4 class="anchored" data-anchor-id="method-3---change-token-separator">Method 3 - Change Token Separator</h4>
<div class="cell" data-outputid="ace8c4fd-f206-4cf4-e796-4fdb91614f0b" data-execution_count="44">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 3 - change the type of separator</span></span>
<span id="cb64-2">sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" [s] "</span></span>
<span id="cb64-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.target</span>
<span id="cb64-4">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.target</span>
<span id="cb64-5"></span>
<span id="cb64-6">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dds(df)</span>
<span id="cb64-7"></span>
<span id="cb64-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create and train model</span></span>
<span id="cb64-9">get_trainer(dds).train()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Input Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'section'],
    num_rows: 36473
})
Original Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Tokenized Input Dataset
Dataset({
    features: ['label', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Tokenized Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Unique Anchors: 733
Validation Dataset Length: 9116
Training Dataset Length: 27357</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"76e529871d454e8ea6b888f1f206fae9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:20, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.027578</td>
<td>0.789799</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.025510</td>
<td>0.814414</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.031600</td>
<td>0.023443</td>
<td>0.817882</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.031600</td>
<td>0.024294</td>
<td>0.817224</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>TrainOutput(global_step=856, training_loss=0.023982213479336177, metrics={'train_runtime': 200.8784, 'train_samples_per_second': 544.747, 'train_steps_per_second': 4.261, 'total_flos': 582121520370810.0, 'train_loss': 0.023982213479336177, 'epoch': 4.0})</code></pre>
</div>
</div>
</section>
<section id="method-4---method-3-lowercase" class="level4">
<h4 class="anchored" data-anchor-id="method-4---method-3-lowercase">Method 4 - Method 3 + Lowercase</h4>
<div class="cell" data-outputid="5772bda4-461d-4402-c98d-35c352db2573" data-execution_count="45">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 4 - change to all lower case</span></span>
<span id="cb67-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.target</span>
<span id="cb67-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower()</span>
<span id="cb67-4">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.anchor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.target</span>
<span id="cb67-5">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower()</span>
<span id="cb67-6"></span>
<span id="cb67-7">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dds(df)</span>
<span id="cb67-8">get_trainer(dds).train()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Input Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'section'],
    num_rows: 36473
})
Original Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Tokenized Input Dataset
Dataset({
    features: ['label', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Tokenized Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section'],
    num_rows: 36
})
Unique Anchors: 733
Validation Dataset Length: 9116
Training Dataset Length: 27357</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"768fd3072b72421aa39113a199b97416","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:20, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.026599</td>
<td>0.794113</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.024963</td>
<td>0.817053</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.031500</td>
<td>0.023034</td>
<td>0.818722</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.031500</td>
<td>0.024056</td>
<td>0.818191</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>TrainOutput(global_step=856, training_loss=0.02395056954054075, metrics={'train_runtime': 200.6758, 'train_samples_per_second': 545.297, 'train_steps_per_second': 4.266, 'total_flos': 582121520370810.0, 'train_loss': 0.02395056954054075, 'epoch': 4.0})</code></pre>
</div>
</div>
</section>
<section id="method-5---special-tokens" class="level4">
<h4 class="anchored" data-anchor-id="method-5---special-tokens">Method 5 - Special Tokens</h4>
<div class="cell" data-outputid="3eab92c6-b7f3-4fea-edff-96da9a861409" data-execution_count="46">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 5 - Special Tokens</span></span>
<span id="cb70-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sectok'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'['</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.section <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']'</span></span>
<span id="cb70-3">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sectok'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'['</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.section <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']'</span></span>
<span id="cb70-4">sectoks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(df.sectok.unique())</span>
<span id="cb70-5">tokz.add_special_tokens({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'additional_special_tokens'</span>: sectoks})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>8</code></pre>
</div>
</div>
<div class="cell" data-outputid="66014505-4106-46ae-9eea-753cdea54b74" data-execution_count="47">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sectok <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.anchor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df.target</span>
<span id="cb72-2">eval_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_df.sectok <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.anchor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eval_df.target</span>
<span id="cb72-3">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dds(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Input Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'section', 'sectok'],
    num_rows: 36473
})
Original Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section', 'sectok'],
    num_rows: 36
})
Tokenized Input Dataset
Dataset({
    features: ['label', 'sectok', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Tokenized Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section', 'sectok'],
    num_rows: 36
})
Unique Anchors: 733
Validation Dataset Length: 9116
Training Dataset Length: 27357</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"17711cd580f04d69ae0729794f87e18d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="cell" data-outputid="da09a7ec-a2ce-4a91-dbf0-d6491ca4b0d2" data-execution_count="48">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># resize embedding matrix in model</span></span>
<span id="cb74-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model()</span>
<span id="cb74-3">model.resize_token_embeddings(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokz))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>Embedding(128009, 768)</code></pre>
</div>
</div>
<div class="cell" data-outputid="a9bda43d-4819-4703-c691-b6be75c43f24" data-execution_count="49">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train the model</span></span>
<span id="cb76-2">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_trainer(dds, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model)</span>
<span id="cb76-3">trainer.train()</span></code></pre></div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="856" max="856" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [856/856 03:36, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.029230</td>
<td>0.803785</td>
</tr>
<tr class="even">
<td>2</td>
<td>No log</td>
<td>0.024406</td>
<td>0.821807</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.031400</td>
<td>0.023469</td>
<td>0.820734</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.031400</td>
<td>0.024289</td>
<td>0.820907</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>TrainOutput(global_step=856, training_loss=0.023841174406425976, metrics={'train_runtime': 216.2542, 'train_samples_per_second': 506.016, 'train_steps_per_second': 3.958, 'total_flos': 695370741753690.0, 'train_loss': 0.023841174406425976, 'epoch': 4.0})</code></pre>
</div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train on the entire training dataset before doing final tests with inference dataset</span></span>
<span id="cb78-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> final_get_trainer(dds, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb78-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize model</span></span>
<span id="cb78-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: </span>
<span id="cb78-5">        model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model()</span>
<span id="cb78-6"></span>
<span id="cb78-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transformers require the TrainingArguments class to set up the arguments for the trainer</span></span>
<span id="cb78-8">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outputs'</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, warmup_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, lr_scheduler_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cosine'</span>, fp16<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb78-9">        evaluation_strategy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>, per_device_train_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs, per_device_eval_batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb78-10">        num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>wd, report_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb78-11"></span>
<span id="cb78-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Trainer(model, args, train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>], eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>],</span>
<span id="cb78-13">                   tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokz, compute_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>corr_d)</span></code></pre></div>
</div>
<div class="cell" data-outputid="d2d3af33-964d-4aad-8084-c8068c2c359c" data-execution_count="51">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">dds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dds(df, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb79-2">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_get_trainer(dds, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model)</span>
<span id="cb79-3">trainer.train()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original Input Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'label', 'input', 'section', 'sectok'],
    num_rows: 36473
})
Original Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section', 'sectok'],
    num_rows: 36
})
Tokenized Input Dataset
Dataset({
    features: ['label', 'sectok', 'input_ids', 'token_type_ids', 'attention_mask'],
    num_rows: 36473
})
Tokenized Inference Dataset
Dataset({
    features: ['id', 'anchor', 'target', 'context', 'input', 'section', 'sectok'],
    num_rows: 36
})
Unique Anchors: 733
Validation Dataset Length: 347
Training Dataset Length: 36126</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b992bdd997b6494ea887a7ced9699c02","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="1132" max="1132" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [1132/1132 04:43, Epoch 4/4]
    </div>
    
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Pearson</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.021583</td>
<td>0.836893</td>
</tr>
<tr class="even">
<td>2</td>
<td>0.015400</td>
<td>0.019293</td>
<td>0.863323</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.015400</td>
<td>0.018774</td>
<td>0.860989</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.009500</td>
<td>0.018202</td>
<td>0.864261</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>TrainOutput(global_step=1132, training_loss=0.011905024835161943, metrics={'train_runtime': 284.126, 'train_samples_per_second': 508.591, 'train_steps_per_second': 3.984, 'total_flos': 918764683369440.0, 'train_loss': 0.011905024835161943, 'epoch': 4.0})</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="evaluate-performance-of-model-on-inference-data" class="level2">
<h2 class="anchored" data-anchor-id="evaluate-performance-of-model-on-inference-data">Evaluate Performance of Model on Inference Data</h2>
<div class="cell" data-outputid="422f1ebb-5916-4424-a069-6f7fbbff75f2" data-execution_count="52">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test model on the evaluation data</span></span>
<span id="cb82-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.predict(eval_ds).predictions.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb82-3">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(preds, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb82-4">preds</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>array([[0.57763672],
       [0.57177734],
       [0.47412109],
       [0.34521484],
       [0.        ],
       [0.48852539],
       [0.51611328],
       [0.        ],
       [0.3503418 ],
       [0.64208984],
       [0.33959961],
       [0.28930664],
       [0.65234375],
       [0.71289062],
       [0.56591797],
       [0.37866211],
       [0.30786133],
       [0.05584717],
       [0.61181641],
       [0.4050293 ],
       [0.58447266],
       [0.26806641],
       [0.28491211],
       [0.29077148],
       [0.53857422],
       [0.        ],
       [0.        ],
       [0.        ],
       [0.        ],
       [0.59912109],
       [0.35766602],
       [0.07025146],
       [0.68945312],
       [0.48779297],
       [0.41601562],
       [0.29858398]])</code></pre>
</div>
</div>
</section>
<section id="submission-for-kaggle-competition" class="level2">
<h2 class="anchored" data-anchor-id="submission-for-kaggle-competition">Submission for Kaggle Competition</h2>
<div class="cell" data-outputid="6e4b263d-4cfb-4506-e12d-0926669b953c" data-execution_count="53">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Submit for kaggle competition</span></span>
<span id="cb84-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb84-3"></span>
<span id="cb84-4">submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.Dataset.from_dict({</span>
<span id="cb84-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: eval_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>],</span>
<span id="cb84-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>: preds</span>
<span id="cb84-7">})</span>
<span id="cb84-8"></span>
<span id="cb84-9">submission.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'submission.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"282de706e2e54137992e56ebe1f09f7e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>1039</code></pre>
</div>
</div>
</section>
<section id="validation-set-and-modeling-experiments" class="level2">
<h2 class="anchored" data-anchor-id="validation-set-and-modeling-experiments">Validation Set and Modeling Experiments</h2>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to model</span></span>
<span id="cb86-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb86-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb86-4"></span>
<span id="cb86-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function for visualization Data</span></span>
<span id="cb86-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_function(f, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>):</span>
<span id="cb86-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb86-8">    plt.plot(x, f(x), color)</span></code></pre></div>
</div>
<div class="cell" data-outputid="2ab0047a-2e71-4200-ea0d-9d7ff10ce422" data-execution_count="55">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Function we're trying to fit"</span>)</span>
<span id="cb87-2">plot_function(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Function we're trying to fit</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-53-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions for creating noisy data</span></span>
<span id="cb89-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> normal,seed,uniform</span>
<span id="cb89-3">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb89-4"></span>
<span id="cb89-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> noise(x, scale):</span>
<span id="cb89-6">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.shape)</span>
<span id="cb89-7"></span>
<span id="cb89-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_noise(x, mult, add):</span>
<span id="cb89-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>noise(x,mult)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise(x,add)</span></code></pre></div>
</div>
<div class="cell" data-outputid="314a7c1f-284a-4bb0-dd3f-a7edd71e1142" data-execution_count="57">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate Noisy Data</span></span>
<span id="cb90-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb90-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add_noise(f(x), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>)</span>
<span id="cb90-4">plt.scatter(x,y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-55-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function for trying to find polynomial function that fits data</span></span>
<span id="cb91-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb91-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PolynomialFeatures</span>
<span id="cb91-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_pipeline</span>
<span id="cb91-5"></span>
<span id="cb91-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_poly(degree):</span>
<span id="cb91-7">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_pipeline(PolynomialFeatures(degree), LinearRegression())</span>
<span id="cb91-8">    model.fit(x, y)</span>
<span id="cb91-9">    plt.scatter(x,y)</span>
<span id="cb91-10">    plot_function(model.predict)</span></code></pre></div>
</div>
<div class="cell" data-outputid="b5b8c208-b595-412d-e35a-d65dc2773634" data-execution_count="59">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Underfit</span></span>
<span id="cb92-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Polynomial of Degree 1: Underfit"</span>)</span>
<span id="cb92-3">plot_poly(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Polynomial of Degree 1: Underfit</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-57-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="99e50d68-67e5-4f87-a9c5-adc29f83b0d0" data-execution_count="60">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Overfit</span></span>
<span id="cb94-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Polynomial of Degree 10: Overfit"</span>)</span>
<span id="cb94-3">plot_poly(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Polynomial of Degree 10: Overfit</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-58-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="effae8e6-25c6-4b34-c4f9-d4e67c427b38" data-execution_count="61">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Approximation of Close fit</span></span>
<span id="cb96-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Polynmomial of Degree 2: A close approximation of exact fit"</span>)</span>
<span id="cb96-3">plot_poly(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb96-4"></span>
<span id="cb96-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the original true function (one we're trying to fit)</span></span>
<span id="cb96-6">plot_function(f, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Polynmomial of Degree 2: A close approximation of exact fit</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-59-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="metric-experiments-correlation" class="level2">
<h2 class="anchored" data-anchor-id="metric-experiments-correlation">Metric Experiments: Correlation</h2>
<div class="cell" data-outputid="b43de975-7a9c-41ca-f1f2-bdc497867818" data-execution_count="62">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fetch_california_housing</span>
<span id="cb98-2">housing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetch_california_housing(as_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb98-3">housing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> housing[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>].join(housing[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>]).sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)</span>
<span id="cb98-4">housing.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">

  <div id="df-e8f45ec5-e69b-449b-968f-264c250d2d5d" class="colab-df-container">
    <div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">MedInc</th>
<th data-quarto-table-cell-role="th">HouseAge</th>
<th data-quarto-table-cell-role="th">AveRooms</th>
<th data-quarto-table-cell-role="th">AveBedrms</th>
<th data-quarto-table-cell-role="th">Population</th>
<th data-quarto-table-cell-role="th">AveOccup</th>
<th data-quarto-table-cell-role="th">Latitude</th>
<th data-quarto-table-cell-role="th">Longitude</th>
<th data-quarto-table-cell-role="th">MedHouseVal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">7506</td>
<td>3.0550</td>
<td>37.0</td>
<td>5.152778</td>
<td>1.048611</td>
<td>729.0</td>
<td>5.062500</td>
<td>33.92</td>
<td>-118.28</td>
<td>1.054</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4720</td>
<td>3.0862</td>
<td>35.0</td>
<td>4.697897</td>
<td>1.055449</td>
<td>1159.0</td>
<td>2.216061</td>
<td>34.05</td>
<td>-118.37</td>
<td>3.453</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12888</td>
<td>2.5556</td>
<td>24.0</td>
<td>4.864905</td>
<td>1.129222</td>
<td>1631.0</td>
<td>2.395007</td>
<td>38.66</td>
<td>-121.35</td>
<td>1.057</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13344</td>
<td>3.0057</td>
<td>32.0</td>
<td>4.212687</td>
<td>0.936567</td>
<td>1378.0</td>
<td>5.141791</td>
<td>34.05</td>
<td>-117.64</td>
<td>0.969</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7173</td>
<td>1.9083</td>
<td>42.0</td>
<td>3.888554</td>
<td>1.039157</td>
<td>1535.0</td>
<td>4.623494</td>
<td>34.05</td>
<td>-118.19</td>
<td>1.192</td>
</tr>
</tbody>
</table>


</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-e8f45ec5-e69b-449b-968f-264c250d2d5d')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-e8f45ec5-e69b-449b-968f-264c250d2d5d button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-e8f45ec5-e69b-449b-968f-264c250d2d5d');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-aca57563-2444-4c47-9033-571361e970ca">
  <button class="colab-df-quickchart" onclick="quickchart('df-aca57563-2444-4c47-9033-571361e970ca')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-aca57563-2444-4c47-9033-571361e970ca button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="8aeae4bb-4de3-495b-dcd0-6d9ce80e4cd9" data-execution_count="63">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correlation coefficients for every combination of columns</span></span>
<span id="cb99-2">np.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb99-3">np.corrcoef(housing, rowvar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>array([[ 1.  , -0.12,  0.43, -0.08,  0.01, -0.07, -0.12,  0.04,  0.68],
       [-0.12,  1.  , -0.17, -0.06, -0.31,  0.  ,  0.03, -0.13,  0.12],
       [ 0.43, -0.17,  1.  ,  0.76, -0.09, -0.07,  0.12, -0.03,  0.21],
       [-0.08, -0.06,  0.76,  1.  , -0.08, -0.07,  0.09,  0.  , -0.04],
       [ 0.01, -0.31, -0.09, -0.08,  1.  ,  0.16, -0.15,  0.13,  0.  ],
       [-0.07,  0.  , -0.07, -0.07,  0.16,  1.  , -0.16,  0.17, -0.27],
       [-0.12,  0.03,  0.12,  0.09, -0.15, -0.16,  1.  , -0.93, -0.16],
       [ 0.04, -0.13, -0.03,  0.  ,  0.13,  0.17, -0.93,  1.  , -0.03],
       [ 0.68,  0.12,  0.21, -0.04,  0.  , -0.27, -0.16, -0.03,  1.  ]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="1ed7ae95-4787-4d41-f7d3-8ca83fa2c507" data-execution_count="64">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correlation for two variables</span></span>
<span id="cb101-2">np.corrcoef(housing.MedInc, housing.MedHouseVal)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>array([[1.  , 0.68],
       [0.68, 1.  ]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for returning single coefficient correlation</span></span>
<span id="cb103-2"></span>
<span id="cb103-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> corr(x,y):</span>
<span id="cb103-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.corrcoef(x,y)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb103-5"></span>
<span id="cb103-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test function</span></span>
<span id="cb103-7">corr(housing.MedInc, housing.MedHouseVal)</span>
<span id="cb103-8"></span>
<span id="cb103-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for visualizing correlation between two variables</span></span>
<span id="cb103-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_corr(df, a, b):</span>
<span id="cb103-11">    x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[a],df[b]</span>
<span id="cb103-12">    plt.scatter(x,y, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb103-13">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> vs </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; r: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr(x, y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="ab3182bb-2f42-491b-c391-d691fd83036b" data-execution_count="66">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1">show_corr(housing, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedInc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedHouseVal'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-64-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ede6cde5-68e5-4f66-cf39-71250cbb121e" data-execution_count="67">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">show_corr(housing, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedInc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AveRooms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-65-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="5263bb58-c0d2-4e27-d23d-8502d7ef8174" data-execution_count="68">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> housing[housing.AveRooms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb106-2">show_corr(subset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MedInc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AveRooms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4_files/figure-html/cell-66-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://course.fast.ai/Lessons/lesson4.html">FastAI Lesson 4</a></li>
<li><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/10_nlp.ipynb">FastAI Chapter 10</a></li>
<li><a href="https://www.kaggle.com/competitions/us-patent-phrase-to-phrase-matching/">US Patent Phrase to Phrase Matching</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/getting-started-with-nlp-for-absolute-beginners">Getting Started with NLP for Absolute Beginners</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/iterate-like-a-grandmaster/">Iterate Like a Grandmaster</a></li>
<li><a href="https://www.fast.ai/posts/2017-11-13-validation-sets.html">How (and why) to create a good validation dataset</a></li>
<li><a href="https://www.fast.ai/posts/2019-09-24-metrics.html">The problem with metrics is a big problem for AI</a></li>
<li><a href="https://utah-intro-nlp.github.io/#calendar">Utah CS 5340/6340 - Natural Language Processing</a></li>
<li><a href="https://huggingface.co/docs/transformers/index">Hugging Face Transformers docs</a></li>
<li><a href="https://docs.fast.ai/">fast.ai docs</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson4/fastai-lesson4.html</guid>
  <pubDate>Tue, 09 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 3: Neural Network Foundations</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3.html</link>
  <description><![CDATA[ 




<section id="announcements" class="level2">
<h2 class="anchored" data-anchor-id="announcements">Announcements</h2>
<p>Finally back after a long hiatus. I took a break from posting and FASTAI to try Advent of Code and get back to interview prep but I’m back. Normally I only write a single summary for a blog post but this time I’m writing two summaries because Chapter 4 of the book goes deeper into the foundations of neural networks than the lesson video.</p>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>All of this code was written by Jeremy Howard and the authors of the FastAI book. My modification to their code was adding print statements and comments to understand what each line of code was doing.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<section id="summary-fastai-lesson-3-video" class="level3">
<h3 class="anchored" data-anchor-id="summary-fastai-lesson-3-video">Summary: FastAI Lesson 3 Video</h3>
<p>In this lesson, Jeremy gives a high level overview of pytorch, gradient descent and the evolution of models. Most of the video focuses on approximating a quadratic equation and building the intuition towards how a neural network works. Towards the end of the video, Jeremy introduces the Titanic dataset and how to do some basic modeling with excel.</p>
</section>
<section id="summary-fastai-chapter-4" class="level3">
<h3 class="anchored" data-anchor-id="summary-fastai-chapter-4">Summary: FastAI Chapter 4</h3>
<p>The MNIST dataset was used as the case study to understand how pytorch and the fastai library work under the hood. I found this chapter to be a mind bender because I struggled to wrap my head around the concept of a tensor and tensor operations. I struggled with the meaning of rank and dimension of tensors because they do not have the same meaning as rank and dimension from linear algebra and calculus. By the end of this chapter, I understood the following concepts:</p>
<ul>
<li>what a tensor represents and performing operations on a tensor</li>
<li>how to set up a classifier using pytorch</li>
<li>how a training loop, optimizer, batch work in pytorch and fastai</li>
<li>the operations and functions that fastai provides a wrapper on top of</li>
</ul>
<p>I do agree with Jeremy that this book chapter might scare people away because of the technical and mathematical jargon. It’s definitely worth spending a few days to go over because it makes it much easier to understand how things work in the subsequent lessons.</p>
</section>
</section>
<section id="jeremy-howards-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremy-howards-advice">Jeremy Howard’s Advice</h2>
<p>Jeremy provides some really good insights and advice in the lecture video not captured in the book or kaggle notebooks. This is my summary of the advice:</p>
<ul>
<li><p>Model: Mathematical function consisting of a Matrix Multiply operation + nonlinearity (RELU, Sigmoid etc)</p></li>
<li><p>Things to thing about when picking a class of model for a problem we’re trying to solve:</p>
<ol type="1">
<li>How fast is the model</li>
<li>How much memory does it consume</li>
<li>How accurate is it</li>
</ol></li>
<li><p>Models fit functions to data and try to recognize patterns in data that we give it</p></li>
</ul>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p><strong>Activations(Neural Network)</strong> - Numbers that are calculated (both by linear and non-linear layers)</p>
<p><strong>Parameters(Neural Network)</strong> - Numbers that are randomly initialized, and optimized (that is, the numbers that define the model)</p>
<p><strong>Axis(Numpy), Dimensions(PyTorch Tensors)</strong> - For a matrix, the rows and columns define the axis</p>
<p><strong>Tensor Rank</strong> - The number of dimensions in a tensor</p>
<p><strong>Rank Zero Tensor</strong> - Scalar</p>
<p><strong>Rank One Tensor</strong> - Vector</p>
<p><strong>Rank Two Tensor</strong> - Matrix</p>
<p><strong>Nonlinearity (Activation Function)</strong> - one type of layer in a neural network. Typically a neural network alternates between a linear layer and non-linear layer. Occasionally people refer to a single layer = linear layer + nonlinearity</p>
<p><strong>Relu</strong> - Function that returns 0 for negative numbers and doesn’t change positive numbers</p>
<p><strong>Mini-Batch</strong> - A small group of inputs and labels gathered together in two arrays. A gradient desccent step is updated on this batch rather than a whole epoch</p>
<p><strong>Forward Pass</strong> - Applying the model to some input and computing the predictions</p>
<p><strong>Loss</strong> - A value that represents how well (or bad) the model is doing <strong>Gradient</strong> - The derivative(slope) of the loss with respect to some parameter of the model</p>
<p><strong>Backward Pass</strong> - Computing the gradients of the loss with respect to all model parameters</p>
<p><strong>Gradient Descent</strong> - Taking a step in the directions opposite to the gradients to make the model parameters a little bit better</p>
<p><strong>Learning Rate</strong> - The size of the step we take when applying SGD to update the parameters of the model. Usually a very tiny model</p>
</section>
<section id="mnist-dataset" class="level2">
<h2 class="anchored" data-anchor-id="mnist-dataset">MNIST Dataset</h2>
<p><a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST</a> is a dataset containing handwritten digits collected by NIST (National Institute of Standards and Technology) and turned into dataset by Yann Lecun and his colleagues. More information about the dataset can be found in <a href="https://nbviewer.org/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb">Chapter 4</a> and <a href="https://www.kaggle.com/datasets/hojjatk/mnist-dataset">MNIST Kaggle Competition</a>.</p>
<p>The MNIST dataset follows traditional machine learning dataset layouts: Training Data and Validation Data each containing images associated with a particular digit between 0-9.</p>
</section>
<section id="load-data-and-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-data-and-libraries">Load Data and Libraries</h2>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load libraries and imports</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai duckduckgo_search</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import fastai libraries</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update grayscale colormap for matplotlib</span></span>
<span id="cb1-14">matplotlib.rc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="7205a8ed-25fb-463b-f784-18310196dd89" data-execution_count="69">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LOAD MNIST DATA</span></span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.MNIST_SAMPLE)</span>
<span id="cb2-3">Path.BASE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Contents of MNIST DATA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ls()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Training Data</span></span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MNIST Training Data Directory Contents: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ls()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Training Data for 3s and 7s in sorted order</span></span>
<span id="cb2-10">threes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb2-11">sevens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Sorted Training Data for 3: {threes}")</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training Data Example</span></span>
<span id="cb2-15">im3_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-16">im3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(im3_path)</span>
<span id="cb2-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Image of 3 from 3 training data set"</span>)</span>
<span id="cb2-18">im3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Contents of MNIST DATA: [Path('valid'), Path('labels.csv'), Path('train')]
MNIST Training Data Directory Contents: [Path('train/3'), Path('train/7')]
Test Image of 3 from 3 training data set</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="69">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="data-processing" class="level2">
<h2 class="anchored" data-anchor-id="data-processing">Data Processing</h2>
<section id="representing-images-as-numbers" class="level3">
<h3 class="anchored" data-anchor-id="representing-images-as-numbers">Representing Images as Numbers</h3>
<p>Images are represented on computers as an array of pixels where each index contains a list of 3 numbers between 0-255 corresponding to a particular color according to RGB. Assembling all of these colors together we get an image.</p>
<p>The MNIST images are represented differently: each index in the image array contains a number between 0-255 where 0 represents white and 255 black. All other values between 0-255 represent a different shade of gray. A unique digit image in the MNIST data is then defined by the black and gray pixels that together outline and define the digit. The size of an image in the MNIST data is 28 x 28 which is 784 pixels in the Image Array.</p>
<p>In the following examples, [4:10, 4:10] means the following: request rows from index 4 (included) to 10(not included) and the same for the columns. Numpy and Pytorch index from top to bottom and left to right.</p>
<p>In the image slice below, we select a part of the digit with just the top part and then color code the slice based on the values in the slice with their mapping in the gray scale (0-255) where 0 represents white and 255 black.</p>
<div class="cell" data-outputid="40ddbfdd-69ec-41c5-c09d-b04d731c2695" data-execution_count="70">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST image dimensions are 28 x 28 = 784 pixel array</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"im3 represented as an array of numbers using numpy array"</span>)</span>
<span id="cb4-3">array(im3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>im3 represented as an array of numbers using numpy array</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  29, 150, 195, 254,
        255, 254, 176, 193, 150,  96,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  48, 166, 224, 253, 253, 234,
        196, 253, 253, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,  93, 244, 249, 253, 187,  46,  10,   8,
          4,  10, 194, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0, 107, 253, 253, 230,  48,   0,   0,   0,
          0,   0, 192, 253, 253, 156,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   3,  20,  20,  15,   0,   0,   0,   0,
          0,  43, 224, 253, 245,  74,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 249, 253, 245, 126,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14, 101,
        223, 253, 248, 124,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 166, 239, 253,
        253, 253, 187,  30,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  16, 248, 250, 253,
        253, 253, 253, 232, 213, 111,   2,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  43,  98,
         98, 208, 253, 253, 253, 253, 187,  22,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   9,  51, 119, 253, 253, 253,  76,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   1, 183, 253, 253, 139,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0, 182, 253, 253, 104,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,  85, 249, 253, 253,  36,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,  60, 214, 253, 253, 173,  11,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,  98, 247, 253, 253, 226,   9,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  42,
        150, 252, 253, 253, 233,  53,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,  42, 115,  42,  60, 115, 159, 240,
        253, 253, 250, 175,  25,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 187, 253, 253, 253, 253, 253, 253,
        253, 197,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 103, 253, 253, 253, 253, 253, 232,
         67,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]], dtype=uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="bacddb27-749b-4e47-dfc5-79b867f68e70" data-execution_count="71">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slice of im3</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [4:10, 4:10] - get rows and columns starting from 4(included) to 10 (excluded)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numpy Array representation</span></span>
<span id="cb7-4">array(im3)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>array([[  0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,  29],
       [  0,   0,   0,  48, 166, 224],
       [  0,  93, 244, 249, 253, 187],
       [  0, 107, 253, 253, 230,  48],
       [  0,   3,  20,  20,  15,   0]], dtype=uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="0892887d-b80e-41a4-ab5a-6ea93d8ea908" data-execution_count="72">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST image dimensions are 28 x 28 = 784 pixel array</span></span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"im3 represented as an array of numbers using tensors"</span>)</span>
<span id="cb9-3">tensor(im3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>im3 represented as an array of numbers using tensors</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="72">
<pre><code>tensor([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  29, 150, 195, 254, 255,
         254, 176, 193, 150,  96,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,  48, 166, 224, 253, 253, 234, 196,
         253, 253, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,  93, 244, 249, 253, 187,  46,  10,   8,   4,
          10, 194, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0, 107, 253, 253, 230,  48,   0,   0,   0,   0,
           0, 192, 253, 253, 156,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   3,  20,  20,  15,   0,   0,   0,   0,   0,
          43, 224, 253, 245,  74,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         249, 253, 245, 126,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14, 101, 223,
         253, 248, 124,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 166, 239, 253, 253,
         253, 187,  30,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  16, 248, 250, 253, 253,
         253, 253, 232, 213, 111,   2,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  43,  98,  98,
         208, 253, 253, 253, 253, 187,  22,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           9,  51, 119, 253, 253, 253,  76,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   1, 183, 253, 253, 139,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0, 182, 253, 253, 104,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,  85, 249, 253, 253,  36,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,  60, 214, 253, 253, 173,  11,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          98, 247, 253, 253, 226,   9,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  42, 150,
         252, 253, 253, 233,  53,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,  42, 115,  42,  60, 115, 159, 240, 253,
         253, 250, 175,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0, 187, 253, 253, 253, 253, 253, 253, 253,
         197,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0, 103, 253, 253, 253, 253, 253, 232,  67,
           1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]],
       dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="afc3bf43-4f09-4e8d-d7dd-e86e443ddafe" data-execution_count="73">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slice of im3</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [4:10, 4:10] - get rows and columns starting from 4(included) to 10 (excluded)</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor representation</span></span>
<span id="cb12-4">tensor(im3)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>tensor([[  0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,  29],
        [  0,   0,   0,  48, 166, 224],
        [  0,  93, 244, 249, 253, 187],
        [  0, 107, 253, 253, 230,  48],
        [  0,   3,  20,  20,  15,   0]], dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="27e262ee-21c3-403c-d39f-3320f0bcd30a" data-execution_count="74">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice data to obtain the top part of the number and color code data to show digit outline</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice data rows: 4(included)-15(excluded)</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice data columns: 4(included)-22(excluded)</span></span>
<span id="cb14-4">im3_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(im3)</span>
<span id="cb14-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(im3_t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>])</span>
<span id="cb14-6">df.style.set_properties(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font-size'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6pt'</span>}).background_gradient(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">


<table id="T_f187e" class="dataframe table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_f187e_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">0</th>
<th id="T_f187e_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">1</th>
<th id="T_f187e_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">2</th>
<th id="T_f187e_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">3</th>
<th id="T_f187e_level0_col4" class="col_heading level0 col4" data-quarto-table-cell-role="th">4</th>
<th id="T_f187e_level0_col5" class="col_heading level0 col5" data-quarto-table-cell-role="th">5</th>
<th id="T_f187e_level0_col6" class="col_heading level0 col6" data-quarto-table-cell-role="th">6</th>
<th id="T_f187e_level0_col7" class="col_heading level0 col7" data-quarto-table-cell-role="th">7</th>
<th id="T_f187e_level0_col8" class="col_heading level0 col8" data-quarto-table-cell-role="th">8</th>
<th id="T_f187e_level0_col9" class="col_heading level0 col9" data-quarto-table-cell-role="th">9</th>
<th id="T_f187e_level0_col10" class="col_heading level0 col10" data-quarto-table-cell-role="th">10</th>
<th id="T_f187e_level0_col11" class="col_heading level0 col11" data-quarto-table-cell-role="th">11</th>
<th id="T_f187e_level0_col12" class="col_heading level0 col12" data-quarto-table-cell-role="th">12</th>
<th id="T_f187e_level0_col13" class="col_heading level0 col13" data-quarto-table-cell-role="th">13</th>
<th id="T_f187e_level0_col14" class="col_heading level0 col14" data-quarto-table-cell-role="th">14</th>
<th id="T_f187e_level0_col15" class="col_heading level0 col15" data-quarto-table-cell-role="th">15</th>
<th id="T_f187e_level0_col16" class="col_heading level0 col16" data-quarto-table-cell-role="th">16</th>
<th id="T_f187e_level0_col17" class="col_heading level0 col17" data-quarto-table-cell-role="th">17</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_f187e_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">0</td>
<td id="T_f187e_row0_col0" class="data row0 col0">0</td>
<td id="T_f187e_row0_col1" class="data row0 col1">0</td>
<td id="T_f187e_row0_col2" class="data row0 col2">0</td>
<td id="T_f187e_row0_col3" class="data row0 col3">0</td>
<td id="T_f187e_row0_col4" class="data row0 col4">0</td>
<td id="T_f187e_row0_col5" class="data row0 col5">0</td>
<td id="T_f187e_row0_col6" class="data row0 col6">0</td>
<td id="T_f187e_row0_col7" class="data row0 col7">0</td>
<td id="T_f187e_row0_col8" class="data row0 col8">0</td>
<td id="T_f187e_row0_col9" class="data row0 col9">0</td>
<td id="T_f187e_row0_col10" class="data row0 col10">0</td>
<td id="T_f187e_row0_col11" class="data row0 col11">0</td>
<td id="T_f187e_row0_col12" class="data row0 col12">0</td>
<td id="T_f187e_row0_col13" class="data row0 col13">0</td>
<td id="T_f187e_row0_col14" class="data row0 col14">0</td>
<td id="T_f187e_row0_col15" class="data row0 col15">0</td>
<td id="T_f187e_row0_col16" class="data row0 col16">0</td>
<td id="T_f187e_row0_col17" class="data row0 col17">0</td>
</tr>
<tr class="even">
<td id="T_f187e_level0_row1" class="row_heading level0 row1" data-quarto-table-cell-role="th">1</td>
<td id="T_f187e_row1_col0" class="data row1 col0">0</td>
<td id="T_f187e_row1_col1" class="data row1 col1">0</td>
<td id="T_f187e_row1_col2" class="data row1 col2">0</td>
<td id="T_f187e_row1_col3" class="data row1 col3">0</td>
<td id="T_f187e_row1_col4" class="data row1 col4">0</td>
<td id="T_f187e_row1_col5" class="data row1 col5">29</td>
<td id="T_f187e_row1_col6" class="data row1 col6">150</td>
<td id="T_f187e_row1_col7" class="data row1 col7">195</td>
<td id="T_f187e_row1_col8" class="data row1 col8">254</td>
<td id="T_f187e_row1_col9" class="data row1 col9">255</td>
<td id="T_f187e_row1_col10" class="data row1 col10">254</td>
<td id="T_f187e_row1_col11" class="data row1 col11">176</td>
<td id="T_f187e_row1_col12" class="data row1 col12">193</td>
<td id="T_f187e_row1_col13" class="data row1 col13">150</td>
<td id="T_f187e_row1_col14" class="data row1 col14">96</td>
<td id="T_f187e_row1_col15" class="data row1 col15">0</td>
<td id="T_f187e_row1_col16" class="data row1 col16">0</td>
<td id="T_f187e_row1_col17" class="data row1 col17">0</td>
</tr>
<tr class="odd">
<td id="T_f187e_level0_row2" class="row_heading level0 row2" data-quarto-table-cell-role="th">2</td>
<td id="T_f187e_row2_col0" class="data row2 col0">0</td>
<td id="T_f187e_row2_col1" class="data row2 col1">0</td>
<td id="T_f187e_row2_col2" class="data row2 col2">0</td>
<td id="T_f187e_row2_col3" class="data row2 col3">48</td>
<td id="T_f187e_row2_col4" class="data row2 col4">166</td>
<td id="T_f187e_row2_col5" class="data row2 col5">224</td>
<td id="T_f187e_row2_col6" class="data row2 col6">253</td>
<td id="T_f187e_row2_col7" class="data row2 col7">253</td>
<td id="T_f187e_row2_col8" class="data row2 col8">234</td>
<td id="T_f187e_row2_col9" class="data row2 col9">196</td>
<td id="T_f187e_row2_col10" class="data row2 col10">253</td>
<td id="T_f187e_row2_col11" class="data row2 col11">253</td>
<td id="T_f187e_row2_col12" class="data row2 col12">253</td>
<td id="T_f187e_row2_col13" class="data row2 col13">253</td>
<td id="T_f187e_row2_col14" class="data row2 col14">233</td>
<td id="T_f187e_row2_col15" class="data row2 col15">0</td>
<td id="T_f187e_row2_col16" class="data row2 col16">0</td>
<td id="T_f187e_row2_col17" class="data row2 col17">0</td>
</tr>
<tr class="even">
<td id="T_f187e_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">3</td>
<td id="T_f187e_row3_col0" class="data row3 col0">0</td>
<td id="T_f187e_row3_col1" class="data row3 col1">93</td>
<td id="T_f187e_row3_col2" class="data row3 col2">244</td>
<td id="T_f187e_row3_col3" class="data row3 col3">249</td>
<td id="T_f187e_row3_col4" class="data row3 col4">253</td>
<td id="T_f187e_row3_col5" class="data row3 col5">187</td>
<td id="T_f187e_row3_col6" class="data row3 col6">46</td>
<td id="T_f187e_row3_col7" class="data row3 col7">10</td>
<td id="T_f187e_row3_col8" class="data row3 col8">8</td>
<td id="T_f187e_row3_col9" class="data row3 col9">4</td>
<td id="T_f187e_row3_col10" class="data row3 col10">10</td>
<td id="T_f187e_row3_col11" class="data row3 col11">194</td>
<td id="T_f187e_row3_col12" class="data row3 col12">253</td>
<td id="T_f187e_row3_col13" class="data row3 col13">253</td>
<td id="T_f187e_row3_col14" class="data row3 col14">233</td>
<td id="T_f187e_row3_col15" class="data row3 col15">0</td>
<td id="T_f187e_row3_col16" class="data row3 col16">0</td>
<td id="T_f187e_row3_col17" class="data row3 col17">0</td>
</tr>
<tr class="odd">
<td id="T_f187e_level0_row4" class="row_heading level0 row4" data-quarto-table-cell-role="th">4</td>
<td id="T_f187e_row4_col0" class="data row4 col0">0</td>
<td id="T_f187e_row4_col1" class="data row4 col1">107</td>
<td id="T_f187e_row4_col2" class="data row4 col2">253</td>
<td id="T_f187e_row4_col3" class="data row4 col3">253</td>
<td id="T_f187e_row4_col4" class="data row4 col4">230</td>
<td id="T_f187e_row4_col5" class="data row4 col5">48</td>
<td id="T_f187e_row4_col6" class="data row4 col6">0</td>
<td id="T_f187e_row4_col7" class="data row4 col7">0</td>
<td id="T_f187e_row4_col8" class="data row4 col8">0</td>
<td id="T_f187e_row4_col9" class="data row4 col9">0</td>
<td id="T_f187e_row4_col10" class="data row4 col10">0</td>
<td id="T_f187e_row4_col11" class="data row4 col11">192</td>
<td id="T_f187e_row4_col12" class="data row4 col12">253</td>
<td id="T_f187e_row4_col13" class="data row4 col13">253</td>
<td id="T_f187e_row4_col14" class="data row4 col14">156</td>
<td id="T_f187e_row4_col15" class="data row4 col15">0</td>
<td id="T_f187e_row4_col16" class="data row4 col16">0</td>
<td id="T_f187e_row4_col17" class="data row4 col17">0</td>
</tr>
<tr class="even">
<td id="T_f187e_level0_row5" class="row_heading level0 row5" data-quarto-table-cell-role="th">5</td>
<td id="T_f187e_row5_col0" class="data row5 col0">0</td>
<td id="T_f187e_row5_col1" class="data row5 col1">3</td>
<td id="T_f187e_row5_col2" class="data row5 col2">20</td>
<td id="T_f187e_row5_col3" class="data row5 col3">20</td>
<td id="T_f187e_row5_col4" class="data row5 col4">15</td>
<td id="T_f187e_row5_col5" class="data row5 col5">0</td>
<td id="T_f187e_row5_col6" class="data row5 col6">0</td>
<td id="T_f187e_row5_col7" class="data row5 col7">0</td>
<td id="T_f187e_row5_col8" class="data row5 col8">0</td>
<td id="T_f187e_row5_col9" class="data row5 col9">0</td>
<td id="T_f187e_row5_col10" class="data row5 col10">43</td>
<td id="T_f187e_row5_col11" class="data row5 col11">224</td>
<td id="T_f187e_row5_col12" class="data row5 col12">253</td>
<td id="T_f187e_row5_col13" class="data row5 col13">245</td>
<td id="T_f187e_row5_col14" class="data row5 col14">74</td>
<td id="T_f187e_row5_col15" class="data row5 col15">0</td>
<td id="T_f187e_row5_col16" class="data row5 col16">0</td>
<td id="T_f187e_row5_col17" class="data row5 col17">0</td>
</tr>
<tr class="odd">
<td id="T_f187e_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">6</td>
<td id="T_f187e_row6_col0" class="data row6 col0">0</td>
<td id="T_f187e_row6_col1" class="data row6 col1">0</td>
<td id="T_f187e_row6_col2" class="data row6 col2">0</td>
<td id="T_f187e_row6_col3" class="data row6 col3">0</td>
<td id="T_f187e_row6_col4" class="data row6 col4">0</td>
<td id="T_f187e_row6_col5" class="data row6 col5">0</td>
<td id="T_f187e_row6_col6" class="data row6 col6">0</td>
<td id="T_f187e_row6_col7" class="data row6 col7">0</td>
<td id="T_f187e_row6_col8" class="data row6 col8">0</td>
<td id="T_f187e_row6_col9" class="data row6 col9">0</td>
<td id="T_f187e_row6_col10" class="data row6 col10">249</td>
<td id="T_f187e_row6_col11" class="data row6 col11">253</td>
<td id="T_f187e_row6_col12" class="data row6 col12">245</td>
<td id="T_f187e_row6_col13" class="data row6 col13">126</td>
<td id="T_f187e_row6_col14" class="data row6 col14">0</td>
<td id="T_f187e_row6_col15" class="data row6 col15">0</td>
<td id="T_f187e_row6_col16" class="data row6 col16">0</td>
<td id="T_f187e_row6_col17" class="data row6 col17">0</td>
</tr>
<tr class="even">
<td id="T_f187e_level0_row7" class="row_heading level0 row7" data-quarto-table-cell-role="th">7</td>
<td id="T_f187e_row7_col0" class="data row7 col0">0</td>
<td id="T_f187e_row7_col1" class="data row7 col1">0</td>
<td id="T_f187e_row7_col2" class="data row7 col2">0</td>
<td id="T_f187e_row7_col3" class="data row7 col3">0</td>
<td id="T_f187e_row7_col4" class="data row7 col4">0</td>
<td id="T_f187e_row7_col5" class="data row7 col5">0</td>
<td id="T_f187e_row7_col6" class="data row7 col6">0</td>
<td id="T_f187e_row7_col7" class="data row7 col7">14</td>
<td id="T_f187e_row7_col8" class="data row7 col8">101</td>
<td id="T_f187e_row7_col9" class="data row7 col9">223</td>
<td id="T_f187e_row7_col10" class="data row7 col10">253</td>
<td id="T_f187e_row7_col11" class="data row7 col11">248</td>
<td id="T_f187e_row7_col12" class="data row7 col12">124</td>
<td id="T_f187e_row7_col13" class="data row7 col13">0</td>
<td id="T_f187e_row7_col14" class="data row7 col14">0</td>
<td id="T_f187e_row7_col15" class="data row7 col15">0</td>
<td id="T_f187e_row7_col16" class="data row7 col16">0</td>
<td id="T_f187e_row7_col17" class="data row7 col17">0</td>
</tr>
<tr class="odd">
<td id="T_f187e_level0_row8" class="row_heading level0 row8" data-quarto-table-cell-role="th">8</td>
<td id="T_f187e_row8_col0" class="data row8 col0">0</td>
<td id="T_f187e_row8_col1" class="data row8 col1">0</td>
<td id="T_f187e_row8_col2" class="data row8 col2">0</td>
<td id="T_f187e_row8_col3" class="data row8 col3">0</td>
<td id="T_f187e_row8_col4" class="data row8 col4">0</td>
<td id="T_f187e_row8_col5" class="data row8 col5">11</td>
<td id="T_f187e_row8_col6" class="data row8 col6">166</td>
<td id="T_f187e_row8_col7" class="data row8 col7">239</td>
<td id="T_f187e_row8_col8" class="data row8 col8">253</td>
<td id="T_f187e_row8_col9" class="data row8 col9">253</td>
<td id="T_f187e_row8_col10" class="data row8 col10">253</td>
<td id="T_f187e_row8_col11" class="data row8 col11">187</td>
<td id="T_f187e_row8_col12" class="data row8 col12">30</td>
<td id="T_f187e_row8_col13" class="data row8 col13">0</td>
<td id="T_f187e_row8_col14" class="data row8 col14">0</td>
<td id="T_f187e_row8_col15" class="data row8 col15">0</td>
<td id="T_f187e_row8_col16" class="data row8 col16">0</td>
<td id="T_f187e_row8_col17" class="data row8 col17">0</td>
</tr>
<tr class="even">
<td id="T_f187e_level0_row9" class="row_heading level0 row9" data-quarto-table-cell-role="th">9</td>
<td id="T_f187e_row9_col0" class="data row9 col0">0</td>
<td id="T_f187e_row9_col1" class="data row9 col1">0</td>
<td id="T_f187e_row9_col2" class="data row9 col2">0</td>
<td id="T_f187e_row9_col3" class="data row9 col3">0</td>
<td id="T_f187e_row9_col4" class="data row9 col4">0</td>
<td id="T_f187e_row9_col5" class="data row9 col5">16</td>
<td id="T_f187e_row9_col6" class="data row9 col6">248</td>
<td id="T_f187e_row9_col7" class="data row9 col7">250</td>
<td id="T_f187e_row9_col8" class="data row9 col8">253</td>
<td id="T_f187e_row9_col9" class="data row9 col9">253</td>
<td id="T_f187e_row9_col10" class="data row9 col10">253</td>
<td id="T_f187e_row9_col11" class="data row9 col11">253</td>
<td id="T_f187e_row9_col12" class="data row9 col12">232</td>
<td id="T_f187e_row9_col13" class="data row9 col13">213</td>
<td id="T_f187e_row9_col14" class="data row9 col14">111</td>
<td id="T_f187e_row9_col15" class="data row9 col15">2</td>
<td id="T_f187e_row9_col16" class="data row9 col16">0</td>
<td id="T_f187e_row9_col17" class="data row9 col17">0</td>
</tr>
<tr class="odd">
<td id="T_f187e_level0_row10" class="row_heading level0 row10" data-quarto-table-cell-role="th">10</td>
<td id="T_f187e_row10_col0" class="data row10 col0">0</td>
<td id="T_f187e_row10_col1" class="data row10 col1">0</td>
<td id="T_f187e_row10_col2" class="data row10 col2">0</td>
<td id="T_f187e_row10_col3" class="data row10 col3">0</td>
<td id="T_f187e_row10_col4" class="data row10 col4">0</td>
<td id="T_f187e_row10_col5" class="data row10 col5">0</td>
<td id="T_f187e_row10_col6" class="data row10 col6">0</td>
<td id="T_f187e_row10_col7" class="data row10 col7">43</td>
<td id="T_f187e_row10_col8" class="data row10 col8">98</td>
<td id="T_f187e_row10_col9" class="data row10 col9">98</td>
<td id="T_f187e_row10_col10" class="data row10 col10">208</td>
<td id="T_f187e_row10_col11" class="data row10 col11">253</td>
<td id="T_f187e_row10_col12" class="data row10 col12">253</td>
<td id="T_f187e_row10_col13" class="data row10 col13">253</td>
<td id="T_f187e_row10_col14" class="data row10 col14">253</td>
<td id="T_f187e_row10_col15" class="data row10 col15">187</td>
<td id="T_f187e_row10_col16" class="data row10 col16">22</td>
<td id="T_f187e_row10_col17" class="data row10 col17">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
</section>
<section id="baseline-model-pixel-similarity" class="level2">
<h2 class="anchored" data-anchor-id="baseline-model-pixel-similarity">Baseline Model: Pixel Similarity</h2>
<p>The problem we’re trying to solve is the following: How do we write a computer program to be able to distinguish between images of handwritten 3 and 7 digits.</p>
<p>The first approach we try is <strong>Pixel Similarity</strong>. The FASTAI book authors define this as the following:</p>
<ol type="1">
<li>Take the average pixel value for every pixel of the 3 images and do the same for the 7 images. These averages will produce a baseline image 3 and image 7.</li>
<li>Go through every image in the 3 and 7 images and compare them to the baseline images to see which digit they are most similar to</li>
</ol>
<div class="cell" data-outputid="6cbbff26-cd16-430a-b7d7-69a8948d625e" data-execution_count="75">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list of tensors for each image in 3 and 7 directories</span></span>
<span id="cb15-2">three_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> threes]</span>
<span id="cb15-3">seven_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sevens]</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in threes: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in three tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(three_tensors)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in sevens: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sevens)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in seven tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(seven_tensors)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify images</span></span>
<span id="cb15-11">show_image(three_tensors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb15-12">show_image(seven_tensors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of images in threes: 6131
Number of images in three tensors: 6131
Number of images in sevens: 6265
Number of images in seven tensors: 6265</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-9-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>The way I understand tensors is that they are data structures for storing information. The way I understand the stack operation is storing all the images into a pile of images that we then then can average all the pixel values for each pixel index in the image.</p>
<div class="cell" data-outputid="2f3fd75f-6cc4-4296-e7cc-8f4c345a3d68" data-execution_count="76">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the average intensity of each pixel across all images for 3 and 7</span></span>
<span id="cb18-2">stacked_sevens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(seven_tensors).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb18-3">stacked_threes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(three_tensors).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_sevens shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stacked_sevens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_sevens tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stacked_sevens.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_threes shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stacked_threes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_threes tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stacked_threes.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>stacked_sevens shape: torch.Size([6265, 28, 28])
stacked_sevens tensor rank: 3
stacked_threes shape: torch.Size([6131, 28, 28])
stacked_threes tensor rank: 3</code></pre>
</div>
</div>
<p>In this step, we take the list of tensor images and condense them down into a new image where each pixel index in this new image is the average of all the values at a particular index.</p>
<div class="cell" data-outputid="8bbcc1c0-da44-423e-a505-74ce307bdc2e" data-execution_count="77">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average of all image tensors by taking mean along the 0 dimension (collapse all the rows into a single row) of stacked 3 rank tensors</span></span>
<span id="cb20-2">mean3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_threes.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-3">mean7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_sevens.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean3 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean3 tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mean3.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean7 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean7<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean7 tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mean7.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-8">show_image(mean3)</span>
<span id="cb20-9">show_image(mean7)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mean3 shape: torch.Size([28, 28])
mean3 tensor rank: 2
mean7 shape: torch.Size([28, 28])
mean7 tensor rank: 2</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-11-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-11-output-4.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="measuring-distance" class="level2">
<h2 class="anchored" data-anchor-id="measuring-distance">Measuring Distance</h2>
<p>To compare the baseline image with a randomly chosen image from one of the datasets we need to measure the difference between pixels such that we have a standardized form so that the differences accurately reflect what pixels are dark and light when comparing the two images.</p>
<div class="cell" data-outputid="52603ae6-eb04-4328-f679-606624b2de31" data-execution_count="78">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean Absolute Difference (L1 Norm)</span></span>
<span id="cb23-2">a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_threes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb23-3">a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_sevens[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb23-4"></span>
<span id="cb23-5">dist_3_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean3).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean()</span>
<span id="cb23-6">dist_7_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean()</span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Absolute Difference between 3 image and ideal 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_3_abs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Absolute Difference between 7 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_7_abs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-10"></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see how close 3 is to ideal 7</span></span>
<span id="cb23-12">dist_test_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean()</span>
<span id="cb23-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Absolute Difference between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_test_abs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean Absolute Difference between 3 image and ideal 3 image: 0.11143654584884644
Mean Absolute Difference between 7 image and ideal 7 image: 0.13037648797035217
Mean Absolute Difference between 3 image and ideal 7 image: 0.15861910581588745</code></pre>
</div>
</div>
<div class="cell" data-outputid="811442e9-101c-4d2f-8ddc-d7162b70b07d" data-execution_count="79">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Root Mean Squared Error (L2 Norm)</span></span>
<span id="cb25-2">a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_threes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb25-3">a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_sevens[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb25-4"></span>
<span id="cb25-5">dist_3_sqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean3)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean().sqrt()</span>
<span id="cb25-6">dist_7_sqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean().sqrt()</span>
<span id="cb25-7">dist_test_sqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean().sqrt()</span>
<span id="cb25-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Root Mean Squared Difference between 3 image and ideal 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_3_sqr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Root Mean Squared Difference between 7 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_7_sqr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-10"></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see how close 3 is to ideal 7</span></span>
<span id="cb25-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Root Mean Squared Difference between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_test_sqr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Root Mean Squared Difference between 3 image and ideal 3 image: 0.20208320021629333
Root Mean Squared Difference between 7 image and ideal 7 image: 0.2584923207759857
Root Mean Squared Difference between 3 image and ideal 7 image: 0.30210891366004944</code></pre>
</div>
</div>
<div class="cell" data-outputid="9f5c1e37-7bb2-443d-87a6-a30d7554b531" data-execution_count="80">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch Mean Squared Error and Mean Absolute Value Loss</span></span>
<span id="cb27-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pytorch Mean Absolute Value Loss between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>F<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l1_loss(a_3.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), mean7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb27-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pytorch Mean Squared Error Loss between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>F<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mse_loss(a_3, mean7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sqrt()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pytorch Mean Absolute Value Loss between 3 image and ideal 7 image: 0.15861910581588745
Pytorch Mean Squared Error Loss between 3 image and ideal 7 image: 0.30210891366004944</code></pre>
</div>
</div>
</section>
<section id="pytorch-numpy" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-numpy">Pytorch + Numpy</h2>
<p>The main difference between pytorch and numpy is that pytorch supports using the GPU and calculating gradients which numpy does not.</p>
<div class="cell" data-outputid="444a9730-6cca-4d12-9ca2-f4d9b3d033c6" data-execution_count="81">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]]</span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numpy array</span></span>
<span id="cb29-3">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array(data)</span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor</span></span>
<span id="cb29-5">tns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(data)</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select a row</span></span>
<span id="cb29-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"select the second row of tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select a column</span></span>
<span id="cb29-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"select the second column of tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slicing</span></span>
<span id="cb29-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"select slice of tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-15"></span>
<span id="cb29-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># addition</span></span>
<span id="cb29-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Addition with tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># types</span></span>
<span id="cb29-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tensor type: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-21"></span>
<span id="cb29-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale and update tensor type</span></span>
<span id="cb29-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"changing tensor type from int to float: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>select the second row of tensor: tensor([4, 5, 6])
select the second column of tensor: tensor([[1, 2, 3]])
select slice of tensor: tensor([5, 6])
Addition with tensors: tensor([[2, 3, 4],
        [5, 6, 7]])
tensor type: torch.LongTensor
changing tensor type from int to float: tensor([[1.5000, 3.0000, 4.5000],
        [6.0000, 7.5000, 9.0000]])</code></pre>
</div>
</div>
</section>
<section id="computing-metrics" class="level2">
<h2 class="anchored" data-anchor-id="computing-metrics">Computing Metrics</h2>
<p>A metric is a number that is calculated based on the predictions of the model and the correct labels and inform us how good the model is. For classification models, <strong>accuracy</strong> is a popular metric.</p>
<div class="cell" data-outputid="f128eb6a-f341-44c1-d278-9f5b25815f51" data-execution_count="82">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create validation data set</span></span>
<span id="cb31-2">valid_3_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o))</span>
<span id="cb31-3">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>).ls()])</span>
<span id="cb31-4">valid_3_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_3_tens.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb31-5">valid_7_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o))</span>
<span id="cb31-6">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls()])</span>
<span id="cb31-7">valid_7_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_7_tens.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"3 validation set shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_3_tens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"3 validation set tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_tens.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"7 validation set shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_7_tens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"7 validation set tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_7_tens.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3 validation set shape: torch.Size([1010, 28, 28])
3 validation set tensor rank: 3
7 validation set shape: torch.Size([1028, 28, 28])
7 validation set tensor rank: 3</code></pre>
</div>
</div>
<div class="cell" data-outputid="7e558fef-b29b-4b2e-c5ff-df91dd7bcc7d" data-execution_count="83">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Data Distance Function</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mnist_distance(a, b):</span>
<span id="cb33-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (-1, -2) represent a range of axes. Tell Pytorch to take the mean ranging over the values</span></span>
<span id="cb33-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indexed by the last two axes of the tensor (horizontal and vertical dimensions of the image)</span></span>
<span id="cb33-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># leaves only the first tensor axis which indexes over images and the final size -&gt; averaged the intensity of all the pixels</span></span>
<span id="cb33-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in the image</span></span>
<span id="cb33-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb33-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance function measuring the distance between 3 image and ideal 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mnist_distance(a_3, mean3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measure distance between validation set 3 and ideal 3 tensor</span></span>
<span id="cb33-11">valid_3_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist_distance(valid_3_tens, mean3)</span>
<span id="cb33-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance between validation set 3 image and ideal training data set 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_3_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid 3 distance tensor shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_3_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid 3 distance tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_dist.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Distance function measuring the distance between 3 image and ideal 3 image: 0.11143654584884644
Distance between validation set 3 image and ideal training data set 3 image: tensor([0.1058, 0.1300, 0.1125,  ..., 0.1605, 0.1259, 0.1381])
Valid 3 distance tensor shape: torch.Size([1010])
Valid 3 distance tensor rank: 1</code></pre>
</div>
</div>
<div class="cell" data-outputid="3b8a1f4a-92dd-4c2c-fe0c-13256e3f5d46" data-execution_count="84">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if image is a 3</span></span>
<span id="cb35-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_3(x):</span>
<span id="cb35-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mnist_distance(x, mean3) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> mnist_distance(x, mean7)</span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Check if 3 image is actually a 3 image as a boolean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_3(a_3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1.0 - true</span></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0.0 - false</span></span>
<span id="cb35-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Check if 3 image is actually a 3 image as a float: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_3(a_3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb35-9"></span>
<span id="cb35-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check all 3 images</span></span>
<span id="cb35-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"check if all 3 images in validation set are 3 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_3(valid_3_tens)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Check if 3 image is actually a 3 image as a boolean: True
Check if 3 image is actually a 3 image as a float: 1.0
check if all 3 images in validation set are 3 images: tensor([ True,  True,  True,  ..., False, False,  True])</code></pre>
</div>
</div>
<div class="cell" data-outputid="35e1b348-1b4e-481c-88e7-a317e6b632d0" data-execution_count="85">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Accuracy of 3 and 7 Images</span></span>
<span id="cb37-2">accuracy_3s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> is_3(valid_3_tens).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() .mean()</span>
<span id="cb37-3">accuracy_7s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> is_3(valid_7_tens).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()).mean()</span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model accuracy for classifying 3 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy_3s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model accuracy for classifying 7 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy_7s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average model accuracy for classifying 3 and 7 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(accuracy_3s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>accuracy_7s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model accuracy for classifying 3 images: 0.9168316721916199
Model accuracy for classifying 7 images: 0.9854085445404053
Average model accuracy for classifying 3 and 7 images: 0.951120138168335</code></pre>
</div>
</div>
<div class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for plotting</span></span>
<span id="cb39-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> interact</span>
<span id="cb39-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.basics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb39-4"></span>
<span id="cb39-5">plt.rc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure'</span>, dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_function(f, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb39-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb39-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ylim: plt.ylim(ylim)</span>
<span id="cb39-10">    plt.plot(x, f(x), color)</span>
<span id="cb39-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> title <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: plt.title(title)</span></code></pre></div>
</div>
</section>
<section id="fit-a-function-with-gradient-descent" class="level2">
<h2 class="anchored" data-anchor-id="fit-a-function-with-gradient-descent">Fit a Function with Gradient Descent</h2>
<ul>
<li>A neural network can be thought of as a mathematical function</li>
<li>A simple neural network does the following things:</li>
</ul>
<ol type="1">
<li>Multiplies each input by a number of values(parameters).</li>
<li>Sums up results for each group values</li>
<li>Replaces the negative numbers with zeroes</li>
</ol>
<ul>
<li>These steps define a single layer. The three steps are repeated using the outputs of the previous layer as inputs to the next layer. The initial parameters are selected randomly</li>
</ul>
<div class="cell" data-outputid="331905e1-c043-4229-edc4-a7f2f1ecc70d" data-execution_count="88">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quadratic Function</span></span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - The quadratic function below is the one we are trying to fit(approximate)</span></span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb40-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb40-6">plot_function(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$3x^2 + 2x + 1$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># General Quadratic Function</span></span>
<span id="cb41-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quad(a, b, c, x):</span>
<span id="cb41-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span></code></pre></div>
</div>
<div class="cell" data-outputid="ac782cc4-061b-41a9-f65e-f5ab66af7e46" data-execution_count="90">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to make quadratic functions</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># partial allows for fixing particular values</span></span>
<span id="cb42-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mk_quad(a, b, c):</span>
<span id="cb42-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> partial(quad, a, b, c)</span>
<span id="cb42-8"></span>
<span id="cb42-9">f2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mk_quad(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-10"></span>
<span id="cb42-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test partial and quadratic</span></span>
<span id="cb42-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Quadtratic Function: f(10.5) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"General Quadratic Function: f(10.5) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Quadtratic Function: f(10.5) = 352.75
General Quadratic Function: f(10.5) = 352.75</code></pre>
</div>
</div>
<div class="cell" data-outputid="db2abf14-449a-4c07-d203-076d9eff7694" data-execution_count="91">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test and plot quadratic function using make quad function</span></span>
<span id="cb44-2">f2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mk_quad(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb44-3">plot_function(f2)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate noisy measurements of quadratic function f</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># noisy data generation functions</span></span>
<span id="cb45-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> noise(x, scale):</span>
<span id="cb45-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.shape)</span>
<span id="cb45-6"></span>
<span id="cb45-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add_noise(x, mult, add):</span>
<span id="cb45-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise(x, mult)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise(x,add)</span></code></pre></div>
</div>
<div class="cell" data-outputid="5ab236cf-cd0d-4918-9718-6c6e06c7d71a" data-execution_count="93">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create noisy data based on the the quadratic function f(x)</span></span>
<span id="cb46-2">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb46-3"></span>
<span id="cb46-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb46-5">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> add_noise(f(x), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"First 5 x values: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb46-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"First 5 y values: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>First 5 x values: tensor([[-2.0000],
        [-1.7895],
        [-1.5789],
        [-1.3684],
        [-1.1579]])
First 5 y values: tensor([[11.8690],
        [ 6.5433],
        [ 5.9396],
        [ 2.6304],
        [ 1.7947]], dtype=torch.float64)</code></pre>
</div>
</div>
<div class="cell" data-outputid="15ce639b-6a22-4d12-f0c8-439521c754a4" data-execution_count="94">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot noisy data</span></span>
<span id="cb48-2">plt.scatter(x, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7c9d0f8a7dc0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-27-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="b8bc16eb-4b8f-4854-f70b-44f5f401087d" data-execution_count="95">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find a, b, c values that create a function that fits noisy data</span></span>
<span id="cb50-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@interact</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span>
<span id="cb50-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_quad(a, b, c):</span>
<span id="cb50-4">  plt.scatter(x, y)</span>
<span id="cb50-5">  plot_function(mk_quad(a,b,c), ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"23535e77851b4a8cbeb564acc6ba01a4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
<section id="metric-loss-function" class="level3">
<h3 class="anchored" data-anchor-id="metric-loss-function">Metric (Loss Function)</h3>
<ul>
<li>numerical way of measuring whether function is fitting data better or worse</li>
<li>Mean Absolute Error (MAE) is a <code>metric</code> that measures the distance from each data point to the curve</li>
</ul>
<div class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mae(preds, acts):</span>
<span id="cb51-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> acts)).mean()</span></code></pre></div>
</div>
<div class="cell" data-outputid="d3202f63-23b8-474b-bbf3-77bb3acf1bbe" data-execution_count="97">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find a, b, c values that create a function that fits noisy data using metrics</span></span>
<span id="cb52-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@interact</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span>
<span id="cb52-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_quad(a, b, c):</span>
<span id="cb52-4">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mk_quad(a,b,c)</span>
<span id="cb52-5">    plt.scatter(x,y)</span>
<span id="cb52-6">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mae(f(x), y)</span>
<span id="cb52-7">    plot_function(f, ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MAE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d249cb9a26474d2581e78ecca502132f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-30-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="automating-gradient-descent" class="level3">
<h3 class="anchored" data-anchor-id="automating-gradient-descent">Automating Gradient Descent</h3>
<ul>
<li><p>Calculus can be used to determine how much each neural network paramter should be increased or decreased to fit the data using the derivative(gradient).</p></li>
<li><p>Given the gradient of the <code>mean absolute error</code> with respect to parameters <code>a</code>, <code>b</code>, <code>c</code> then we know how adjusting a parameters such as <code>a</code> will change the value of the <code>mean absolute error</code></p></li>
<li><p>If a paramaeter has a <em>negative gradient</em> then <code>increasing</code> the parameter will <code>decrease</code> the <code>mean absolute error</code></p></li>
<li><p>Goal is to <code>minimize</code> the value of the metric function we use for the <code>loss function</code>.</p></li>
</ul>
<p><strong>Steps</strong>: 1. Find the gradient of MAE for each parameter 2. Adjust parameters a bit in the opposite direction to the sign of the gradient</p>
<div class="cell" data-outputid="0c245447-73bb-4216-91ef-698c30a3ec0f" data-execution_count="99">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function for generating MAE for quadratic functions</span></span>
<span id="cb53-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quad_mae(params):</span>
<span id="cb53-3">  f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mk_quad(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>params)</span>
<span id="cb53-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mae(f(x), y)</span>
<span id="cb53-5"></span>
<span id="cb53-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test quad_mae</span></span>
<span id="cb53-7">quad_mae([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>tensor(2.4219, dtype=torch.float64)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># starting vector containing arbitrary position</span></span>
<span id="cb55-2">abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>])</span></code></pre></div>
</div>
<div class="cell" data-outputid="11ee8f6b-eb98-45f2-d588-24baeca2c925" data-execution_count="101">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tell pytorch to calculate gradient for parameters</span></span>
<span id="cb56-2">abc.requires_grad_()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>tensor([1.1000, 1.1000, 1.1000], requires_grad=True)</code></pre>
</div>
</div>
<div class="cell" data-outputid="86990ec0-5aed-4f64-f40a-8c21c6cf87cb" data-execution_count="102">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate MAE</span></span>
<span id="cb58-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - When doing gradient descent we are trying to minimize the metric which is called the loss</span></span>
<span id="cb58-3">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad_mae(abc)</span>
<span id="cb58-4">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>tensor(2.4219, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate gradients</span></span>
<span id="cb60-2">loss.backward()</span></code></pre></div>
</div>
<div class="cell" data-outputid="ded0b2d1-6da2-4e46-ca45-08fd1aacfd39" data-execution_count="104">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gradients with respect to each parameter (a, b, c)</span></span>
<span id="cb61-2">abc.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>tensor([-1.3529, -0.0316, -0.5000])</code></pre>
</div>
</div>
<div class="cell" data-outputid="cb191eeb-526d-4250-ffbd-993c85e39a20" data-execution_count="105">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - gradients are a bit low -&gt; increase gradients a little bit will decrease loss</span></span>
<span id="cb63-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - update abc vector by decreasing it by gradient * learning rate</span></span>
<span id="cb63-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - torch.no_grad turns of gradient calculation when we update the vector since</span></span>
<span id="cb63-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># abc -= abc.grad * learning rate is not part of quadtratic function model and we</span></span>
<span id="cb63-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do not want the derivatives to include that calculation</span></span>
<span id="cb63-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb63-7">    abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> abc.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb63-8">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad_mae(abc)</span>
<span id="cb63-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>loss=2.40</code></pre>
</div>
</div>
<div class="cell" data-outputid="5da8b174-ae88-4445-8ea3-798d58eeffe5" data-execution_count="106">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss for 10 iterations</span></span>
<span id="cb65-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb65-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad_mae(abc)</span>
<span id="cb65-4">    loss.backward()</span>
<span id="cb65-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb65-6">      abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> abc.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb65-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'step=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>step=0; loss=2.40
step=1; loss=2.36
step=2; loss=2.30
step=3; loss=2.21
step=4; loss=2.11
step=5; loss=1.98
step=6; loss=1.85
step=7; loss=1.72
step=8; loss=1.58
step=9; loss=1.46</code></pre>
</div>
</div>
</section>
<section id="neural-network" class="level3">
<h3 class="anchored" data-anchor-id="neural-network">Neural Network</h3>
<ul>
<li>Neural Networks can approximate any computable function given enough parameters</li>
<li>A comptuable function covers any type of problem</li>
<li>Neural Networks approximate a function using the following steps:</li>
</ul>
<ol type="1">
<li>Matrix multiplication - multiply things together and add them up</li>
<li>The function max(x, 0) which replaces all negative numbers with 0</li>
</ol>
<div class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - f(x) = max(x, 0) is represented as torch.clip(x, 0)</span></span>
<span id="cb67-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rectified_linear(m, b, x):</span>
<span id="cb67-3">  y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb67-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.clip(y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="15d0eb21-ff7a-4158-8019-081d1ba59e45" data-execution_count="109">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot rectified linear</span></span>
<span id="cb68-2">plot_function(partial(rectified_linear, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-40-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="2674a7c8-cf1c-4486-9020-27315a86d8e6" data-execution_count="110">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot rectified linear using pytorch RELU function</span></span>
<span id="cb69-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb69-3"></span>
<span id="cb69-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rectified_linear2(m,b,x):</span>
<span id="cb69-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> F.relu(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b)</span>
<span id="cb69-6"></span>
<span id="cb69-7">plot_function(partial(rectified_linear2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="eca2bd81-647f-444f-fc9c-83ec7747bc4a" data-execution_count="111">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interactive relu</span></span>
<span id="cb70-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@interact</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb70-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_relu(m, b):</span>
<span id="cb70-4">    plot_function(partial(rectified_linear, m,b), ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"000344183aa54c66821b955f91eb9ee9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-42-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="2a1b96ad-a38e-4c8c-c808-2148362ce045" data-execution_count="112">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine RELUs</span></span>
<span id="cb71-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> double_relu(m1,b1,m2,b2,x):</span>
<span id="cb71-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rectified_linear(m1,b1,x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rectified_linear(m2,b2,x)</span>
<span id="cb71-4"></span>
<span id="cb71-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@interact</span>(m1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, b1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, m2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, b2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb71-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_double_relu(m1, b1, m2, b2):</span>
<span id="cb71-7">    plot_function(partial(double_relu, m1,b1,m2,b2), ylim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f9a42efdeb764e11a0ecfcf2508691c4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-43-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="stochastic-gradient-descent" class="level2">
<h2 class="anchored" data-anchor-id="stochastic-gradient-descent">Stochastic Gradient Descent</h2>
<p>In the <strong>Pixel Similarity</strong> approach from above, we don’t have a way for the model to learn and improve its accuracy. Instead of trying to compare an image with an ideal image, we can use <strong>Stochastic Gradient Descent (SGD)</strong> to look at each individual pixel and come up with a set of weights with large weights associated with pixels that are the most black for a particular label (ie. digit in MNIST data) using Arthur Samuel’s definition of machine learning</p>
<section id="stochastic-gradient-descent-steps-for-an-image-classifier" class="level3">
<h3 class="anchored" data-anchor-id="stochastic-gradient-descent-steps-for-an-image-classifier">Stochastic Gradient Descent Steps for an Image Classifier</h3>
<ol type="1">
<li>initialize weights</li>
<li>Calculate Predictions</li>
<li>Based on the predictions, calculate how good the model is (its loss)</li>
<li>Calculate the gradient which measures for each weight, how changing that weight would change the loss</li>
<li>Step (change) all the weights based on Step 4</li>
<li>Go back to Step 2 and repeat the process</li>
<li>Iterate until you decide to stop the training process until you decide the model is good enough for your problem</li>
</ol>
<p>The problem below is an example from the FastAI Book simulating a roller coaster and trying to find a function that best fits the data to understand how speed changes over time. There has been some discussion on the FastAI discord and forums about the loss value being too high (see <a href="https://forums.fast.ai/t/04-mnist-basics-some-questions-about-sgd/85431">Chapter 4 SGD Discussion</a>) because of the data not being centered similar to the way Jeremy centered the Titantic data in Lesson 5. The book examples are slightly older and different from how the 2022 FastAI course is running so I’d recommend going over the course notebook examples first and then checking the relevant book chapters mentioned.</p>
<div class="cell" data-outputid="2584ffb4-9d85-456b-a32e-2fd44583869d" data-execution_count="113">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Roller Coaster Problem with Stochastic Gradient Descent</span></span>
<span id="cb72-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate data</span></span>
<span id="cb72-3">time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb72-4">speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb72-5">plt.scatter(time,speed)</span>
<span id="cb72-6"></span>
<span id="cb72-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use SGD to find a function that fits the data for the rollercoaster data</span></span>
<span id="cb72-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># t - the time when we are measuring the rollercoaster speed</span></span>
<span id="cb72-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># params - the values that define which quadratic we're trying</span></span>
<span id="cb72-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(t, params):</span>
<span id="cb72-11">    a,b,c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb72-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb72-13"></span>
<span id="cb72-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a loss function - returns a value based on a prediction and a target</span></span>
<span id="cb72-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># where lower values of the functions correspond to better predictions. Need</span></span>
<span id="cb72-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  loss function to return lower values when predictions are more accurate, as</span></span>
<span id="cb72-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  SGD is trying to minimize this loss. For continuous data, Mean Square Error is</span></span>
<span id="cb72-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  frequently used</span></span>
<span id="cb72-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mse(preds, targets):</span>
<span id="cb72-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ((preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targets)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb72-21"></span>
<span id="cb72-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SGD Process</span></span>
<span id="cb72-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for visualizing how close our predictions are to targets</span></span>
<span id="cb72-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_preds(preds, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb72-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.subplots()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb72-26">    ax.scatter(time, speed)</span>
<span id="cb72-27">    ax.scatter(time, to_np(preds), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb72-28">    ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb72-29"></span>
<span id="cb72-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. initialize weights</span></span>
<span id="cb72-31">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).requires_grad_()</span>
<span id="cb72-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The parameter values after initialization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-33">orig_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params.clone()</span>
<span id="cb72-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The original parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>orig_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-35"></span>
<span id="cb72-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Calculate Predictions</span></span>
<span id="cb72-37">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(time, params)</span>
<span id="cb72-38">show_preds(preds)</span>
<span id="cb72-39"></span>
<span id="cb72-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Based on the predictions, calculate how good the model is (its loss)</span></span>
<span id="cb72-41">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(preds, speed)</span>
<span id="cb72-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-43"></span>
<span id="cb72-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Calculate the gradient which measures for each weight, how changing that weight would change the loss</span></span>
<span id="cb72-45">loss.backward()</span>
<span id="cb72-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Gradient values for each argument: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate approximation of how parameters need to change</span></span>
<span id="cb72-48"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test a new gradient with a learning rate of 1e^-5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-49"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parameter values after computing the gradient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-50"></span>
<span id="cb72-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. Step (change) all the weights based on Step 4</span></span>
<span id="cb72-52">learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span></span>
<span id="cb72-53">params.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> params.grad.data</span>
<span id="cb72-54">params.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb72-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if loss has improved</span></span>
<span id="cb72-56">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(time, params)</span>
<span id="cb72-57">mse(preds, speed)</span>
<span id="cb72-58">show_preds(preds)</span>
<span id="cb72-59"></span>
<span id="cb72-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6. Go back to Step 2 and repeat the process</span></span>
<span id="cb72-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_step(params, prn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb72-62">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(time, params)</span>
<span id="cb72-63">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(preds, speed)</span>
<span id="cb72-64">    loss.backward()</span>
<span id="cb72-65">    params.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> params.grad.data</span>
<span id="cb72-66">    params.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb72-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> prn:</span>
<span id="cb72-68">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss Value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb72-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> preds</span>
<span id="cb72-70"></span>
<span id="cb72-71"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb72-72">  apply_step(params)</span>
<span id="cb72-73">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orig_params.detach().requires_grad_()</span>
<span id="cb72-74"></span>
<span id="cb72-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7. Iterate until you decide to stop the training process until you decide the model is good enough for your problem</span></span>
<span id="cb72-76">_,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb72-77"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axs: show_preds(apply_step(params, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), ax)</span>
<span id="cb72-78">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The parameter values after initialization: tensor([ 1.3558, -2.8016, -0.5138], requires_grad=True)
The original parameters: tensor([ 1.3558, -2.8016, -0.5138], grad_fn=&lt;CloneBackward0&gt;)
Loss value: 31279.806640625
Gradient values for each argument: tensor([58635.1250,  3711.7488,   228.4950])
Test a new gradient with a learning rate of 1e^-5: tensor([0.5864, 0.0371, 0.0023])
Parameter values after computing the gradient: tensor([ 1.3558, -2.8016, -0.5138], requires_grad=True)
Loss Value: 6512.2529296875
Loss Value: 1825.4468994140625
Loss Value: 938.5320434570312
Loss Value: 770.6725463867188
Loss Value: 738.8804321289062
Loss Value: 732.8363037109375
Loss Value: 731.66455078125
Loss Value: 731.414794921875
Loss Value: 731.3395385742188
Loss Value: 731.2973022460938</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-44-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-44-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-44-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-44-output-5.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="building-the-mnist-image-classifier" class="level2">
<h2 class="anchored" data-anchor-id="building-the-mnist-image-classifier">Building the MNIST Image Classifier</h2>
<section id="training-dataset" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset">Training Dataset</h3>
<div class="cell" data-outputid="8c26d04f-43b7-4935-d87f-13b471ec9cfd" data-execution_count="114">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build Training Dataset</span></span>
<span id="cb74-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 view function -&gt; make this axis as big as necessary to fit all the data</span></span>
<span id="cb74-3">train_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([stacked_threes, stacked_sevens]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb74-4">train_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sevens)).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb74-5"></span>
<span id="cb74-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_x data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb74-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_x data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_x.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb74-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_y data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb74-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_y data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_y.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train_x data shape: torch.Size([12396, 784])
train_x data tensor rank: 2
train_y data shape: torch.Size([12396, 1])
train_y data tensor rank: 2</code></pre>
</div>
</div>
</section>
<section id="validation-dataset" class="level3">
<h3 class="anchored" data-anchor-id="validation-dataset">Validation Dataset</h3>
<div class="cell" data-outputid="496b863c-85e1-4a08-9500-705a358a48f9" data-execution_count="115">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build Validation Dataset</span></span>
<span id="cb76-2">valid_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([valid_3_tens, valid_7_tens]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb76-3">valid_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_tens) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_7_tens)).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb76-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_x data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb76-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_x data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_x.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb76-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_y data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb76-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_y data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_y.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>valid_x data shape: torch.Size([2038, 784])
valid_x data tensor rank: 2
valid_y data shape: torch.Size([2038, 1])
valid_y data tensor rank: 2</code></pre>
</div>
</div>
<div class="cell" data-outputid="d51e0c65-fe56-412b-bbd2-1bb8cd4a4a73" data-execution_count="116">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a Dataset object(training data) for PyTorch</span></span>
<span id="cb78-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset is required to return a tuple of (x, y) when indexed</span></span>
<span id="cb78-3">dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(train_x,train_y))</span>
<span id="cb78-4">x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb78-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"datset x shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb78-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dataset x tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb78-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"datset y shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb78-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dataset y tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>datset x shape: torch.Size([784])
dataset x tensor rank: 1
datset y shape: torch.Size([1])
dataset y tensor rank: 1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a Dataset object(validation data) for PyTorch</span></span>
<span id="cb80-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset is required to return a tuple of (x, y) when indexed</span></span>
<span id="cb80-3">valid_dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(valid_x,valid_y))</span></code></pre></div>
</div>
</section>
<section id="initialize-model-weights" class="level3">
<h3 class="anchored" data-anchor-id="initialize-model-weights">Initialize Model Weights</h3>
<div class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize model weights</span></span>
<span id="cb81-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_params(size, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb81-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.randn(size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>std).requires_grad_()</span>
<span id="cb81-4"></span>
<span id="cb81-5">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb81-6"></span>
<span id="cb81-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a Bias Value</span></span>
<span id="cb81-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need a bias to ensure its not 0 when the pixels are 0</span></span>
<span id="cb81-9">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="32707d59-7fe7-4e74-c04e-fc1e11355f1f" data-execution_count="119">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate a prediction for one image</span></span>
<span id="cb82-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prediction for a single image from training data: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(train_x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weights.T)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bias<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Prediction for a single image from training data: tensor([-8.8691], grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
</section>
<section id="linear-classifier" class="level3">
<h3 class="anchored" data-anchor-id="linear-classifier">Linear Classifier</h3>
<div class="cell" data-outputid="198a37a1-2782-4f77-d4c2-76e201a083ad" data-execution_count="120">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matrix Multiplication</span></span>
<span id="cb84-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Create a linear combination for the prediction values</span></span>
<span id="cb84-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute predictions for all the images in the training data</span></span>
<span id="cb84-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> linear1(xb):</span>
<span id="cb84-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> xb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bias</span>
<span id="cb84-6">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear1(train_x)</span>
<span id="cb84-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Predictions"</span>)</span>
<span id="cb84-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(preds)</span>
<span id="cb84-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prediction shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb84-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prediction tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(preds.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predictions
tensor([[ -8.8691],
        [-15.5004],
        [-11.7157],
        ...,
        [-12.3695],
        [-17.3231],
        [ -0.2207]], grad_fn=&lt;AddBackward0&gt;)
Prediction shape: torch.Size([12396, 1])
Prediction tensor rank: 2</code></pre>
</div>
</div>
<div class="cell" data-outputid="376c1a32-99e2-4cdb-b9ca-600c598a3645" data-execution_count="121">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check accuracy of prediction</span></span>
<span id="cb86-2">corrects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> train_y</span>
<span id="cb86-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy of Predictions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corrects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb86-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average accuracy of all predictions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corrects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy of Predictions: tensor([[False],
        [False],
        [False],
        ...,
        [ True],
        [ True],
        [ True]])
Average accuracy of all predictions: 0.5041949152946472</code></pre>
</div>
</div>
<div class="cell" data-outputid="8ab1526a-bfa3-4c43-ae59-244a98dd0e0f" data-execution_count="122">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Improve Accuracy</span></span>
<span id="cb88-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test to see if we can improve accuracy with a small change</span></span>
<span id="cb88-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb88-4">  weights[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0001</span></span>
<span id="cb88-5">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear1(train_x)</span>
<span id="cb88-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average accuracy after updating the weights: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>((preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> train_y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb88-7"></span>
<span id="cb88-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># there is no change because the change in weights is so small that (y_new - y_old) is very close to 0 ie.</span></span>
<span id="cb88-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the gradient is almost 0 everywhere</span></span>
<span id="cb88-10"></span>
<span id="cb88-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to find a loss function which when our weights result in slightly better predictions produces a slightly better loss</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Average accuracy after updating the weights: 0.5041949152946472</code></pre>
</div>
</div>
</section>
<section id="loss-function" class="level3">
<h3 class="anchored" data-anchor-id="loss-function">Loss Function</h3>
<div class="cell" data-outputid="57557122-da05-42d1-c5a2-5636d2e973a8" data-execution_count="123">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a Loss Function</span></span>
<span id="cb90-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function receive predictions from the model about the images</span></span>
<span id="cb90-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the purpose of the loss function is to measure the difference between predicted values and true values ie the labels</span></span>
<span id="cb90-4">trgts  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb90-5">prds   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>])</span>
<span id="cb90-6"></span>
<span id="cb90-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first attempt at a loss function</span></span>
<span id="cb90-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mnist_loss(predictions, targets):</span>
<span id="cb90-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measures how distant each predictions is from 1 if it should be 1, how distant it is from 0 if it should be 0</span></span>
<span id="cb90-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and takes the mean of all the distances</span></span>
<span id="cb90-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>predictions, predictions).mean()</span>
<span id="cb90-12"></span>
<span id="cb90-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need a scalar for the final loss -&gt; the lower the loss value the better</span></span>
<span id="cb90-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indicates accurate predictions are more confident and when inaccurate predictions are less confident</span></span>
<span id="cb90-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test loss function: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mnist_loss(prds,trgts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb90-16"></span>
<span id="cb90-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># issue with this loss function is that it assumes all predictions are between 0 and 1</span></span>
<span id="cb90-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sigmoid function always outputs a number between 0 and 1</span></span>
<span id="cb90-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sigmoid(x):</span>
<span id="cb90-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x))</span>
<span id="cb90-21"></span>
<span id="cb90-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second attempt at a loss function using sigmoid</span></span>
<span id="cb90-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mnist_loss_sigmoid(predictions, targets):</span>
<span id="cb90-24">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions.sigmoid()</span>
<span id="cb90-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>predictions, predictions).mean()</span>
<span id="cb90-26"></span>
<span id="cb90-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test loss function with sigmoid: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mnist_loss_sigmoid(prds,trgts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test loss function: 0.43333330750465393
Test loss function with sigmoid: 0.44596806168556213</code></pre>
</div>
</div>
</section>
<section id="sgd-mini-batches" class="level3">
<h3 class="anchored" data-anchor-id="sgd-mini-batches">SGD + Mini Batches</h3>
<div class="cell" data-outputid="f6054dba-8c62-4042-bba9-b0eb61bb983a" data-execution_count="124">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SGD + Mini Batches</span></span>
<span id="cb92-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization Step - updating the weights based on gradients</span></span>
<span id="cb92-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to calculate loss over one or more data items</span></span>
<span id="cb92-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution: Calculate the average loss for a data items at a time (mini-batch)</span></span>
<span id="cb92-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch Size - number of items in mini batch</span></span>
<span id="cb92-6"></span>
<span id="cb92-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use fastai to build a dataloader object to shuffle data</span></span>
<span id="cb92-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly shuffle data on every epoch before creating mini batches</span></span>
<span id="cb92-9">coll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb92-10">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(coll, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb92-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Example of randomly generated mini-batch of batch size 5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dl)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Example of randomly generated mini-batch of batch size 5: [tensor([4, 6, 5, 7, 2]), tensor([ 1, 12,  8, 14, 11]), tensor([13,  9, 10,  0,  3])]</code></pre>
</div>
</div>
</section>
<section id="mnist-model-training-loop-using-sgd" class="level3">
<h3 class="anchored" data-anchor-id="mnist-model-training-loop-using-sgd">MNIST Model Training Loop using SGD</h3>
<div class="cell" data-outputid="2291029d-9571-426a-dcd9-5a026816e6a3" data-execution_count="125">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a training loop for a model</span></span>
<span id="cb94-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights and bias randomly</span></span>
<span id="cb94-3">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb94-4">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb94-5"></span>
<span id="cb94-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for the training data</span></span>
<span id="cb94-7">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb94-8">xb,yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(dl)</span>
<span id="cb94-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"xb shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"xb tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"yb shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"yb tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yb.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-13"></span>
<span id="cb94-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for the validation data</span></span>
<span id="cb94-15">valid_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb94-16"></span>
<span id="cb94-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Mini-Batch of batch size 4 for testing</span></span>
<span id="cb94-18">batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb94-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(batch.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-21"></span>
<span id="cb94-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Predictions</span></span>
<span id="cb94-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># preds = linear1(batch)</span></span>
<span id="cb94-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"predictions: {preds}")</span></span>
<span id="cb94-25"></span>
<span id="cb94-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measure loss</span></span>
<span id="cb94-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss = mnist_loss_sigmoid(preds, train_y[:4])</span></span>
<span id="cb94-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Loss: {loss}")</span></span>
<span id="cb94-29"></span>
<span id="cb94-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Gradients</span></span>
<span id="cb94-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss.backward()</span></span>
<span id="cb94-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"weights gradient shape: {weights.grad.shape}")</span></span>
<span id="cb94-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Average of weight gradients: {weights.grad.mean()}")</span></span>
<span id="cb94-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"bias gradient: {bias.grad}")</span></span>
<span id="cb94-35"></span>
<span id="cb94-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for calculating gradient</span></span>
<span id="cb94-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_grad(xb, yb, model):</span>
<span id="cb94-38">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb94-39">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist_loss(preds, yb)</span>
<span id="cb94-40">    loss.backward()</span>
<span id="cb94-41"></span>
<span id="cb94-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test calculating gradients: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calc_grad(batch, train_y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], linear1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average of weight gradients: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>weights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"bias gradient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bias<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-45"></span>
<span id="cb94-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss.backward adds the gradients of loss to any gradients that are currently stored</span></span>
<span id="cb94-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so have to set the current gradients to 0 first</span></span>
<span id="cb94-48"></span>
<span id="cb94-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training loop for an epoch</span></span>
<span id="cb94-50"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_epoch(model, lr, params):</span>
<span id="cb94-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb,yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dl:</span>
<span id="cb94-52">        calc_grad(xb, yb, model)</span>
<span id="cb94-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> params:</span>
<span id="cb94-54">            p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lr</span>
<span id="cb94-55">            p.grad.zero_()</span>
<span id="cb94-56"></span>
<span id="cb94-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check accuracy at this point</span></span>
<span id="cb94-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Check Accuracy at this point: {(preds&gt;0.0).float() == train_y[:4]}")</span></span>
<span id="cb94-59"></span>
<span id="cb94-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for calculating validation accuracy</span></span>
<span id="cb94-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> batch_accuracy(xb, yb):</span>
<span id="cb94-62">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.sigmoid()</span>
<span id="cb94-63">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yb</span>
<span id="cb94-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> correct.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb94-65"></span>
<span id="cb94-66"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Testing batch accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_accuracy(linear1(batch), train_y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-67"></span>
<span id="cb94-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put batches together to create a validation epoch</span></span>
<span id="cb94-69"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> validate_epoch(model):</span>
<span id="cb94-70">    accs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [batch_accuracy(model(xb), yb) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb,yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_dl]</span>
<span id="cb94-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(torch.stack(accs).mean().item(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb94-72"></span>
<span id="cb94-73"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test validation epoch: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>validate_epoch(linear1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-74"></span>
<span id="cb94-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train for 1 epoch and see if things improve</span></span>
<span id="cb94-76">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb94-77">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights, bias</span>
<span id="cb94-78">train_epoch(linear1, lr, params)</span>
<span id="cb94-79"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"check if accuracy has improved from earlier: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>validate_epoch(linear1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-80"></span>
<span id="cb94-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train for a few epochs</span></span>
<span id="cb94-82"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb94-83">    train_epoch(linear1, lr, params)</span>
<span id="cb94-84">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(linear1), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>xb shape: torch.Size([256, 784])
xb tensor rank: 2
yb shape: torch.Size([256, 1])
yb tensor rank: 2
batch shape: torch.Size([4, 784])
batch tensor rank: 2
Test calculating gradients: None
Average of weight gradients: -0.15112045407295227
bias gradient: tensor([-1.])
Testing batch accuracy: 0.0
Test validation epoch: 0.2825
check if accuracy has improved from earlier: 0.9484
0.9533 0.9543 0.9538 0.9528 0.9533 0.9533 0.9528 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9538 0.9538 0.9538 0.9538 0.9538 </code></pre>
</div>
</div>
</section>
</section>
<section id="pytorch-setup-for-sgd-pytorch-optimizer" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-setup-for-sgd-pytorch-optimizer">PyTorch setup for SGD + Pytorch Optimizer</h2>
<div class="cell" data-outputid="1ad22a15-fbb8-46aa-889c-e1c272164035" data-execution_count="126">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build SGD Functionality - PyTorch Optimizer</span></span>
<span id="cb96-2"></span>
<span id="cb96-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># intialize weights and biases in a single pytorch class</span></span>
<span id="cb96-4">linear_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb96-5">w,b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_model.parameters()</span>
<span id="cb96-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"weights shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb96-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"weight tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(w.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb96-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"bias shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb96-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"bias tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb96-10"></span>
<span id="cb96-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch Optimizer Setup</span></span>
<span id="cb96-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BasicOptim:</span>
<span id="cb96-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,params,lr): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(params),lr</span>
<span id="cb96-14"></span>
<span id="cb96-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb96-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr</span>
<span id="cb96-17"></span>
<span id="cb96-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb96-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>weights shape: torch.Size([1, 784])
weight tensor rank: 2
bias shape: torch.Size([1])
bias tensor rank: 1</code></pre>
</div>
</div>
<div class="cell" data-outputid="bb6b9b16-21a7-4c32-fd6e-026c4c1f4704" data-execution_count="127">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define training epoch function that use SGD</span></span>
<span id="cb98-2">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicOptim(linear_model.parameters(), lr)</span>
<span id="cb98-3"></span>
<span id="cb98-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_epoch(model):</span>
<span id="cb98-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb,yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dl:</span>
<span id="cb98-6">        calc_grad(xb, yb, model)</span>
<span id="cb98-7">        opt.step()</span>
<span id="cb98-8">        opt.zero_grad()</span>
<span id="cb98-9"></span>
<span id="cb98-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check validation epoch</span></span>
<span id="cb98-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Check accuracy after adding SGD: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>validate_epoch(linear_model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb98-12"></span>
<span id="cb98-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update Model Training</span></span>
<span id="cb98-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_model(model, epochs):</span>
<span id="cb98-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb98-16">        train_epoch(model)</span>
<span id="cb98-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(model), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb98-18"></span>
<span id="cb98-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test training model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_model(linear_model, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Check accuracy after adding SGD: 0.4623
0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 0.9533 Test training model: None</code></pre>
</div>
</div>
</section>
<section id="train-mnist-model-using-fastai-library" class="level2">
<h2 class="anchored" data-anchor-id="train-mnist-model-using-fastai-library">Train MNIST Model using FastAI Library</h2>
<div class="cell" data-outputid="94fd730a-0e80-4d11-9ad7-9ca67e1ac283" data-execution_count="128">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify Model Training Code with FastAI</span></span>
<span id="cb100-2"></span>
<span id="cb100-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model information that uses SGD</span></span>
<span id="cb100-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># linear_model = nn.Linear(28 * 28,1)</span></span>
<span id="cb100-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># opt = SGD(linear_model.parameters(), lr)</span></span>
<span id="cb100-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train_model(linear_model, 20)</span></span>
<span id="cb100-7"></span>
<span id="cb100-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define new DataLoaders</span></span>
<span id="cb100-9">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(dl, valid_dl)</span>
<span id="cb100-10"></span>
<span id="cb100-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a general purpose Learner class</span></span>
<span id="cb100-12">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls, nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SGD,</span>
<span id="cb100-13">                loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mnist_loss_sigmoid, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_accuracy)</span>
<span id="cb100-14"></span>
<span id="cb100-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model with Learner.fit</span></span>
<span id="cb100-16">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">batch_accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.637107</td>
<td>0.503204</td>
<td>0.495584</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.442642</td>
<td>0.243648</td>
<td>0.783611</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.165686</td>
<td>0.164265</td>
<td>0.853778</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.074370</td>
<td>0.101180</td>
<td>0.915604</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.040661</td>
<td>0.075151</td>
<td>0.935231</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.027422</td>
<td>0.060723</td>
<td>0.948970</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.021923</td>
<td>0.051665</td>
<td>0.956330</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.019433</td>
<td>0.045617</td>
<td>0.962709</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.018136</td>
<td>0.041344</td>
<td>0.965653</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.017336</td>
<td>0.038176</td>
<td>0.967615</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="neural-networks">Neural Networks</h2>
<p>Linear classifiers are limited in what they can do. To handle more complex functions we need to add a nonlinear function between two linear classifiers. This is what defines a <strong>neural network</strong>.</p>
<div class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a simple neural network</span></span>
<span id="cb101-2"></span>
<span id="cb101-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly intialize weights and biases</span></span>
<span id="cb101-4">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb101-5">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb101-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb101-7">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb101-8"></span>
<span id="cb101-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def simple_net(xb):</span></span>
<span id="cb101-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     res = xb@w1 + b1</span></span>
<span id="cb101-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # Rectified Linear Unit - RELU -&gt; replaces every negative number with 0</span></span>
<span id="cb101-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     res = res.max(tensor(0.0))</span></span>
<span id="cb101-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     res = res@w2 + b2</span></span>
<span id="cb101-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return res</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="130">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch version of a simple neural network</span></span>
<span id="cb102-2">simple_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb102-3">    nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>),</span>
<span id="cb102-4">    nn.ReLU(),</span>
<span id="cb102-5">    nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb102-6">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="103ead15-b2ec-4cab-b317-2336bd95e3f4" data-execution_count="131">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply Simplenet to MNIST data</span></span>
<span id="cb103-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls, simple_net, opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SGD,</span>
<span id="cb103-3">                loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mnist_loss_sigmoid, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_accuracy)</span>
<span id="cb103-4"></span>
<span id="cb103-5">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">batch_accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.328221</td>
<td>0.406217</td>
<td>0.508341</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.149408</td>
<td>0.235759</td>
<td>0.797350</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.082235</td>
<td>0.118789</td>
<td>0.911678</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.053837</td>
<td>0.079781</td>
<td>0.939156</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.040731</td>
<td>0.061933</td>
<td>0.955348</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.034059</td>
<td>0.051913</td>
<td>0.962218</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.030231</td>
<td>0.045626</td>
<td>0.966143</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.027744</td>
<td>0.041346</td>
<td>0.967125</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.025948</td>
<td>0.038250</td>
<td>0.968106</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.024554</td>
<td>0.035887</td>
<td>0.970069</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.023423</td>
<td>0.034018</td>
<td>0.973013</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.022477</td>
<td>0.032491</td>
<td>0.973994</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.021670</td>
<td>0.031212</td>
<td>0.974485</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.020972</td>
<td>0.030119</td>
<td>0.974975</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.020360</td>
<td>0.029168</td>
<td>0.975466</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.019819</td>
<td>0.028330</td>
<td>0.975957</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>16</td>
<td>0.019334</td>
<td>0.027587</td>
<td>0.976938</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>17</td>
<td>0.018896</td>
<td>0.026921</td>
<td>0.977920</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>18</td>
<td>0.018499</td>
<td>0.026321</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>19</td>
<td>0.018135</td>
<td>0.025777</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>20</td>
<td>0.017801</td>
<td>0.025281</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>21</td>
<td>0.017493</td>
<td>0.024828</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>22</td>
<td>0.017206</td>
<td>0.024412</td>
<td>0.978901</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>23</td>
<td>0.016939</td>
<td>0.024028</td>
<td>0.979882</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>24</td>
<td>0.016689</td>
<td>0.023674</td>
<td>0.980864</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>25</td>
<td>0.016454</td>
<td>0.023345</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>26</td>
<td>0.016232</td>
<td>0.023040</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>27</td>
<td>0.016023</td>
<td>0.022755</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>28</td>
<td>0.015825</td>
<td>0.022491</td>
<td>0.981845</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>29</td>
<td>0.015637</td>
<td>0.022243</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>30</td>
<td>0.015459</td>
<td>0.022012</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>31</td>
<td>0.015289</td>
<td>0.021795</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>32</td>
<td>0.015127</td>
<td>0.021592</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>33</td>
<td>0.014972</td>
<td>0.021401</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>34</td>
<td>0.014823</td>
<td>0.021221</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>35</td>
<td>0.014681</td>
<td>0.021052</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>36</td>
<td>0.014544</td>
<td>0.020892</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>37</td>
<td>0.014413</td>
<td>0.020741</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>38</td>
<td>0.014286</td>
<td>0.020597</td>
<td>0.983317</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>39</td>
<td>0.014164</td>
<td>0.020461</td>
<td>0.983317</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="cell" data-outputid="e027873a-ac92-49d9-e4b1-9154b4c5718c" data-execution_count="132">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize the accuracy of model using simplenet</span></span>
<span id="cb104-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y axis - accuracy</span></span>
<span id="cb104-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis number of epochs</span></span>
<span id="cb104-4">plt.plot(L(learn.recorder.values).itemgot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3_files/figure-html/cell-63-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="99207481-1d58-4e4b-a95c-e34edf9a95f1" data-execution_count="133">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Final Accuracy of model on the MNIST dataset: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>learn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>recorder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>values[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Final Accuracy of model on the MNIST dataset: 0.983316957950592</code></pre>
</div>
</div>
</section>
<section id="going-deeper-into-deep-learning-neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="going-deeper-into-deep-learning-neural-networks">Going Deeper into Deep Learning + Neural Networks</h2>
<p>The following code below is an 18 layer resnet model with nearly 100% accuracy on the MNIST data. The above code was a simple neural network with 2 layers so the results of resnet-18 on this data show that accuracy improves as we add more layers. One thing to consider are the trade off’s mentioned by Jeremy in the lecture video</p>
<div class="cell" data-outputid="36c5e2ee-b5b1-4dc2-a8c4-eeb25ddf5cfe" data-execution_count="134">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Going Deeper into Deep Learning + Neural Networks</span></span>
<span id="cb107-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(path)</span>
<span id="cb107-3">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb107-4">                    loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>F.cross_entropy, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy)</span>
<span id="cb107-5">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.081687</td>
<td>0.015352</td>
<td>0.995584</td>
<td>00:18</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://course.fast.ai/Lessons/lesson3.html">FastAI Lesson 3</a></li>
<li><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb">FastAI Chapter 4</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work">How Does a Neural Net Really Work</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best/">Which Image Models are Best</a></li>
<li><a href="https://youtu.be/aircAruvnKk?feature=shared">3Blue1Brown Neural Networks</a></li>
<li><a href="https://karpathy.ai/zero-to-hero.html">Andrej Karpathy Neural Networks Zero to Hero</a></li>
<li><a href="https://towardsdatascience.com/understanding-dimensions-in-pytorch-6edf9972d3be">Understanding Dimensions in PyTorch</a></li>
<li><a href="https://medium.com/intuitionmath/numpy-sum-axis-intuition-6eb94926a5d1">Understanding Numpy Axis</a></li>
<li><a href="https://pytorch.org/docs/stable/index.html">PyTorch docs</a></li>
<li><a href="https://docs.fast.ai/">fast.ai docs</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson3/fastai-lesson3.html</guid>
  <pubDate>Mon, 18 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 2: Production</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson2/fastai-lesson2.html</link>
  <description><![CDATA[ 




<section id="announcments" class="level2">
<h2 class="anchored" data-anchor-id="announcments">Announcments</h2>
<p>Finally back! Had some deadlines and issues with gradio, kaggle, Firefox gtk rendering, quarto and jupyter but everything is working now. I’d like to give a shoutout to Kevin Liu for his help in getting up to speed with the updated gradio API. The example provided by Dr.&nbsp;Tanishq Abraham isn’t compatible with the updated version of Gradio so with Kevin’s notes on the gradio errors he ran into, I managed to get a model up on hugging face spaces with the new gradio syntax.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this lesson, Jeremy walks through a bear classification model example and then spends most of the lesson focusing on how to deploy a model into production. By production, Jeremy is referring to using a model outside of a Jupyter notebook. This is very useful because it provides a way for designing a custom inviting interface for interacting with a trained model. The decision of what the user interface should look like comes down to project scope, goals and the people using the model.</p>
<p>If you’re a programmer, designer or learning deep learning like me, then it might be fun to hack around with javascript + the web to build a really nice interface. This can be a project in its own. The other group of people are data scientists, boss, team or people who need to interact with a prototype model ASAP. In that case, there are many handy python libraries and tools such as <a href="https://colab.research.google.com/">colab</a>, <a href="https://altair-viz.github.io/">altair</a>, <a href="https://www.gradio.app/">gradio</a> and <a href="https://streamlit.io/">streamlit</a> which provide a set of components that have been determined to be highly effective for rapid prototyping and sharing work on the web.</p>
<p>If you are looking to build a nice application I would maybe start with gradio or streamlit for prototyping but then work with a designer or web developer to build a nicer interface since I’ve learned from personal experience that python libraries that render javascript, html and css can be a debugging nightmare when creating interactive web user interfaces.</p>
<p>Using gradio reminded me a lot of using streamlit. I remember liking streamlit for its simplicity in creating components but its simplicity was also its curse because of the nightmare it created when a user wanted to customize components beyond what the library offered. I really liked the gradio version that was used by Tanishq in his example because the syntax was very explicit about what the arguments and parameters mean in a gradio function. What tripped me up in the new gradio syntax was how complicated it was to debug and set up components. Once I managed to grasp the pattern and syntax from the gradio documentation it was a smoother experience but if I was new to python it would have been very difficult. I try to avoid using streamlit when I can and I probably will do the same with gradio but the experience setting it up and deploying a model on hugging face spaces with a web interface was worth learning. I might come back to this lesson in the future once I finish the rest of the course to experiment with how to deploy a model.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p><strong>Object Recognition</strong> - Computers can recognize what items are in an image at least as well as people can.</p>
<p><strong>Object Detection</strong> - Computers can recgonize where objects in an image are, and can highlight their locations and name each found object.</p>
<p><strong>Segmentation</strong> - A sub-area of <code>object detection</code> where every pixel is categorized on what kind of object it is part of</p>
<p><strong>Data Augmentation</strong> - creating random variations of our input data such that they appear different but do not change the information in the data. Augmentation techniques for images include rotation, flipping, perspective warping, brightness, contrast.</p>
</section>
<section id="picasso-or-matisse-model" class="level2">
<h2 class="anchored" data-anchor-id="picasso-or-matisse-model">Picasso or Matisse Model</h2>
<p>Inspired by Jeremy’s bear example, I changed my Picasso Braque example from my previous post and decided to instead try two different artists who weren’t so similar, in this case I chose Henri Matisse and Pablo Picasso. I trained the model the same way I did the Picasso Braques example but one thing I noticed was that some of the images seemed off for a duckduckgo search where duckduckgo would pull up a portrait of Picasso that didn’t look like it was from the same period I was searching. To try and fix this I tried to refresh the notebook runs multiple times until I got base images from actual Picasso and Matisse paintings. Similar to the Picasso Braque example, my Picasso predictions were off even though the label was correct but the Matisse ones were accurate.</p>
<p>After I tried Picasso and Matisse paintings, I tried different Picasso artworks such as his sculptures and got correct classifications. One person I shared the model with tried uploading their family thanksgiving photo to see what happened and the model classified the photo as 97%. This was quite intriguing to me because I had not even trained the model on images other than picasso and matisse paintings. I’m only writing on Lesson 2, but Jeremy’s discussion about transfer learning in Lesson 1 and the book has me wondering if the classification of the 97% Picasso Thanksgiving photo is a bug and use case I didn’t consider or if it has something to do with the resnet-18 base model with how it picked up the color, line and movement.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the latest libraries</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai duckduckgo_search</span></code></pre></div>
</div>
<section id="step-1-gather-data" class="level3">
<h3 class="anchored" data-anchor-id="step-1-gather-data">Step 1: Gather Data</h3>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ddg_images</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function for searching for images</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> L(ddg_images(term, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="6469196d-efd1-4e70-f9ae-21da7cae8718" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso Fauvism Paintings'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso Fauvism Paintings'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'https://i.pinimg.com/736x/b5/69/e1/b569e151ba0a9adf0136f5bdd7d4401b.jpg'</code></pre>
</div>
</div>
<div class="cell" data-outputid="3696c818-6658-4da8-dfee-ff9a0553f4ee" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb7-3">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span></span>
<span id="cb7-4">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb7-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson2/fastai-lesson2_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="a8183896-c442-4137-a429-71b716fef8ff" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Henri Matisse Fauvism Paintings'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb8-2">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>,</span>
<span id="cb8-3">            show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-4">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Henri Matisse Fauvism Paintings'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson2/fastai-lesson2_files/figure-html/cell-6-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ad422104-34f2-4d49-a4e2-0b5036eac642" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Henri Matisse'</span></span>
<span id="cb11-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso_or_matisse'</span>)</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb11-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb11-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-8">    download_images(dest,urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fauvism paintings'</span>))</span>
<span id="cb11-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb11-10">    download_images(dest,urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> still life fauvism paintings'</span>))</span>
<span id="cb11-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb11-12">    download_images(dest,urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fauvism scenic paintings'</span>))</span>
<span id="cb11-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb11-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso fauvism paintings'
Searching for 'Pablo Picasso still life fauvism paintings'
Searching for 'Pablo Picasso fauvism scenic paintings'
Searching for 'Henri Matisse fauvism paintings'
Searching for 'Henri Matisse still life fauvism paintings'
Searching for 'Henri Matisse fauvism scenic paintings'</code></pre>
</div>
</div>
</section>
<section id="step-2-train-model" class="level3">
<h3 class="anchored" data-anchor-id="step-2-train-model">Step 2: Train Model</h3>
<div class="cell" data-outputid="429acff4-66aa-4a83-edb2-bfe578ead261" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that failed to download properly</span></span>
<span id="cb13-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb13-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb13-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0</code></pre>
</div>
</div>
<div class="cell" data-outputid="012ee09f-5275-4f48-dd64-c22a631d28f8" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training set, validation set</span></span>
<span id="cb15-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify input type(image), output type(category aka label)</span></span>
<span id="cb15-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb15-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb15-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into 80% training data, and 20% validation data</span></span>
<span id="cb15-7">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the label</span></span>
<span id="cb15-9">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize and resize all images to 192 x 192</span></span>
<span id="cb15-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb15-12">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson2/fastai-lesson2_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="3337aab5-1727-4520-d4b6-9863c25d2359" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train a resnet model on the data</span></span>
<span id="cb16-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb16-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.003311</td>
<td>0.399668</td>
<td>0.160377</td>
<td>00:04</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.362328</td>
<td>0.233523</td>
<td>0.084906</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.323960</td>
<td>0.221361</td>
<td>0.075472</td>
<td>00:03</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.253416</td>
<td>0.133047</td>
<td>0.037736</td>
<td>00:04</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.199347</td>
<td>0.111490</td>
<td>0.037736</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="step-3-test-model" class="level3">
<h3 class="anchored" data-anchor-id="step-3-test-model">Step 3: Test Model</h3>
<div class="cell" data-outputid="00f7b617-3796-450e-883a-f6dad2b4eb67" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">is_picasso,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span>))</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_picasso<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a picasso: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: Pablo Picasso.
Probability it's a picasso: 0.0005</code></pre>
</div>
</div>
<div class="cell" data-outputid="008c95d8-0c6a-493c-81a2-ab733366c777" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">is_matisse,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>))</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_matisse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a matisse: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: Henri Matisse.
Probability it's a matisse: 0.9936</code></pre>
</div>
</div>
</section>
<section id="step-4-save-and-export-model" class="level3">
<h3 class="anchored" data-anchor-id="step-4-save-and-export-model">Step 4: Save and Export Model</h3>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">learn.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model.pkl'</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="jeremy-howards-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremy-howards-advice">Jeremy Howard’s Advice</h2>
<ul>
<li>Train a model before data cleaning because it helps find data issues more quickly and easily.</li>
</ul>
</section>
<section id="gradio-hugging-face-spaces" class="level2">
<h2 class="anchored" data-anchor-id="gradio-hugging-face-spaces">Gradio + Hugging Face Spaces</h2>
<p>The following code was originally written by Dr.&nbsp;Tanishq Abraham and published in the blog post: <a href="https://www.tanishq.ai/blog/posts/2021-11-16-gradio-huggingface.html">Gradio + Hugging Face Spaces: A Tutorial</a>. It was modified by me and Kevin Liu to work with the current version of the gradio api. Currently the code works on Hugging Face Spaces but may break in the future as gradio continues updating its api.</p>
<p>My recommendation to get gradio and Hugging Face Spaces working is to start off with Tanishq’s article and consult the gradio documentation to figure out the differences between the current version of the api and the version used in the article. I tried getting the pet classifier example working first before moving on to applying gradio to my Picasso Matisse Model which saved a lot of headache trying to figure out how git LFS and Hugging Face Spaces worked with my example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb22-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> skimage</span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load model </span></span>
<span id="cb22-6">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_learner(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model.pkl'</span>) </span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define prediction function </span></span>
<span id="cb22-9">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.vocab</span>
<span id="cb22-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict(img):</span>
<span id="cb22-11">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.create(img)</span>
<span id="cb22-12">    pred,pred_idx,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(img)</span>
<span id="cb22-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {labels[i]: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(probs[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels))}</span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define interface structure </span></span>
<span id="cb22-16">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Picasso or Mattise Classifier"</span></span>
<span id="cb22-17">description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A classifier trained on Pablo Picasso and Henri Mattise paintings with fast.ai."</span></span>
<span id="cb22-18">examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>]</span>
<span id="cb22-19">gr.Interface(fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predict, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gr.Image(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pil"</span>)], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gr.Label(num_top_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)).launch(share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-20"></span>
<span id="cb22-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interpretation = 'default'</span></span>
<span id="cb22-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enable_queue = True </span></span>
<span id="cb22-23"></span>
<span id="cb22-24"></span>
<span id="cb22-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def greet(name):</span></span>
<span id="cb22-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return "Hello " + name + "!!"</span></span>
<span id="cb22-27"></span>
<span id="cb22-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iface = gr.Interface(fn=greet, inputs="text", outputs="text")</span></span>
<span id="cb22-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iface.launch()</span></span></code></pre></div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://huggingface.co/spaces/mozartfish/picasso_or_matisse">Picasso or Mattise Gradio + Hugging Face Spaces Application</a></li>
<li><a href="https://course.fast.ai/Lessons/lesson2.html">FastAI Lesson 2</a></li>
<li><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/02_production.ipynb">FastAI Chapter 2</a></li>
<li><a href="https://www.tanishq.ai/blog/posts/2021-11-16-gradio-huggingface.html">Gradio + Hugging Face Spaces: A Tutorial</a></li>
<li><a href="https://www.youtube.com/watch?v=8X4u9sca3Io">How to Set Up an SSH Key(GitHub, Hugging Face Spaces)</a></li>
<li><a href="https://huggingface.co/spaces">Hugging Face Spaces</a></li>
<li><a href="https://www.gradio.app/">Gradio</a></li>
<li><a href="https://www.gradio.app/docs/interface">Gradio docs</a></li>
<li><a href="https://docs.fast.ai/">fastai docs</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson2/fastai-lesson2.html</guid>
  <pubDate>Thu, 30 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 1: Getting Started</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1.html</link>
  <description><![CDATA[ 




<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this lesson, Jeremy walks through a bird classification example which back in 2015 was considered the bleeding edge of state of the art. 8 years later, it’s hard to believe that I can run this on my own local machine. Even though my training is in computer science, I found some of the definitions and the code in this lesson challenging which is where Chapter 1 was really helpful. I would strongly recommend checking out the definitions in this chapter because they are still used today when talking about more advanced models like GPT-4.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<ul>
<li><p><strong>Machine Learning</strong> - The training of programs developed by teaching a computer learn from experience rather than coding the individual steps</p></li>
<li><p><strong>Deep Learning</strong> - A computer technique that uses layers of neural networks to extract and transform data. Neural networks layers are trained by algorithms that minimize their errors and improve their accuracy. This is how a network learns to perform a specific task. Deep learning is a sub-discipline of <code>machine learning</code>.</p></li>
<li><p><strong>Dataset</strong> - A bunch of data ie. images, sounds, text, files or anything else.</p></li>
<li><p><strong>Label</strong> - The data we’re trying to predict ie. dog or cat.</p></li>
<li><p><strong>Independent Variable</strong> - Data that does not include labels</p></li>
<li><p><strong>Dependent Variable</strong> - the correct label ie. dog or cat. Also called <strong>targets.</strong></p></li>
<li><p><strong>Architecture</strong> - The structure of the model we’re trying to fit. A mathematical function that we’re passing the input data and parameters to.</p></li>
<li><p><strong>Parameters</strong> - The values in the model that change what task it can do and are updated through model training. In Arthur Samuel’s definitions the synonym for parameters is weights which has a different meaning in modern deep learning.</p></li>
<li><p><strong>Parameter(Weight) Assignment</strong> - Particular choice of values for parameters.</p></li>
<li><p><strong>Weights</strong> - A particular type of model parameter.</p></li>
<li><p><strong>Fit</strong> - Update the model parameters such that the predictions of the model using the input data match the target labels.</p></li>
<li><p><strong>Train</strong> - Synoym for fit.</p></li>
<li><p><strong>Pretrained Model</strong> - A model that has already been trained, generally using a large dataset and will be fine-tuned ie. resnet class of models.</p></li>
<li><p><strong>Fine-Tune</strong> - Update a pretrained model for a different task.</p></li>
<li><p><strong>Epoch</strong> - One complete pass through the input data.</p></li>
<li><p><strong>Loss</strong> - A measure of how good the model is, chosen to drive training via <code>Stochastic Gradient Descent (SGD)</code>.</p></li>
<li><p><strong>Metric</strong> - A measurement of how good the model is, using the validation set, chosen for human consumption.</p></li>
<li><p><strong>Validation Set</strong> - A set of data held out from training, used only for measuring how good the model is.</p></li>
<li><p><strong>Training Set</strong> - The data used for fitting the model; does not include any data from the validation set.</p></li>
<li><p><strong>Overfitting</strong> - Training a model in such a way that it remembers specific features of the input data rather than generalizing.</p></li>
<li><p><strong>Convolutional Neural Network (CNN)</strong> - A type of neural network that works particularly well for computer vision tasks.</p></li>
<li><p><strong>Transfer Learning</strong> - Using a pretrained model for a task different to what it was originally trained for.</p></li>
<li><p><strong>Head Layer</strong> - When using a pretrained model, replace the last layer with one or more layers with randomized weights of an appropriate size for the dataset you are working with. This customizes a model specifically for your task when using a pretrained model.</p></li>
</ul>
</section>
<section id="limitations-of-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="limitations-of-machine-learning">Limitations of Machine Learning</h2>
<ol type="1">
<li>A model cannot be created without data</li>
<li>A model can only learn to operate on patterns seen in input data used to train it</li>
<li>This learning approach only creates <code>predictions</code> <strong>not</strong> <code>recommend actions</code></li>
<li>We need <code>labels</code> + <code>data</code> (pictures of dogs and cats that have labels saying which ones are dogs and which ones are cats)</li>
</ol>
</section>
<section id="is-it-a-bird-example" class="level2">
<h2 class="anchored" data-anchor-id="is-it-a-bird-example">Is It a Bird? Example</h2>
<p>The following code in this example is created and written by Jeremy Howard and FastAI as found in the example <a href="https://www.kaggle.com/code/jhoward/is-it-a-bird-creating-a-model-from-your-own-data">Is it a bird? Creating a model from your own data</a>. My modification was adding comments for myself to the data block section so that I could understand what each part of the datablock is doing.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:05:02.130923Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:05:02.130165Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:05:18.134163Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:05:18.132504Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:05:02.130893Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os </span>
<span id="cb1-2">iskaggle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_KERNEL_RUN_TYPE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> iskaggle:</span>
<span id="cb1-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai duckduckgo_search</span></code></pre></div>
</div>
<section id="step-1-gather-data" class="level3">
<h3 class="anchored" data-anchor-id="step-1-gather-data">Step 1: Gather Data</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:11:11.575122Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:11:11.574696Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:11:11.933428Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:11:11.932692Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:11:11.575080Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ddg_images </span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function for searching for images </span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> L(ddg_images(term, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:11:50.875794Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:11:50.875301Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:11:51.988151Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:11:51.987179Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:11:50.875763Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'bird photos'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'https://images.alphacoders.com/492/492674.jpg'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:13:07.435284Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:13:07.434751Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:13:15.880636Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:13:15.879720Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:13:07.435241Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url </span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb7-3">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span></span>
<span id="cb7-4">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb7-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb7-7"></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version &gt;=1.16.5 and &lt;1.23.0 is required for this version of SciPy (detected version 1.24.3
  warnings.warn(f"A NumPy version &gt;={np_minversion} and &lt;{np_maxversion}"</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:15:07.714114Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:15:07.713714Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:15:09.048645Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:15:09.047656Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:15:07.714085Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>, </span>
<span id="cb9-2">             show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-3">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photos'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1_files/figure-html/cell-6-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:19:42.776156Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:19:42.775040Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:21:22.118506Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:21:22.117220Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:19:42.776115Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird'</span></span>
<span id="cb12-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird_or_not'</span>)</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep </span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb12-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb12-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> photo'</span>))</span>
<span id="cb12-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb12-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sun photo'</span>))</span>
<span id="cb12-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb12-12">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> shade photo'</span>))</span>
<span id="cb12-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb12-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photo'
Searching for 'forest sun photo'
Searching for 'forest shade photo'
Searching for 'bird photo'
Searching for 'bird sun photo'
Searching for 'bird shade photo'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
</div>
</section>
<section id="step-2-train-model" class="level3">
<h3 class="anchored" data-anchor-id="step-2-train-model">Step 2: Train Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:21:43.415508Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:21:43.415132Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:21:44.330428Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:21:44.329327Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:21:43.415478Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that failed to download properly </span></span>
<span id="cb15-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb15-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>3</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:24:10.522517Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:24:10.522169Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:24:15.181854Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:24:15.180708Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:24:10.522489Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training set, validation set </span></span>
<span id="cb17-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb17-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify input type(image), output type(category aka label)</span></span>
<span id="cb17-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb17-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb17-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into 80% training data, and 20% validation data</span></span>
<span id="cb17-7">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the label </span></span>
<span id="cb17-9">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize and resize all images to 192 x 192</span></span>
<span id="cb17-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb17-12">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb17-13"></span>
<span id="cb17-14">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:29:36.801651Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:29:36.800809Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:29:42.341723Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:29:42.340624Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:29:36.801604Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train resnet on the data</span></span>
<span id="cb18-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb18-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.744936</td>
<td>0.402673</td>
<td>0.156250</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.178611</td>
<td>0.097689</td>
<td>0.031250</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.117756</td>
<td>0.136063</td>
<td>0.031250</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.079709</td>
<td>0.154602</td>
<td>0.031250</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="step-3-test-model" class="level3">
<h3 class="anchored" data-anchor-id="step-3-test-model">Step 3: Test Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:29:43.986183Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:29:43.985792Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:29:44.105360Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:29:44.104307Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:29:43.986152Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">is_bird,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span>))</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_bird<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a bird: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a : bird.
Probability it's a bird: 0.9996</code></pre>
</div>
</div>
</section>
</section>
<section id="picasso-cubist-painting-or-georges-braque-cubist-painting" class="level2">
<h2 class="anchored" data-anchor-id="picasso-cubist-painting-or-georges-braque-cubist-painting">Picasso Cubist Painting or Georges Braque Cubist Painting</h2>
<p>This code was written by me based on Jeremy and FastAI’s bird example. I picked this example because of an interest in art, the similarity between Picasso and Braque’s cubist art, and the question of whether a computer would be able to tell the difference between the two artists when shown a random cubist painting by either Picasso or Braque.</p>
<section id="step-1-gather-data-1" class="level3">
<h3 class="anchored" data-anchor-id="step-1-gather-data-1">Step 1: Gather Data</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:32:56.351463Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:32:56.351013Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:32:57.031947Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:32:57.031020Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:32:56.351430Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso Cubist Painting'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso Cubist Painting'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'http://www.baaqii.com/promanage/productimage/OP/OP0288.jpg'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:33:24.105350Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:33:24.104946Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:33:24.810112Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:33:24.809127Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:33:24.105319Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url </span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb25-3">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span></span>
<span id="cb25-4">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb25-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb25-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:34:37.957206Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:34:37.956156Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:34:38.684411Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:34:38.683411Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:34:37.957157Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Georges Braque Cubist Painting'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb26-2">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'braque.jpg'</span>, </span>
<span id="cb26-3">             show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-4">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'braque.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'George Braque Cubist Painting'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:39:27.385024Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:39:27.384560Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:40:49.816235Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:40:49.814961Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:39:27.384989Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Georges Braque'</span></span>
<span id="cb28-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso_or_braque'</span>)</span>
<span id="cb28-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep </span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb28-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb28-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb28-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> cubist painting'</span>))</span>
<span id="cb28-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb28-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fauvist painting'</span>))</span>
<span id="cb28-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb28-12">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> geometric painting'</span>))</span>
<span id="cb28-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb28-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso cubist painting'
Searching for 'Pablo Picasso fauvist painting'
Searching for 'Pablo Picasso geometric painting'
Searching for 'George Braque cubist painting'
Searching for 'George Braque fauvist painting'
Searching for 'George Braque geometric painting'</code></pre>
</div>
</div>
</section>
<section id="step-2-train-model-1" class="level3">
<h3 class="anchored" data-anchor-id="step-2-train-model-1">Step 2: Train Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:40:49.819938Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:40:49.819467Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:40:50.977727Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:40:50.976477Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:40:49.819897Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that failed to download properly </span></span>
<span id="cb30-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb30-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb30-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>2</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:40:50.979956Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:40:50.979488Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:40:51.979411Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:40:51.978394Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:40:50.979914Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training set, validation set </span></span>
<span id="cb32-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb32-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify input type(image), output type(category aka label)</span></span>
<span id="cb32-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb32-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb32-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into 80% training data, and 20% validation data</span></span>
<span id="cb32-7">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the label </span></span>
<span id="cb32-9">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb32-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize and resize all images to 192 x 192</span></span>
<span id="cb32-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb32-12">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb32-13"></span>
<span id="cb32-14">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:43:02.501100Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:43:02.499961Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:43:10.282060Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:43:10.280941Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:43:02.501063Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train resnet on the data</span></span>
<span id="cb33-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb33-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.963409</td>
<td>0.409861</td>
<td>0.157143</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.281930</td>
<td>0.232642</td>
<td>0.057143</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.227495</td>
<td>0.084337</td>
<td>0.028571</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.163790</td>
<td>0.051675</td>
<td>0.014286</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="step-3-test-model-1" class="level3">
<h3 class="anchored" data-anchor-id="step-3-test-model-1">Step 3: Test Model</h3>
<p>There is something wrong here because the probability is incorrect. I can’t figure out whether I messed up in the data phase, architecture choice (resnet34 instead of resnet18), or a programming mistake. My guess is that the program should have a probability of choosing the right result around the same percentage as the bird example. If anyone knows what the issue might be, please reach out.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:47:00.809792Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:47:00.808871Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:47:00.889913Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:47:00.888745Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:47:00.809752Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">is_picasso,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span>))</span>
<span id="cb34-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_picasso<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb34-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a picasso: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: Pablo Picasso.
Probability it's a picasso: 0.0006</code></pre>
</div>
</div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://course.fast.ai/Lessons/lesson1.html">FastAI Lesson 1</a></li>
<li><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/01_intro.ipynb">FastAI Chapter 1</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/jupyter-notebook-101">Jupyter Notebook 101</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/is-it-a-bird-creating-a-model-from-your-own-data">Is it a bird? Creating a model from your own data</a></li>
<li><a href="https://docs.fast.ai/tutorial.vision.html">fastai computer vision tutorial</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson1/fastai-lesson1.html</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 0: How to FastAI</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson0/index.html</link>
  <description><![CDATA[ 




<p>I’ve recently started <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> to learn about machine learning. To hold myself accountable and finish the course I am going to try to write a blog post for every video in the series starting with <code>Lesson 0</code>. By doing this my goal is to not only learn about deep learning and track my progress but reinforce my learning by trying to explain what I’ve learned for people new to machine learning like me. <a href="https://www.youtube.com/watch?v=gGxe2mN3kAg">Lesson 0</a> isn’t officially presented in the course until <a href="https://course.fast.ai/Lessons/lesson3.html">Lesson 3</a> but it provides valuable advice for how to complete FastAI and actually learn how to write deep learning code.</p>
<p>Lesson 0 doesn’t have any code examples or notebooks but I took Jeremy’s advice about blogging and interacting with the community by setting up this Quarto blog as the Lesson 0 project. Lesson 0 was created in 2020 <em>before</em> <strong>Twitter</strong> became <strong>X</strong> and closed off to people who didn’t have an account. Since then, some of the ML community and other academic communities in CS have migrated to <code>Discord</code> , <code>Mastodon</code>, and <code>Bluesky</code>. I’d recommend checking out the <code>FastAI Forums</code>, <code>FastAI Discord</code>, and <code>BlueSky</code>.</p>
<section id="jeremy-howards-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremy-howards-advice">Jeremy Howard’s Advice</h2>
<ol type="1">
<li>Commit to finish the course</li>
<li>Try to finish one really good project to show off what you’ve learned in the course</li>
<li>Share and blog about your work</li>
</ol>
</section>
<section id="how-to-watch-a-fastai-lesson" class="level2">
<h2 class="anchored" data-anchor-id="how-to-watch-a-fastai-lesson">How to Watch A FastAI Lesson</h2>
<p>This advice was presented by Jeremy Howard in <code>Lesson 0</code></p>
<ol type="1">
<li><p>Watch FastAI Lecture</p></li>
<li><p>Run notebooks and code presented in the lecture and experiment with code</p></li>
<li><p>Reproduce notebook from a clean notebook (Jeremy provides clean notebooks on github)</p></li>
<li><p>Repeat with a different dataset (could be personal project)</p></li>
</ol>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><p><a href="https://www.youtube.com/watch?v=gGxe2mN3kAg">FastAI Lesson 0</a></p></li>
<li><p><a href="https://christinemcleavey.com/learning-about-deep-learning/">Christine Mcleavey’s Blog</a></p></li>
<li><p><a href="https://quarto.org/">Quarto</a></p></li>
<li><p><a href="https://bsky.app/">Bluesky</a></p></li>
<li><p><a href="https://forums.fast.ai/">fast.ai Forum</a></p></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson0/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is my first blog post. Welcome!</p>
<p>I decided to start a blog inspired by Jeremy Howard’s Lecture 0 from the FastAI Course. Jeremy and FastAI used to maintain a blogging and publication tool called FastPages but transitioned to a new publication system called Quarto.</p>
<p>This blog is written in Quarto. Why Quarto? In the past I had attempted to used Medium and Substack but never fully spent the time to learn the tools to write a blog post. I decided to learn and publish with Quarto because of its capabilities to produce high quality scientific and technical documents with the ability to embed code and visualizations for review. Another reason why I like Quarto is how easy it is to write markdown and publish a blog.</p>
<p>Going forward I hope to use Quarto to write about my programming projects, thoughts,and improve my writing.</p>



 ]]></description>
  <category>news</category>
  <guid>https://mozartfish.github.io/blog/posts/welcome/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="https://mozartfish.github.io/blog/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
