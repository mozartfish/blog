<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pranav Rajan&#39;s Blog</title>
<link>https://mozartfish.github.io/blog/index.html</link>
<atom:link href="https://mozartfish.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>This is a blog</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 18 Dec 2023 08:00:00 GMT</lastBuildDate>
<item>
  <title>FastAI Lesson 3: Neural Network Foundations</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3.html</link>
  <description><![CDATA[ 




<section id="announcements" class="level2">
<h2 class="anchored" data-anchor-id="announcements">Announcements</h2>
<p>Finally back after a long hiatus. I took a break from posting and FASTAI to try Advent of Code and get back to interview prep but I’m back. Normally I only write a single summary for a blog post but this time I’m writing two summaries because Chapter 4 of the book goes deeper into the foundations of neural networks than the lecture video.</p>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>All of this code was written by Jeremy Howard and the authors of the FastAI book. My modification to their code was adding print statements and comments to understand what each line of code was doing.</p>
</section>
<section id="summary---fastai-lesson-3-video" class="level2">
<h2 class="anchored" data-anchor-id="summary---fastai-lesson-3-video">Summary - FastAI Lesson 3 Video</h2>
<p>In this lesson, Jeremy gives a high level overview of pytorch, gradient descent and the evolution of models. Most of the video focuses on approximating a quadratic equation and building the intuition towards how a neural network works. Towards the end of the video, Jeremy introduces the Titanic dataset and how to do some basic modeling with excel.</p>
</section>
<section id="summary-fastai-chapter-4" class="level2">
<h2 class="anchored" data-anchor-id="summary-fastai-chapter-4">Summary FastAI Chapter 4</h2>
<p>In Chapter 4, the FastAI book authors use the MNIST dataset as a case study to understand how pytorch and the fastai library work under the hood. I found this chapter to be a mind bender because I struggled to wrap my head around the concept of a tensor and the kinds of operations you can do on a tensor. Another concept I struggled with was the meaning of rank and dimension of tensors which are not the same as the meaning of rank and dimension in linear algebra and physics (will go more into this later). By the end of this chapter, I understood the following concepts:</p>
<ul>
<li>what a tensor represents and performing operations on a tensor</li>
<li>how to set up a classifier using pytorch</li>
<li>how a training loop, optimizer, batch work in pytorch and fastai</li>
<li>the operations and functions that fastai provides a wrapper on top of</li>
</ul>
<p>I do agree with Jeremy that this book chapter might scare people away because the jargon combined with the mathematical concepts but its definitely worth spending a few days getting through since you develop a deeper understanding of pytorch and the deep learning process.</p>
</section>
<section id="jeremy-howards-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremy-howards-advice">Jeremy Howard’s Advice</h2>
<p>Jeremy provides some really good insights and advice in the lecture video not captured in the book or kaggle notebooks. This is my summary of the advice:</p>
<ul>
<li><p>Model: Mathematical function consisting of a Matrix Multiply operation + nonlinearity (RELU, Sigmoid etc)</p></li>
<li><p>Things to thing about when picking a class of model for a problem we’re trying to solve:</p>
<ol type="1">
<li>How fast is the model</li>
<li>How much memory does it consume</li>
<li>How accurate is it</li>
</ol></li>
<li><p>Models fit functions to data and try to recognize patterns in data that we give it</p></li>
</ul>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load libraries and imports</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai duckduckgo_search</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import fastai libraries</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update grayscale colormap for matplotlib</span></span>
<span id="cb1-14">matplotlib.rc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span></code></pre></div>
</div>
</section>
<section id="mnist-dataset" class="level2">
<h2 class="anchored" data-anchor-id="mnist-dataset">MNIST Dataset</h2>
<p>To show how neural networks work, the FastAI authors use the MNIST dataset as a case study. MNIST is a dataset containing handwritten digits collected by NIST (National Institute of Standards and Technology) and turned into dataset by Yann Lecun and his colleagues. For more information about Lecun and MNIST I would recommend reading the book chapter.</p>
<p>The MNIST dataset follows traditional machine learning dataset layouts: Training Data and Validation Data each containing images associated with a particular digit between 0-9.</p>
<div class="cell" data-outputid="0ec884f7-a259-41ae-ff88-afcd8bd7f2ce" data-execution_count="41">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LOAD MNIST DATA</span></span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.MNIST_SAMPLE)</span>
<span id="cb2-3">Path.BASE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Contents of MNIST DATA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ls()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Training Data</span></span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MNIST Training Data Directory Contents: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ls()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Training Data for 3s and 7s in sorted order</span></span>
<span id="cb2-10">threes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb2-11">sevens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Sorted Training Data for 3: {threes}")</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training Data Example</span></span>
<span id="cb2-15">im3_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-16">im3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(im3_path)</span>
<span id="cb2-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Image of 3 from 3 training data set"</span>)</span>
<span id="cb2-18">im3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Contents of MNIST DATA: [Path('train'), Path('valid'), Path('labels.csv')]
MNIST Training Data Directory Contents: [Path('train/7'), Path('train/3')]
Test Image of 3 from 3 training data set</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="41">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-3-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="representing-images-as-numbers" class="level2">
<h2 class="anchored" data-anchor-id="representing-images-as-numbers">Representing Images as Numbers</h2>
<p>Images are represented on computers as an array of pixels where each index contains a list of 3 numbers between 0-255 corresponding to a particular color according to RGB. Assembling all of these colors together we get an image.</p>
<p>The MNIST images are represented differently: each index in the image array contains a number between 0-255 where 0 represents white and 255 black. All other values between 0-255 represent a different shade of gray. A unique digit image in the MNIST data is then defined by the black and gray pixels that together outline and define the digit. The size of an image in the MNIST data is 28 x 28 which is 784 pixels in the Image Array.</p>
<p>In the following examples, [4:10, 4:10] means the following: request rows from index 4 (included) to 10(not included) and the same for the columns. Numpy and Pytorch index from top to bottom and left to right.</p>
<p>In the image slice below, we select a part of the digit with just the top part and then color code the slice based on the values in the slice with their mapping in the gray scale (0-255) where 0 represents white and 255 black.</p>
<div class="cell" data-outputid="bdbaca93-1fb1-4be9-e438-f781d92b2b1d" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST image dimensions are 28 x 28 = 784 pixel array</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"im3 represented as an array of numbers using numpy array"</span>)</span>
<span id="cb4-3">array(im3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>im3 represented as an array of numbers using numpy array</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  29, 150, 195, 254,
        255, 254, 176, 193, 150,  96,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  48, 166, 224, 253, 253, 234,
        196, 253, 253, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,  93, 244, 249, 253, 187,  46,  10,   8,
          4,  10, 194, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0, 107, 253, 253, 230,  48,   0,   0,   0,
          0,   0, 192, 253, 253, 156,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   3,  20,  20,  15,   0,   0,   0,   0,
          0,  43, 224, 253, 245,  74,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0, 249, 253, 245, 126,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14, 101,
        223, 253, 248, 124,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 166, 239, 253,
        253, 253, 187,  30,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  16, 248, 250, 253,
        253, 253, 253, 232, 213, 111,   2,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  43,  98,
         98, 208, 253, 253, 253, 253, 187,  22,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   9,  51, 119, 253, 253, 253,  76,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   1, 183, 253, 253, 139,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0, 182, 253, 253, 104,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,  85, 249, 253, 253,  36,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,  60, 214, 253, 253, 173,  11,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,  98, 247, 253, 253, 226,   9,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  42,
        150, 252, 253, 253, 233,  53,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,  42, 115,  42,  60, 115, 159, 240,
        253, 253, 250, 175,  25,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 187, 253, 253, 253, 253, 253, 253,
        253, 197,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0, 103, 253, 253, 253, 253, 253, 232,
         67,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0]], dtype=uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="248d1938-6496-4b0e-b5e5-20d61e9d2586" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slice of im3</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [4:10, 4:10] - get rows and columns starting from 4(included) to 10 (excluded)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numpy Array representation</span></span>
<span id="cb7-4">array(im3)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([[  0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,  29],
       [  0,   0,   0,  48, 166, 224],
       [  0,  93, 244, 249, 253, 187],
       [  0, 107, 253, 253, 230,  48],
       [  0,   3,  20,  20,  15,   0]], dtype=uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="71ebd6b7-d056-42e3-ef9a-0340934ef9bd" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST image dimensions are 28 x 28 = 784 pixel array</span></span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"im3 represented as an array of numbers using tensors"</span>)</span>
<span id="cb9-3">tensor(im3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>im3 represented as an array of numbers using tensors</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>tensor([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  29, 150, 195, 254, 255,
         254, 176, 193, 150,  96,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,  48, 166, 224, 253, 253, 234, 196,
         253, 253, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,  93, 244, 249, 253, 187,  46,  10,   8,   4,
          10, 194, 253, 253, 233,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0, 107, 253, 253, 230,  48,   0,   0,   0,   0,
           0, 192, 253, 253, 156,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   3,  20,  20,  15,   0,   0,   0,   0,   0,
          43, 224, 253, 245,  74,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         249, 253, 245, 126,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  14, 101, 223,
         253, 248, 124,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  11, 166, 239, 253, 253,
         253, 187,  30,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,  16, 248, 250, 253, 253,
         253, 253, 232, 213, 111,   2,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  43,  98,  98,
         208, 253, 253, 253, 253, 187,  22,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           9,  51, 119, 253, 253, 253,  76,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   1, 183, 253, 253, 139,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0, 182, 253, 253, 104,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,  85, 249, 253, 253,  36,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,  60, 214, 253, 253, 173,  11,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          98, 247, 253, 253, 226,   9,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  42, 150,
         252, 253, 253, 233,  53,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,  42, 115,  42,  60, 115, 159, 240, 253,
         253, 250, 175,  25,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0, 187, 253, 253, 253, 253, 253, 253, 253,
         197,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0, 103, 253, 253, 253, 253, 253, 232,  67,
           1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]],
       dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="2c8afa5e-3feb-4003-82b6-b709efcb2ee4" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slice of im3</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [4:10, 4:10] - get rows and columns starting from 4(included) to 10 (excluded)</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor representation</span></span>
<span id="cb12-4">tensor(im3)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>tensor([[  0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,  29],
        [  0,   0,   0,  48, 166, 224],
        [  0,  93, 244, 249, 253, 187],
        [  0, 107, 253, 253, 230,  48],
        [  0,   3,  20,  20,  15,   0]], dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="a7c0d0d8-b2a0-4bf1-a913-4bb6d67e42b4" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice data to obtain the top part of the number and color code data to show digit outline</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice data rows: 4(included)-15(excluded)</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice data columns: 4(included)-22(excluded)</span></span>
<span id="cb14-4">im3_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(im3)</span>
<span id="cb14-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(im3_t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>])</span>
<span id="cb14-6">df.style.set_properties(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font-size'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6pt'</span>}).background_gradient(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greys'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">


<table id="T_9106b" class="dataframe table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_9106b_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">0</th>
<th id="T_9106b_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">1</th>
<th id="T_9106b_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">2</th>
<th id="T_9106b_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">3</th>
<th id="T_9106b_level0_col4" class="col_heading level0 col4" data-quarto-table-cell-role="th">4</th>
<th id="T_9106b_level0_col5" class="col_heading level0 col5" data-quarto-table-cell-role="th">5</th>
<th id="T_9106b_level0_col6" class="col_heading level0 col6" data-quarto-table-cell-role="th">6</th>
<th id="T_9106b_level0_col7" class="col_heading level0 col7" data-quarto-table-cell-role="th">7</th>
<th id="T_9106b_level0_col8" class="col_heading level0 col8" data-quarto-table-cell-role="th">8</th>
<th id="T_9106b_level0_col9" class="col_heading level0 col9" data-quarto-table-cell-role="th">9</th>
<th id="T_9106b_level0_col10" class="col_heading level0 col10" data-quarto-table-cell-role="th">10</th>
<th id="T_9106b_level0_col11" class="col_heading level0 col11" data-quarto-table-cell-role="th">11</th>
<th id="T_9106b_level0_col12" class="col_heading level0 col12" data-quarto-table-cell-role="th">12</th>
<th id="T_9106b_level0_col13" class="col_heading level0 col13" data-quarto-table-cell-role="th">13</th>
<th id="T_9106b_level0_col14" class="col_heading level0 col14" data-quarto-table-cell-role="th">14</th>
<th id="T_9106b_level0_col15" class="col_heading level0 col15" data-quarto-table-cell-role="th">15</th>
<th id="T_9106b_level0_col16" class="col_heading level0 col16" data-quarto-table-cell-role="th">16</th>
<th id="T_9106b_level0_col17" class="col_heading level0 col17" data-quarto-table-cell-role="th">17</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_9106b_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">0</td>
<td id="T_9106b_row0_col0" class="data row0 col0">0</td>
<td id="T_9106b_row0_col1" class="data row0 col1">0</td>
<td id="T_9106b_row0_col2" class="data row0 col2">0</td>
<td id="T_9106b_row0_col3" class="data row0 col3">0</td>
<td id="T_9106b_row0_col4" class="data row0 col4">0</td>
<td id="T_9106b_row0_col5" class="data row0 col5">0</td>
<td id="T_9106b_row0_col6" class="data row0 col6">0</td>
<td id="T_9106b_row0_col7" class="data row0 col7">0</td>
<td id="T_9106b_row0_col8" class="data row0 col8">0</td>
<td id="T_9106b_row0_col9" class="data row0 col9">0</td>
<td id="T_9106b_row0_col10" class="data row0 col10">0</td>
<td id="T_9106b_row0_col11" class="data row0 col11">0</td>
<td id="T_9106b_row0_col12" class="data row0 col12">0</td>
<td id="T_9106b_row0_col13" class="data row0 col13">0</td>
<td id="T_9106b_row0_col14" class="data row0 col14">0</td>
<td id="T_9106b_row0_col15" class="data row0 col15">0</td>
<td id="T_9106b_row0_col16" class="data row0 col16">0</td>
<td id="T_9106b_row0_col17" class="data row0 col17">0</td>
</tr>
<tr class="even">
<td id="T_9106b_level0_row1" class="row_heading level0 row1" data-quarto-table-cell-role="th">1</td>
<td id="T_9106b_row1_col0" class="data row1 col0">0</td>
<td id="T_9106b_row1_col1" class="data row1 col1">0</td>
<td id="T_9106b_row1_col2" class="data row1 col2">0</td>
<td id="T_9106b_row1_col3" class="data row1 col3">0</td>
<td id="T_9106b_row1_col4" class="data row1 col4">0</td>
<td id="T_9106b_row1_col5" class="data row1 col5">29</td>
<td id="T_9106b_row1_col6" class="data row1 col6">150</td>
<td id="T_9106b_row1_col7" class="data row1 col7">195</td>
<td id="T_9106b_row1_col8" class="data row1 col8">254</td>
<td id="T_9106b_row1_col9" class="data row1 col9">255</td>
<td id="T_9106b_row1_col10" class="data row1 col10">254</td>
<td id="T_9106b_row1_col11" class="data row1 col11">176</td>
<td id="T_9106b_row1_col12" class="data row1 col12">193</td>
<td id="T_9106b_row1_col13" class="data row1 col13">150</td>
<td id="T_9106b_row1_col14" class="data row1 col14">96</td>
<td id="T_9106b_row1_col15" class="data row1 col15">0</td>
<td id="T_9106b_row1_col16" class="data row1 col16">0</td>
<td id="T_9106b_row1_col17" class="data row1 col17">0</td>
</tr>
<tr class="odd">
<td id="T_9106b_level0_row2" class="row_heading level0 row2" data-quarto-table-cell-role="th">2</td>
<td id="T_9106b_row2_col0" class="data row2 col0">0</td>
<td id="T_9106b_row2_col1" class="data row2 col1">0</td>
<td id="T_9106b_row2_col2" class="data row2 col2">0</td>
<td id="T_9106b_row2_col3" class="data row2 col3">48</td>
<td id="T_9106b_row2_col4" class="data row2 col4">166</td>
<td id="T_9106b_row2_col5" class="data row2 col5">224</td>
<td id="T_9106b_row2_col6" class="data row2 col6">253</td>
<td id="T_9106b_row2_col7" class="data row2 col7">253</td>
<td id="T_9106b_row2_col8" class="data row2 col8">234</td>
<td id="T_9106b_row2_col9" class="data row2 col9">196</td>
<td id="T_9106b_row2_col10" class="data row2 col10">253</td>
<td id="T_9106b_row2_col11" class="data row2 col11">253</td>
<td id="T_9106b_row2_col12" class="data row2 col12">253</td>
<td id="T_9106b_row2_col13" class="data row2 col13">253</td>
<td id="T_9106b_row2_col14" class="data row2 col14">233</td>
<td id="T_9106b_row2_col15" class="data row2 col15">0</td>
<td id="T_9106b_row2_col16" class="data row2 col16">0</td>
<td id="T_9106b_row2_col17" class="data row2 col17">0</td>
</tr>
<tr class="even">
<td id="T_9106b_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">3</td>
<td id="T_9106b_row3_col0" class="data row3 col0">0</td>
<td id="T_9106b_row3_col1" class="data row3 col1">93</td>
<td id="T_9106b_row3_col2" class="data row3 col2">244</td>
<td id="T_9106b_row3_col3" class="data row3 col3">249</td>
<td id="T_9106b_row3_col4" class="data row3 col4">253</td>
<td id="T_9106b_row3_col5" class="data row3 col5">187</td>
<td id="T_9106b_row3_col6" class="data row3 col6">46</td>
<td id="T_9106b_row3_col7" class="data row3 col7">10</td>
<td id="T_9106b_row3_col8" class="data row3 col8">8</td>
<td id="T_9106b_row3_col9" class="data row3 col9">4</td>
<td id="T_9106b_row3_col10" class="data row3 col10">10</td>
<td id="T_9106b_row3_col11" class="data row3 col11">194</td>
<td id="T_9106b_row3_col12" class="data row3 col12">253</td>
<td id="T_9106b_row3_col13" class="data row3 col13">253</td>
<td id="T_9106b_row3_col14" class="data row3 col14">233</td>
<td id="T_9106b_row3_col15" class="data row3 col15">0</td>
<td id="T_9106b_row3_col16" class="data row3 col16">0</td>
<td id="T_9106b_row3_col17" class="data row3 col17">0</td>
</tr>
<tr class="odd">
<td id="T_9106b_level0_row4" class="row_heading level0 row4" data-quarto-table-cell-role="th">4</td>
<td id="T_9106b_row4_col0" class="data row4 col0">0</td>
<td id="T_9106b_row4_col1" class="data row4 col1">107</td>
<td id="T_9106b_row4_col2" class="data row4 col2">253</td>
<td id="T_9106b_row4_col3" class="data row4 col3">253</td>
<td id="T_9106b_row4_col4" class="data row4 col4">230</td>
<td id="T_9106b_row4_col5" class="data row4 col5">48</td>
<td id="T_9106b_row4_col6" class="data row4 col6">0</td>
<td id="T_9106b_row4_col7" class="data row4 col7">0</td>
<td id="T_9106b_row4_col8" class="data row4 col8">0</td>
<td id="T_9106b_row4_col9" class="data row4 col9">0</td>
<td id="T_9106b_row4_col10" class="data row4 col10">0</td>
<td id="T_9106b_row4_col11" class="data row4 col11">192</td>
<td id="T_9106b_row4_col12" class="data row4 col12">253</td>
<td id="T_9106b_row4_col13" class="data row4 col13">253</td>
<td id="T_9106b_row4_col14" class="data row4 col14">156</td>
<td id="T_9106b_row4_col15" class="data row4 col15">0</td>
<td id="T_9106b_row4_col16" class="data row4 col16">0</td>
<td id="T_9106b_row4_col17" class="data row4 col17">0</td>
</tr>
<tr class="even">
<td id="T_9106b_level0_row5" class="row_heading level0 row5" data-quarto-table-cell-role="th">5</td>
<td id="T_9106b_row5_col0" class="data row5 col0">0</td>
<td id="T_9106b_row5_col1" class="data row5 col1">3</td>
<td id="T_9106b_row5_col2" class="data row5 col2">20</td>
<td id="T_9106b_row5_col3" class="data row5 col3">20</td>
<td id="T_9106b_row5_col4" class="data row5 col4">15</td>
<td id="T_9106b_row5_col5" class="data row5 col5">0</td>
<td id="T_9106b_row5_col6" class="data row5 col6">0</td>
<td id="T_9106b_row5_col7" class="data row5 col7">0</td>
<td id="T_9106b_row5_col8" class="data row5 col8">0</td>
<td id="T_9106b_row5_col9" class="data row5 col9">0</td>
<td id="T_9106b_row5_col10" class="data row5 col10">43</td>
<td id="T_9106b_row5_col11" class="data row5 col11">224</td>
<td id="T_9106b_row5_col12" class="data row5 col12">253</td>
<td id="T_9106b_row5_col13" class="data row5 col13">245</td>
<td id="T_9106b_row5_col14" class="data row5 col14">74</td>
<td id="T_9106b_row5_col15" class="data row5 col15">0</td>
<td id="T_9106b_row5_col16" class="data row5 col16">0</td>
<td id="T_9106b_row5_col17" class="data row5 col17">0</td>
</tr>
<tr class="odd">
<td id="T_9106b_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">6</td>
<td id="T_9106b_row6_col0" class="data row6 col0">0</td>
<td id="T_9106b_row6_col1" class="data row6 col1">0</td>
<td id="T_9106b_row6_col2" class="data row6 col2">0</td>
<td id="T_9106b_row6_col3" class="data row6 col3">0</td>
<td id="T_9106b_row6_col4" class="data row6 col4">0</td>
<td id="T_9106b_row6_col5" class="data row6 col5">0</td>
<td id="T_9106b_row6_col6" class="data row6 col6">0</td>
<td id="T_9106b_row6_col7" class="data row6 col7">0</td>
<td id="T_9106b_row6_col8" class="data row6 col8">0</td>
<td id="T_9106b_row6_col9" class="data row6 col9">0</td>
<td id="T_9106b_row6_col10" class="data row6 col10">249</td>
<td id="T_9106b_row6_col11" class="data row6 col11">253</td>
<td id="T_9106b_row6_col12" class="data row6 col12">245</td>
<td id="T_9106b_row6_col13" class="data row6 col13">126</td>
<td id="T_9106b_row6_col14" class="data row6 col14">0</td>
<td id="T_9106b_row6_col15" class="data row6 col15">0</td>
<td id="T_9106b_row6_col16" class="data row6 col16">0</td>
<td id="T_9106b_row6_col17" class="data row6 col17">0</td>
</tr>
<tr class="even">
<td id="T_9106b_level0_row7" class="row_heading level0 row7" data-quarto-table-cell-role="th">7</td>
<td id="T_9106b_row7_col0" class="data row7 col0">0</td>
<td id="T_9106b_row7_col1" class="data row7 col1">0</td>
<td id="T_9106b_row7_col2" class="data row7 col2">0</td>
<td id="T_9106b_row7_col3" class="data row7 col3">0</td>
<td id="T_9106b_row7_col4" class="data row7 col4">0</td>
<td id="T_9106b_row7_col5" class="data row7 col5">0</td>
<td id="T_9106b_row7_col6" class="data row7 col6">0</td>
<td id="T_9106b_row7_col7" class="data row7 col7">14</td>
<td id="T_9106b_row7_col8" class="data row7 col8">101</td>
<td id="T_9106b_row7_col9" class="data row7 col9">223</td>
<td id="T_9106b_row7_col10" class="data row7 col10">253</td>
<td id="T_9106b_row7_col11" class="data row7 col11">248</td>
<td id="T_9106b_row7_col12" class="data row7 col12">124</td>
<td id="T_9106b_row7_col13" class="data row7 col13">0</td>
<td id="T_9106b_row7_col14" class="data row7 col14">0</td>
<td id="T_9106b_row7_col15" class="data row7 col15">0</td>
<td id="T_9106b_row7_col16" class="data row7 col16">0</td>
<td id="T_9106b_row7_col17" class="data row7 col17">0</td>
</tr>
<tr class="odd">
<td id="T_9106b_level0_row8" class="row_heading level0 row8" data-quarto-table-cell-role="th">8</td>
<td id="T_9106b_row8_col0" class="data row8 col0">0</td>
<td id="T_9106b_row8_col1" class="data row8 col1">0</td>
<td id="T_9106b_row8_col2" class="data row8 col2">0</td>
<td id="T_9106b_row8_col3" class="data row8 col3">0</td>
<td id="T_9106b_row8_col4" class="data row8 col4">0</td>
<td id="T_9106b_row8_col5" class="data row8 col5">11</td>
<td id="T_9106b_row8_col6" class="data row8 col6">166</td>
<td id="T_9106b_row8_col7" class="data row8 col7">239</td>
<td id="T_9106b_row8_col8" class="data row8 col8">253</td>
<td id="T_9106b_row8_col9" class="data row8 col9">253</td>
<td id="T_9106b_row8_col10" class="data row8 col10">253</td>
<td id="T_9106b_row8_col11" class="data row8 col11">187</td>
<td id="T_9106b_row8_col12" class="data row8 col12">30</td>
<td id="T_9106b_row8_col13" class="data row8 col13">0</td>
<td id="T_9106b_row8_col14" class="data row8 col14">0</td>
<td id="T_9106b_row8_col15" class="data row8 col15">0</td>
<td id="T_9106b_row8_col16" class="data row8 col16">0</td>
<td id="T_9106b_row8_col17" class="data row8 col17">0</td>
</tr>
<tr class="even">
<td id="T_9106b_level0_row9" class="row_heading level0 row9" data-quarto-table-cell-role="th">9</td>
<td id="T_9106b_row9_col0" class="data row9 col0">0</td>
<td id="T_9106b_row9_col1" class="data row9 col1">0</td>
<td id="T_9106b_row9_col2" class="data row9 col2">0</td>
<td id="T_9106b_row9_col3" class="data row9 col3">0</td>
<td id="T_9106b_row9_col4" class="data row9 col4">0</td>
<td id="T_9106b_row9_col5" class="data row9 col5">16</td>
<td id="T_9106b_row9_col6" class="data row9 col6">248</td>
<td id="T_9106b_row9_col7" class="data row9 col7">250</td>
<td id="T_9106b_row9_col8" class="data row9 col8">253</td>
<td id="T_9106b_row9_col9" class="data row9 col9">253</td>
<td id="T_9106b_row9_col10" class="data row9 col10">253</td>
<td id="T_9106b_row9_col11" class="data row9 col11">253</td>
<td id="T_9106b_row9_col12" class="data row9 col12">232</td>
<td id="T_9106b_row9_col13" class="data row9 col13">213</td>
<td id="T_9106b_row9_col14" class="data row9 col14">111</td>
<td id="T_9106b_row9_col15" class="data row9 col15">2</td>
<td id="T_9106b_row9_col16" class="data row9 col16">0</td>
<td id="T_9106b_row9_col17" class="data row9 col17">0</td>
</tr>
<tr class="odd">
<td id="T_9106b_level0_row10" class="row_heading level0 row10" data-quarto-table-cell-role="th">10</td>
<td id="T_9106b_row10_col0" class="data row10 col0">0</td>
<td id="T_9106b_row10_col1" class="data row10 col1">0</td>
<td id="T_9106b_row10_col2" class="data row10 col2">0</td>
<td id="T_9106b_row10_col3" class="data row10 col3">0</td>
<td id="T_9106b_row10_col4" class="data row10 col4">0</td>
<td id="T_9106b_row10_col5" class="data row10 col5">0</td>
<td id="T_9106b_row10_col6" class="data row10 col6">0</td>
<td id="T_9106b_row10_col7" class="data row10 col7">43</td>
<td id="T_9106b_row10_col8" class="data row10 col8">98</td>
<td id="T_9106b_row10_col9" class="data row10 col9">98</td>
<td id="T_9106b_row10_col10" class="data row10 col10">208</td>
<td id="T_9106b_row10_col11" class="data row10 col11">253</td>
<td id="T_9106b_row10_col12" class="data row10 col12">253</td>
<td id="T_9106b_row10_col13" class="data row10 col13">253</td>
<td id="T_9106b_row10_col14" class="data row10 col14">253</td>
<td id="T_9106b_row10_col15" class="data row10 col15">187</td>
<td id="T_9106b_row10_col16" class="data row10 col16">22</td>
<td id="T_9106b_row10_col17" class="data row10 col17">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="baseline-model-pixel-similarity" class="level2">
<h2 class="anchored" data-anchor-id="baseline-model-pixel-similarity">Baseline Model: Pixel Similarity</h2>
<p>The problem we’re trying to solve is the following: How do we write a computer program to be able to distinguish between images of handwritten 3 and 7 digits.</p>
<p>The first approach we try is <strong>Pixel Similarity</strong>. The FASTAI book authors define this as the following:</p>
<ol type="1">
<li>Take the average pixel value for every pixel of the 3 images and do the same for the 7 images. These averages will produce a baseline image 3 and image 7.</li>
<li>Go through every image in the 3 and 7 images and compare them to the baseline images to see which digit they are most similar to</li>
</ol>
<div class="cell" data-outputid="1156cf26-8173-43f4-89fc-b67b82f55da9" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list of tensors for each image in 3 and 7 directories</span></span>
<span id="cb15-2">three_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> threes]</span>
<span id="cb15-3">seven_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sevens]</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in threes: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in three tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(three_tensors)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in sevens: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sevens)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of images in seven tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(seven_tensors)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify images</span></span>
<span id="cb15-11">show_image(three_tensors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb15-12">show_image(seven_tensors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of images in threes: 6131
Number of images in three tensors: 6131
Number of images in sevens: 6265
Number of images in seven tensors: 6265</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-9-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-9-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>The way I understand tensors is that they are data structures for storing information. The way I understand the stack operation is storing all the images into a pile of images that we then then can average all the pixel values for each pixel index in the image.</p>
<div class="cell" data-outputid="62223bfa-8fcf-4be2-9d5b-aa8e6ffeb049" data-execution_count="9">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the average intensity of each pixel across all images for 3 and 7</span></span>
<span id="cb18-2">stacked_sevens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(seven_tensors).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb18-3">stacked_threes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(three_tensors).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_sevens shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stacked_sevens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_sevens tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stacked_sevens.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_threes shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stacked_threes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stacked_threes tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stacked_threes.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>stacked_sevens shape: torch.Size([6265, 28, 28])
stacked_sevens tensor rank: 3
stacked_threes shape: torch.Size([6131, 28, 28])
stacked_threes tensor rank: 3</code></pre>
</div>
</div>
<p>In this step, we take the list of tensor images and condense them down into a new image where each pixel index in this new image is the average of all the values at a particular index.</p>
<div class="cell" data-outputid="c38f69b1-dc75-40e6-9618-fb47fc032ffd" data-execution_count="10">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average of all image tensors by taking mean along the 0 dimension (collapse all the rows into a single row) of stacked 3 rank tensors</span></span>
<span id="cb20-2">mean3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_threes.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-3">mean7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_sevens.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean3 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean3 tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mean3.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean7 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean7<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mean7 tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mean7.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-8">show_image(mean3)</span>
<span id="cb20-9">show_image(mean7)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mean3 shape: torch.Size([28, 28])
mean3 tensor rank: 2
mean7 shape: torch.Size([28, 28])
mean7 tensor rank: 2</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>&lt;Axes: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-11-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-11-output-4.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="measuring-distance" class="level2">
<h2 class="anchored" data-anchor-id="measuring-distance">Measuring Distance</h2>
<p>To compare the baseline image with a randomly chosen image from one of the datasets we need to measure the difference between pixels such that we have a standardized form so that the differences accurately reflect what pixels are dark and light when comparing the two images.</p>
<div class="cell" data-outputid="52fd0c5e-f103-4346-d91e-40d21d32553e" data-execution_count="11">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean Absolute Difference (L1 Norm)</span></span>
<span id="cb23-2">a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_threes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb23-3">a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_sevens[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb23-4"></span>
<span id="cb23-5">dist_3_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean3).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean()</span>
<span id="cb23-6">dist_7_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean()</span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Absolute Difference between 3 image and ideal 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_3_abs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Absolute Difference between 7 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_7_abs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-10"></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see how close 3 is to ideal 7</span></span>
<span id="cb23-12">dist_test_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean()</span>
<span id="cb23-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Absolute Difference between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_test_abs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean Absolute Difference between 3 image and ideal 3 image: 0.11143654584884644
Mean Absolute Difference between 7 image and ideal 7 image: 0.13037648797035217
Mean Absolute Difference between 3 image and ideal 7 image: 0.15861910581588745</code></pre>
</div>
</div>
<div class="cell" data-outputid="91b584b0-7ea6-489c-b48b-1f460fcb90b9" data-execution_count="12">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Root Mean Squared Error (L2 Norm)</span></span>
<span id="cb25-2">a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_threes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb25-3">a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stacked_sevens[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb25-4"></span>
<span id="cb25-5">dist_3_sqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean3)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean().sqrt()</span>
<span id="cb25-6">dist_7_sqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((a_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean().sqrt()</span>
<span id="cb25-7">dist_test_sqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((a_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean7)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean().sqrt()</span>
<span id="cb25-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Root Mean Squared Difference between 3 image and ideal 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_3_sqr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Root Mean Squared Difference between 7 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_7_sqr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-10"></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see how close 3 is to ideal 7</span></span>
<span id="cb25-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Root Mean Squared Difference between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dist_test_sqr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Root Mean Squared Difference between 3 image and ideal 3 image: 0.20208320021629333
Root Mean Squared Difference between 7 image and ideal 7 image: 0.2584923207759857
Root Mean Squared Difference between 3 image and ideal 7 image: 0.30210891366004944</code></pre>
</div>
</div>
<div class="cell" data-outputid="19a15a6c-7739-4a1d-e4ab-fe5bcbbebcbf" data-execution_count="13">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch Mean Squared Error and Mean Absolute Value Loss</span></span>
<span id="cb27-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pytorch Mean Absolute Value Loss between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>F<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>l1_loss(a_3.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), mean7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb27-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pytorch Mean Squared Error Loss between 3 image and ideal 7 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>F<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mse_loss(a_3, mean7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sqrt()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pytorch Mean Absolute Value Loss between 3 image and ideal 7 image: 0.15861910581588745
Pytorch Mean Squared Error Loss between 3 image and ideal 7 image: 0.30210891366004944</code></pre>
</div>
</div>
</section>
<section id="pytorch-numpy" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-numpy">Pytorch + Numpy</h2>
<p>The main difference between pytorch and numpy is that pytorch supports using the GPU and calculating gradients which numpy does not.</p>
<div class="cell" data-outputid="653bbebd-adcb-4289-8d35-f343804b2ccc" data-execution_count="14">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]]</span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numpy array</span></span>
<span id="cb29-3">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array(data)</span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor</span></span>
<span id="cb29-5">tns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(data)</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select a row</span></span>
<span id="cb29-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"select the second row of tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select a column</span></span>
<span id="cb29-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"select the second column of tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slicing</span></span>
<span id="cb29-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"select slice of tensor: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-15"></span>
<span id="cb29-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># addition</span></span>
<span id="cb29-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Addition with tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># types</span></span>
<span id="cb29-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"tensor type: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-21"></span>
<span id="cb29-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale and update tensor type</span></span>
<span id="cb29-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"changing tensor type from int to float: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>select the second row of tensor: tensor([4, 5, 6])
select the second column of tensor: tensor([[1, 2, 3]])
select slice of tensor: tensor([5, 6])
Addition with tensors: tensor([[2, 3, 4],
        [5, 6, 7]])
tensor type: torch.LongTensor
changing tensor type from int to float: tensor([[1.5000, 3.0000, 4.5000],
        [6.0000, 7.5000, 9.0000]])</code></pre>
</div>
</div>
</section>
<section id="computing-metrics" class="level2">
<h2 class="anchored" data-anchor-id="computing-metrics">Computing Metrics</h2>
<p>A metric is a number that is calculated based on the predictions of the model and the correct labels and inform us how good the model is. For classification models, <strong>accuracy</strong> is a popular metric.</p>
<div class="cell" data-outputid="9a15b9eb-b26f-4ae5-a667-ababb24c8a28" data-execution_count="15">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create validation data set</span></span>
<span id="cb31-2">valid_3_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o))</span>
<span id="cb31-3">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>).ls()])</span>
<span id="cb31-4">valid_3_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_3_tens.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb31-5">valid_7_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(o))</span>
<span id="cb31-6">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls()])</span>
<span id="cb31-7">valid_7_tens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_7_tens.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"3 validation set shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_3_tens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"3 validation set tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_tens.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"7 validation set shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_7_tens<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb31-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"7 validation set tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_7_tens.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3 validation set shape: torch.Size([1010, 28, 28])
3 validation set tensor rank: 3
7 validation set shape: torch.Size([1028, 28, 28])
7 validation set tensor rank: 3</code></pre>
</div>
</div>
<div class="cell" data-outputid="0e1aff34-5d3a-47ee-f234-ae842ef21c00" data-execution_count="16">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Data Distance Function</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mnist_distance(a, b):</span>
<span id="cb33-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (-1, -2) represent a range of axes. Tell Pytorch to take the mean ranging over the values</span></span>
<span id="cb33-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indexed by the last two axes of the tensor (horizontal and vertical dimensions of the image)</span></span>
<span id="cb33-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># leaves only the first tensor axis which indexes over images and the final size -&gt; averaged the intensity of all the pixels</span></span>
<span id="cb33-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in the image</span></span>
<span id="cb33-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().mean((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb33-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance function measuring the distance between 3 image and ideal 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mnist_distance(a_3, mean3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measure distance between validation set 3 and ideal 3 tensor</span></span>
<span id="cb33-11">valid_3_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist_distance(valid_3_tens, mean3)</span>
<span id="cb33-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance between validation set 3 image and ideal training data set 3 image: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_3_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid 3 distance tensor shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_3_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb33-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid 3 distance tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_dist.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Distance function measuring the distance between 3 image and ideal 3 image: 0.11143654584884644
Distance between validation set 3 image and ideal training data set 3 image: tensor([0.1163, 0.1464, 0.1188,  ..., 0.1508, 0.1018, 0.1285])
Valid 3 distance tensor shape: torch.Size([1010])
Valid 3 distance tensor rank: 1</code></pre>
</div>
</div>
<div class="cell" data-outputid="b5bb6c3a-40b1-469f-ad56-eb35923adc41" data-execution_count="17">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if image is a 3</span></span>
<span id="cb35-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_3(x):</span>
<span id="cb35-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mnist_distance(x, mean3) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> mnist_distance(x, mean7)</span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Check if 3 image is actually a 3 image as a boolean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_3(a_3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1.0 - true</span></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0.0 - false</span></span>
<span id="cb35-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Check if 3 image is actually a 3 image as a float: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_3(a_3)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb35-9"></span>
<span id="cb35-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check all 3 images</span></span>
<span id="cb35-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"check if all 3 images in validation set are 3 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_3(valid_3_tens)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Check if 3 image is actually a 3 image as a boolean: True
Check if 3 image is actually a 3 image as a float: 1.0
check if all 3 images in validation set are 3 images: tensor([True, True, True,  ..., True, True, True])</code></pre>
</div>
</div>
<div class="cell" data-outputid="8400652a-47dd-4950-db4d-742c8a1ee57a" data-execution_count="18">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Accuracy of 3 and 7 Images</span></span>
<span id="cb37-2">accuracy_3s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> is_3(valid_3_tens).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() .mean()</span>
<span id="cb37-3">accuracy_7s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> is_3(valid_7_tens).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()).mean()</span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model accuracy for classifying 3 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy_3s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Model accuracy for classifying 7 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy_7s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average model accuracy for classifying 3 and 7 images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(accuracy_3s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>accuracy_7s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model accuracy for classifying 3 images: 0.9168316721916199
Model accuracy for classifying 7 images: 0.9854085445404053
Average model accuracy for classifying 3 and 7 images: 0.951120138168335</code></pre>
</div>
</div>
</section>
<section id="stochastic-gradient-descent" class="level2">
<h2 class="anchored" data-anchor-id="stochastic-gradient-descent">Stochastic Gradient Descent</h2>
<p>In the <strong>Pixel Similarity</strong> approach from above, we don’t have a way for the model to learn and improve its accuracy. Instead of trying to compare an image with an ideal image, we can use <strong>Stochastic Gradient Descent (SGD)</strong> to look at each individual pixel and come up with a set of weights with large weights associated with pixels that are the most black for a particular label (ie. digit in MNIST data) using Arthur Samuel’s definition of machine learning</p>
<section id="stochastic-gradient-descent-steps-for-an-image-classifier" class="level3">
<h3 class="anchored" data-anchor-id="stochastic-gradient-descent-steps-for-an-image-classifier">Stochastic Gradient Descent Steps for an Image Classifier</h3>
<ol type="1">
<li>initialize weights</li>
<li>Calculate Predictions</li>
<li>Based on the predictions, calculate how good the model is (its loss)</li>
<li>Calculate the gradient which measures for each weight, how changing that weight would change the loss</li>
<li>Step (change) all the weights based on Step 4</li>
<li>Go back to Step 2 and repeat the process</li>
<li>Iterate until you decide to stop the training process until you decide the model is good enough for your problem</li>
</ol>
<p>The problem below is an example from the FastAI Book simulating a roller coaster and trying to find a function that best fits the data to understand how speed changes over time</p>
<div class="cell" data-outputid="2590d8af-3f36-4b49-dbfc-21c45d18f101" data-execution_count="19">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Roller Coaster Problem with Stochastic Gradient Descent</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate data</span></span>
<span id="cb39-3">time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb39-4">speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb39-5">plt.scatter(time,speed)</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use SGD to find a function that fits the data for the rollercoaster data</span></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># t - the time when we are measuring the rollercoaster speed</span></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># params - the values that define which quadratic we're trying</span></span>
<span id="cb39-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(t, params):</span>
<span id="cb39-11">    a,b,c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb39-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb39-13"></span>
<span id="cb39-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a loss function - returns a value based on a prediction and a target</span></span>
<span id="cb39-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># where lower values of the functions correspond to better predictions. Need</span></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  loss function to return lower values when predictions are more accurate, as</span></span>
<span id="cb39-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  SGD is trying to minimize this loss. For continuous data, Mean Square Error is</span></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  frequently used</span></span>
<span id="cb39-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mse(preds, targets):</span>
<span id="cb39-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ((preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targets)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb39-21"></span>
<span id="cb39-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SGD Process</span></span>
<span id="cb39-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for visualizing how close our predictions are to targets</span></span>
<span id="cb39-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_preds(preds, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb39-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.subplots()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb39-26">    ax.scatter(time, speed)</span>
<span id="cb39-27">    ax.scatter(time, to_np(preds), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb39-28">    ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb39-29"></span>
<span id="cb39-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. initialize weights</span></span>
<span id="cb39-31">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).requires_grad_()</span>
<span id="cb39-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The parameter values after initialization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-33">orig_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params.clone()</span>
<span id="cb39-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The original parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>orig_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-35"></span>
<span id="cb39-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Calculate Predictions</span></span>
<span id="cb39-37">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(time, params)</span>
<span id="cb39-38">show_preds(preds)</span>
<span id="cb39-39"></span>
<span id="cb39-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Based on the predictions, calculate how good the model is (its loss)</span></span>
<span id="cb39-41">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(preds, speed)</span>
<span id="cb39-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-43"></span>
<span id="cb39-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Calculate the gradient which measures for each weight, how changing that weight would change the loss</span></span>
<span id="cb39-45">loss.backward()</span>
<span id="cb39-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Gradient values for each argument: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate approximation of how parameters need to change</span></span>
<span id="cb39-48"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test a new gradient with a learning rate of 1e^-5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-49"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parameter values after computing the gradient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-50"></span>
<span id="cb39-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. Step (change) all the weights based on Step 4</span></span>
<span id="cb39-52">learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span></span>
<span id="cb39-53">params.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> params.grad.data</span>
<span id="cb39-54">params.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb39-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if loss has improved</span></span>
<span id="cb39-56">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(time, params)</span>
<span id="cb39-57">mse(preds, speed)</span>
<span id="cb39-58">show_preds(preds)</span>
<span id="cb39-59"></span>
<span id="cb39-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6. Go back to Step 2 and repeat the process</span></span>
<span id="cb39-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_step(params, prn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb39-62">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(time, params)</span>
<span id="cb39-63">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(preds, speed)</span>
<span id="cb39-64">    loss.backward()</span>
<span id="cb39-65">    params.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> params.grad.data</span>
<span id="cb39-66">    params.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb39-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> prn:</span>
<span id="cb39-68">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss Value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> preds</span>
<span id="cb39-70"></span>
<span id="cb39-71"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb39-72">  apply_step(params)</span>
<span id="cb39-73">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orig_params.detach().requires_grad_()</span>
<span id="cb39-74"></span>
<span id="cb39-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7. Iterate until you decide to stop the training process until you decide the model is good enough for your problem</span></span>
<span id="cb39-76">_,axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb39-77"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> axs: show_preds(apply_step(params, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>), ax)</span>
<span id="cb39-78">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The parameter values after initialization: tensor([ 0.2816,  0.9605, -1.2062], requires_grad=True)
The original parameters: tensor([ 0.2816,  0.9605, -1.2062], grad_fn=&lt;CloneBackward0&gt;)
Loss value: 1770.0677490234375
Gradient values for each argument: tensor([11310.8789,   742.4634,    34.8602])
Test a new gradient with a learning rate of 1e^-5: tensor([0.1131, 0.0074, 0.0003])
Parameter values after computing the gradient: tensor([ 0.2816,  0.9605, -1.2062], requires_grad=True)
Loss Value: 848.1575927734375
Loss Value: 673.7000732421875
Loss Value: 640.683349609375
Loss Value: 634.4315795898438
Loss Value: 633.2445068359375
Loss Value: 633.0159301757812
Loss Value: 632.9686279296875
Loss Value: 632.9556884765625
Loss Value: 632.94921875
Loss Value: 632.9440307617188</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-20-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-20-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-20-output-5.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="building-the-mnist-image-classifier" class="level2">
<h2 class="anchored" data-anchor-id="building-the-mnist-image-classifier">Building the MNIST Image Classifier</h2>
<section id="training-dataset" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset">Training Dataset</h3>
<div class="cell" data-outputid="16886eb9-59cb-480a-d302-5fa530f81a79" data-execution_count="20">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build Training Dataset</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -1 view function -&gt; make this axis as big as necessary to fit all the data</span></span>
<span id="cb41-3">train_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([stacked_threes, stacked_sevens]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb41-4">train_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sevens)).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_x data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb41-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_x data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_x.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb41-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_y data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb41-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_y data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_y.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train_x data shape: torch.Size([12396, 784])
train_x data tensor rank: 2
train_y data shape: torch.Size([12396, 1])
train_y data tensor rank: 2</code></pre>
</div>
</div>
</section>
<section id="validation-dataset" class="level3">
<h3 class="anchored" data-anchor-id="validation-dataset">Validation Dataset</h3>
<div class="cell" data-outputid="72211316-50d2-4c75-e735-beaeb05285ea" data-execution_count="21">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build Validation Dataset</span></span>
<span id="cb43-2">valid_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([valid_3_tens, valid_7_tens]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb43-3">valid_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_tens) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_7_tens)).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_x data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_x data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_x.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_y data shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb43-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_y data tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_y.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>valid_x data shape: torch.Size([2038, 784])
valid_x data tensor rank: 2
valid_y data shape: torch.Size([2038, 1])
valid_y data tensor rank: 2</code></pre>
</div>
</div>
<div class="cell" data-outputid="b880852e-786e-4af3-b64e-7535d64846ce" data-execution_count="22">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a Dataset object(training data) for PyTorch</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset is required to return a tuple of (x, y) when indexed</span></span>
<span id="cb45-3">dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(train_x,train_y))</span>
<span id="cb45-4">x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb45-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"datset x shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb45-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dataset x tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb45-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"datset y shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb45-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dataset y tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>datset x shape: torch.Size([784])
dataset x tensor rank: 1
datset y shape: torch.Size([1])
dataset y tensor rank: 1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a Dataset object(validation data) for PyTorch</span></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset is required to return a tuple of (x, y) when indexed</span></span>
<span id="cb47-3">valid_dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(valid_x,valid_y))</span></code></pre></div>
</div>
</section>
<section id="initialize-model-weights" class="level3">
<h3 class="anchored" data-anchor-id="initialize-model-weights">Initialize Model Weights</h3>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize model weights</span></span>
<span id="cb48-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init_params(size, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb48-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (torch.randn(size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>std).requires_grad_()</span>
<span id="cb48-4"></span>
<span id="cb48-5">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a Bias Value</span></span>
<span id="cb48-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need a bias to ensure its not 0 when the pixels are 0</span></span>
<span id="cb48-9">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="88248cc1-5ed1-4ac4-b218-aea35c1113ad" data-execution_count="25">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate a prediction for one image</span></span>
<span id="cb49-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prediction for a single image from training data: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(train_x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weights.T)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bias<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Prediction for a single image from training data: tensor([-4.6132], grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
</section>
<section id="linear-classifier" class="level3">
<h3 class="anchored" data-anchor-id="linear-classifier">Linear Classifier</h3>
<div class="cell" data-outputid="0b5d74ce-8cbd-45ef-d00a-4312f0daf815" data-execution_count="26">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matrix Multiplication</span></span>
<span id="cb51-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Create a linear combination for the prediction values</span></span>
<span id="cb51-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute predictions for all the images in the training data</span></span>
<span id="cb51-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> linear1(xb):</span>
<span id="cb51-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> xb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bias</span>
<span id="cb51-6">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear1(train_x)</span>
<span id="cb51-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Predictions"</span>)</span>
<span id="cb51-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(preds)</span>
<span id="cb51-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prediction shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb51-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prediction tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(preds.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Predictions
tensor([[-4.6132],
        [-8.5214],
        [-6.7243],
        ...,
        [-6.6400],
        [ 3.2664],
        [-6.1007]], grad_fn=&lt;AddBackward0&gt;)
Prediction shape: torch.Size([12396, 1])
Prediction tensor rank: 2</code></pre>
</div>
</div>
<div class="cell" data-outputid="fc87adf4-1273-408f-ec1b-a95430ff67fb" data-execution_count="27">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check accuracy of prediction</span></span>
<span id="cb53-2">corrects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> train_y</span>
<span id="cb53-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy of Predictions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corrects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb53-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average accuracy of all predictions: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corrects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy of Predictions: tensor([[False],
        [False],
        [False],
        ...,
        [ True],
        [False],
        [ True]])
Average accuracy of all predictions: 0.36156824231147766</code></pre>
</div>
</div>
<div class="cell" data-outputid="d902f296-7257-4deb-92bf-e0e34ae9fd34" data-execution_count="28">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Improve Accuracy</span></span>
<span id="cb55-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test to see if we can improve accuracy with a small change</span></span>
<span id="cb55-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb55-4">  weights[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0001</span></span>
<span id="cb55-5">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear1(train_x)</span>
<span id="cb55-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average accuracy after updating the weights: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>((preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> train_y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>item()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb55-7"></span>
<span id="cb55-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># there is no change because the change in weights is so small that (y_new - y_old) is very close to 0 ie.</span></span>
<span id="cb55-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the gradient is almost 0 everywhere</span></span>
<span id="cb55-10"></span>
<span id="cb55-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to find a loss function which when our weights result in slightly better predictions produces a slightly better loss</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Average accuracy after updating the weights: 0.36156824231147766</code></pre>
</div>
</div>
</section>
<section id="loss-function" class="level3">
<h3 class="anchored" data-anchor-id="loss-function">Loss Function</h3>
<div class="cell" data-outputid="c87dd300-dc32-4dcd-f1ce-a9caea5a65eb" data-execution_count="29">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a Loss Function</span></span>
<span id="cb57-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss function receive predictions from the model about the images</span></span>
<span id="cb57-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the purpose of the loss function is to measure the difference between predicted values and true values ie the labels</span></span>
<span id="cb57-4">trgts  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb57-5">prds   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>])</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first attempt at a loss function</span></span>
<span id="cb57-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mnist_loss(predictions, targets):</span>
<span id="cb57-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># measures how distant each predictions is from 1 if it should be 1, how distant it is from 0 if it should be 0</span></span>
<span id="cb57-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and takes the mean of all the distances</span></span>
<span id="cb57-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>predictions, predictions).mean()</span>
<span id="cb57-12"></span>
<span id="cb57-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need a scalar for the final loss -&gt; the lower the loss value the better</span></span>
<span id="cb57-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indicates accurate predictions are more confident and when inaccurate predictions are less confident</span></span>
<span id="cb57-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test loss function: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mnist_loss(prds,trgts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb57-16"></span>
<span id="cb57-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># issue with this loss function is that it assumes all predictions are between 0 and 1</span></span>
<span id="cb57-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sigmoid function always outputs a number between 0 and 1</span></span>
<span id="cb57-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sigmoid(x):</span>
<span id="cb57-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x))</span>
<span id="cb57-21"></span>
<span id="cb57-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second attempt at a loss function using sigmoid</span></span>
<span id="cb57-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mnist_loss_sigmoid(predictions, targets):</span>
<span id="cb57-24">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions.sigmoid()</span>
<span id="cb57-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>predictions, predictions).mean()</span>
<span id="cb57-26"></span>
<span id="cb57-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test loss function with sigmoid: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mnist_loss_sigmoid(prds,trgts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test loss function: 0.43333330750465393
Test loss function with sigmoid: 0.44596806168556213</code></pre>
</div>
</div>
</section>
<section id="sgd-mini-batches" class="level3">
<h3 class="anchored" data-anchor-id="sgd-mini-batches">SGD + Mini Batches</h3>
<div class="cell" data-outputid="494b372f-6865-4898-a28e-9e1d995d3e6d" data-execution_count="30">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SGD + Mini Batches</span></span>
<span id="cb59-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization Step - updating the weights based on gradients</span></span>
<span id="cb59-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to calculate loss over one or more data items</span></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution: Calculate the average loss for a data items at a time (mini-batch)</span></span>
<span id="cb59-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch Size - number of items in mini batch</span></span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use fastai to build a dataloader object to shuffle data</span></span>
<span id="cb59-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly shuffle data on every epoch before creating mini batches</span></span>
<span id="cb59-9">coll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb59-10">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(coll, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb59-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Example of randomly generated mini-batch of batch size 5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dl)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Example of randomly generated mini-batch of batch size 5: [tensor([12,  0,  7,  6,  9]), tensor([ 2, 13,  3, 14, 11]), tensor([ 4,  5,  1,  8, 10])]</code></pre>
</div>
</div>
</section>
<section id="mnist-model-training-loop-using-sgd" class="level3">
<h3 class="anchored" data-anchor-id="mnist-model-training-loop-using-sgd">MNIST Model Training Loop using SGD</h3>
<div class="cell" data-outputid="15cf0e9d-018e-4ba1-8b38-5edf7c8e0864" data-execution_count="31">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a training loop for a model</span></span>
<span id="cb61-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights and bias randomly</span></span>
<span id="cb61-3">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb61-4">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb61-5"></span>
<span id="cb61-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for the training data</span></span>
<span id="cb61-7">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb61-8">xb,yb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(dl)</span>
<span id="cb61-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"xb shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"xb tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xb.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"yb shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"yb tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yb.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-13"></span>
<span id="cb61-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for the validation data</span></span>
<span id="cb61-15">valid_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb61-16"></span>
<span id="cb61-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Mini-Batch of batch size 4 for testing</span></span>
<span id="cb61-18">batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb61-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"batch tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(batch.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-21"></span>
<span id="cb61-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Predictions</span></span>
<span id="cb61-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># preds = linear1(batch)</span></span>
<span id="cb61-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"predictions: {preds}")</span></span>
<span id="cb61-25"></span>
<span id="cb61-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measure loss</span></span>
<span id="cb61-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss = mnist_loss_sigmoid(preds, train_y[:4])</span></span>
<span id="cb61-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Loss: {loss}")</span></span>
<span id="cb61-29"></span>
<span id="cb61-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Gradients</span></span>
<span id="cb61-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss.backward()</span></span>
<span id="cb61-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"weights gradient shape: {weights.grad.shape}")</span></span>
<span id="cb61-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Average of weight gradients: {weights.grad.mean()}")</span></span>
<span id="cb61-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"bias gradient: {bias.grad}")</span></span>
<span id="cb61-35"></span>
<span id="cb61-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for calculating gradient</span></span>
<span id="cb61-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_grad(xb, yb, model):</span>
<span id="cb61-38">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb61-39">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist_loss(preds, yb)</span>
<span id="cb61-40">    loss.backward()</span>
<span id="cb61-41"></span>
<span id="cb61-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test calculating gradients: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calc_grad(batch, train_y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], linear1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average of weight gradients: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>weights<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"bias gradient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bias<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-45"></span>
<span id="cb61-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss.backward adds the gradients of loss to any gradients that are currently stored</span></span>
<span id="cb61-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so have to set the current gradients to 0 first</span></span>
<span id="cb61-48"></span>
<span id="cb61-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training loop for an epoch</span></span>
<span id="cb61-50"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_epoch(model, lr, params):</span>
<span id="cb61-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb,yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dl:</span>
<span id="cb61-52">        calc_grad(xb, yb, model)</span>
<span id="cb61-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> params:</span>
<span id="cb61-54">            p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lr</span>
<span id="cb61-55">            p.grad.zero_()</span>
<span id="cb61-56"></span>
<span id="cb61-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check accuracy at this point</span></span>
<span id="cb61-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Check Accuracy at this point: {(preds&gt;0.0).float() == train_y[:4]}")</span></span>
<span id="cb61-59"></span>
<span id="cb61-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function for calculating validation accuracy</span></span>
<span id="cb61-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> batch_accuracy(xb, yb):</span>
<span id="cb61-62">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xb.sigmoid()</span>
<span id="cb61-63">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yb</span>
<span id="cb61-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> correct.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb61-65"></span>
<span id="cb61-66"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Testing batch accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_accuracy(linear1(batch), train_y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-67"></span>
<span id="cb61-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put batches together to create a validation epoch</span></span>
<span id="cb61-69"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> validate_epoch(model):</span>
<span id="cb61-70">    accs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [batch_accuracy(model(xb), yb) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb,yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_dl]</span>
<span id="cb61-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(torch.stack(accs).mean().item(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb61-72"></span>
<span id="cb61-73"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test validation epoch: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>validate_epoch(linear1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-74"></span>
<span id="cb61-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train for 1 epoch and see if things improve</span></span>
<span id="cb61-76">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb61-77">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights, bias</span>
<span id="cb61-78">train_epoch(linear1, lr, params)</span>
<span id="cb61-79"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"check if accuracy has improved from earlier: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>validate_epoch(linear1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb61-80"></span>
<span id="cb61-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train for a few epochs</span></span>
<span id="cb61-82"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb61-83">    train_epoch(linear1, lr, params)</span>
<span id="cb61-84">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(linear1), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>xb shape: torch.Size([256, 784])
xb tensor rank: 2
yb shape: torch.Size([256, 1])
yb tensor rank: 2
batch shape: torch.Size([4, 784])
batch tensor rank: 2
Test calculating gradients: None
Average of weight gradients: -0.15112045407295227
bias gradient: tensor([-1.])
Testing batch accuracy: 0.25
Test validation epoch: 0.5065
check if accuracy has improved from earlier: 0.946
0.9534 0.9539 0.9534 0.9534 0.9529 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9539 0.9534 0.9534 0.9534 0.9534 </code></pre>
</div>
</div>
</section>
</section>
<section id="pytorch-setup-for-sgd-pytorch-optimizer" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-setup-for-sgd-pytorch-optimizer">PyTorch setup for SGD + Pytorch Optimizer</h2>
<div class="cell" data-outputid="f08774d3-0414-4c07-e675-83e6e6513c31" data-execution_count="32">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build SGD Functionality - PyTorch Optimizer</span></span>
<span id="cb63-2"></span>
<span id="cb63-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># intialize weights and biases in a single pytorch class</span></span>
<span id="cb63-4">linear_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb63-5">w,b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_model.parameters()</span>
<span id="cb63-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"weights shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"weight tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(w.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"bias shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"bias tensor rank: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(b.shape)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-10"></span>
<span id="cb63-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch Optimizer Setup</span></span>
<span id="cb63-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BasicOptim:</span>
<span id="cb63-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,params,lr): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(params),lr</span>
<span id="cb63-14"></span>
<span id="cb63-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb63-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr</span>
<span id="cb63-17"></span>
<span id="cb63-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb63-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>weights shape: torch.Size([1, 784])
weight tensor rank: 2
bias shape: torch.Size([1])
bias tensor rank: 1</code></pre>
</div>
</div>
<div class="cell" data-outputid="06966400-c2fc-4de4-a460-f6db33871213" data-execution_count="33">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define training epoch function that use SGD</span></span>
<span id="cb65-2">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicOptim(linear_model.parameters(), lr)</span>
<span id="cb65-3"></span>
<span id="cb65-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_epoch(model):</span>
<span id="cb65-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xb,yb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dl:</span>
<span id="cb65-6">        calc_grad(xb, yb, model)</span>
<span id="cb65-7">        opt.step()</span>
<span id="cb65-8">        opt.zero_grad()</span>
<span id="cb65-9"></span>
<span id="cb65-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check validation epoch</span></span>
<span id="cb65-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Check accuracy after adding SGD: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>validate_epoch(linear_model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb65-12"></span>
<span id="cb65-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update Model Training</span></span>
<span id="cb65-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_model(model, epochs):</span>
<span id="cb65-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb65-16">        train_epoch(model)</span>
<span id="cb65-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(model), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb65-18"></span>
<span id="cb65-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test training model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_model(linear_model, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Check accuracy after adding SGD: 0.5413
0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 0.9534 Test training model: None</code></pre>
</div>
</div>
</section>
<section id="train-mnist-model-using-fastai-library" class="level2">
<h2 class="anchored" data-anchor-id="train-mnist-model-using-fastai-library">Train MNIST Model using FastAI Library</h2>
<div class="cell" data-outputid="36245e95-aa93-4563-c133-29fe20271845" data-execution_count="34">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify Model Training Code with FastAI</span></span>
<span id="cb67-2"></span>
<span id="cb67-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model information that uses SGD</span></span>
<span id="cb67-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># linear_model = nn.Linear(28 * 28,1)</span></span>
<span id="cb67-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># opt = SGD(linear_model.parameters(), lr)</span></span>
<span id="cb67-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train_model(linear_model, 20)</span></span>
<span id="cb67-7"></span>
<span id="cb67-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define new DataLoaders</span></span>
<span id="cb67-9">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(dl, valid_dl)</span>
<span id="cb67-10"></span>
<span id="cb67-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a general purpose Learner class</span></span>
<span id="cb67-12">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls, nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SGD,</span>
<span id="cb67-13">                loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mnist_loss_sigmoid, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_accuracy)</span>
<span id="cb67-14"></span>
<span id="cb67-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train Model with Learner.fit</span></span>
<span id="cb67-16">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">batch_accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.636952</td>
<td>0.503232</td>
<td>0.495584</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.440637</td>
<td>0.235429</td>
<td>0.791462</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.164770</td>
<td>0.166296</td>
<td>0.850834</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.073948</td>
<td>0.102109</td>
<td>0.915604</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.040399</td>
<td>0.075625</td>
<td>0.933268</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.027231</td>
<td>0.061010</td>
<td>0.948479</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.021780</td>
<td>0.051817</td>
<td>0.955839</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.019325</td>
<td>0.045666</td>
<td>0.962709</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.018058</td>
<td>0.041325</td>
<td>0.965162</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.017283</td>
<td>0.038114</td>
<td>0.967615</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="neural-networks">Neural Networks</h2>
<p>Linear classifiers are limited in what they can do. To handle more complex functions we need to add a nonlinear function between two linear classifiers. This is what defines a <strong>neural network</strong>.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a simple neural network</span></span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly intialize weights and biases</span></span>
<span id="cb68-4">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb68-5">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb68-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb68-7">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb68-8"></span>
<span id="cb68-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def simple_net(xb):</span></span>
<span id="cb68-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     res = xb@w1 + b1</span></span>
<span id="cb68-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # Rectified Linear Unit - RELU -&gt; replaces every negative number with 0</span></span>
<span id="cb68-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     res = res.max(tensor(0.0))</span></span>
<span id="cb68-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     res = res@w2 + b2</span></span>
<span id="cb68-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return res</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pytorch version of a simple neural network</span></span>
<span id="cb69-2">simple_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb69-3">    nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>),</span>
<span id="cb69-4">    nn.ReLU(),</span>
<span id="cb69-5">    nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb69-6">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="ccdb4868-7db1-4e1f-e3a9-644e8a801d48" data-execution_count="37">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply Simplenet to MNIST data</span></span>
<span id="cb70-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls, simple_net, opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SGD,</span>
<span id="cb70-3">                loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mnist_loss_sigmoid, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_accuracy)</span>
<span id="cb70-4"></span>
<span id="cb70-5">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">batch_accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.282393</td>
<td>0.406792</td>
<td>0.505888</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.134344</td>
<td>0.215805</td>
<td>0.817959</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.076003</td>
<td>0.111737</td>
<td>0.918057</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.051048</td>
<td>0.076866</td>
<td>0.940628</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.039343</td>
<td>0.060505</td>
<td>0.956330</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.033269</td>
<td>0.051137</td>
<td>0.962709</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.029718</td>
<td>0.045164</td>
<td>0.965653</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.027371</td>
<td>0.041064</td>
<td>0.966634</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.025655</td>
<td>0.038072</td>
<td>0.969087</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.024313</td>
<td>0.035779</td>
<td>0.970069</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.023219</td>
<td>0.033955</td>
<td>0.972522</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.022301</td>
<td>0.032461</td>
<td>0.973503</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.021518</td>
<td>0.031202</td>
<td>0.976448</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.020838</td>
<td>0.030122</td>
<td>0.976448</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.020241</td>
<td>0.029180</td>
<td>0.976938</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.019713</td>
<td>0.028348</td>
<td>0.977429</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>16</td>
<td>0.019239</td>
<td>0.027608</td>
<td>0.977429</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>17</td>
<td>0.018811</td>
<td>0.026943</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>18</td>
<td>0.018422</td>
<td>0.026343</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>19</td>
<td>0.018066</td>
<td>0.025798</td>
<td>0.978901</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>20</td>
<td>0.017739</td>
<td>0.025301</td>
<td>0.978901</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>21</td>
<td>0.017437</td>
<td>0.024845</td>
<td>0.979392</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>22</td>
<td>0.017155</td>
<td>0.024425</td>
<td>0.979392</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>23</td>
<td>0.016893</td>
<td>0.024038</td>
<td>0.979882</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>24</td>
<td>0.016647</td>
<td>0.023680</td>
<td>0.980373</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>25</td>
<td>0.016416</td>
<td>0.023348</td>
<td>0.980373</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>26</td>
<td>0.016198</td>
<td>0.023040</td>
<td>0.980373</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>27</td>
<td>0.015992</td>
<td>0.022753</td>
<td>0.980864</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>28</td>
<td>0.015797</td>
<td>0.022486</td>
<td>0.981845</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>29</td>
<td>0.015612</td>
<td>0.022237</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>30</td>
<td>0.015436</td>
<td>0.022004</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>31</td>
<td>0.015268</td>
<td>0.021786</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>32</td>
<td>0.015107</td>
<td>0.021581</td>
<td>0.983317</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>33</td>
<td>0.014954</td>
<td>0.021390</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>34</td>
<td>0.014807</td>
<td>0.021209</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>35</td>
<td>0.014666</td>
<td>0.021039</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>36</td>
<td>0.014531</td>
<td>0.020879</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>37</td>
<td>0.014401</td>
<td>0.020728</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>38</td>
<td>0.014276</td>
<td>0.020584</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>39</td>
<td>0.014155</td>
<td>0.020448</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="cell" data-outputid="d466d41a-189a-4b8d-e00a-300732272778" data-execution_count="38">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize the accuracy of model using simplenet</span></span>
<span id="cb71-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y axis - accuracy</span></span>
<span id="cb71-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis number of epochs</span></span>
<span id="cb71-4">plt.plot(L(learn.recorder.values).itemgot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3_files/figure-html/cell-39-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="fd9f4109-2049-4b32-8885-44f7318974aa" data-execution_count="39">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Final Accuracy of model on the MNIST dataset: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>learn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>recorder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>values[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Final Accuracy of model on the MNIST dataset: 0.982826292514801</code></pre>
</div>
</div>
</section>
<section id="going-deeper-into-deep-learning-neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="going-deeper-into-deep-learning-neural-networks">Going Deeper into Deep Learning + Neural Networks</h2>
<p>The following code below is an 18 layer resnet model with nearly 100% accuracy on the MNIST data. The above code was a simple neural network with 2 layers so the results of resnet-18 on this data show that accuracy improves as we add more layers. One thing to consider are the trade off’s mentioned by Jeremy in the lecture video</p>
<div class="cell" data-outputid="e461ee6e-5eee-4ba5-f9fe-f8243e0b4036" data-execution_count="40">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Going Deeper into Deep Learning + Neural Networks</span></span>
<span id="cb74-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_folder(path)</span>
<span id="cb74-3">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, pretrained<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb74-4">                    loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>F.cross_entropy, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy)</span>
<span id="cb74-5">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.089190</td>
<td>0.011672</td>
<td>0.998037</td>
<td>00:18</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p><strong>Activations(Neural Network)</strong> - Numbers that are calculated (both by linear and non-linear layers)</p>
<p><strong>Parameters(Neural Network)</strong> - Numbers that are randomly initialized, and optimized (that is, the numbers that define the model)</p>
<p><strong>Axis(Numpy), Dimensions(PyTorch Tensors)</strong> - For a matrix, the rows and columns define the axis</p>
<p><strong>Tensor Rank</strong> - The number of dimensions in a tensor</p>
<p><strong>Rank Zero Tensor</strong> - Scalar</p>
<p><strong>Rank One Tensor</strong> - Vector</p>
<p><strong>Rank Two Tensor</strong> - Matrix</p>
<p><strong>Nonlinearity (Activation Function)</strong> - one type of layer in a neural network. Typically a neural network alternates between a linear layer and non-linear layer. Occasionally people refer to a single layer = linear layer + nonlinearity</p>
<p><strong>Relu</strong> - Function that returns 0 for negative numbers and doesn’t change positive numbers</p>
<p><strong>Mini-Batch</strong> - A small group of inputs and labels gathered together in two arrays. A gradient desccent step is updated on this batch rather than a whole epoch</p>
<p><strong>Forward Pass</strong> - Applying the model to some input and computing the predictions</p>
<p><strong>Loss</strong> - A value that represents how well (or bad) the model is doing <strong>Gradient</strong> - The derivative(slope) of the loss with respect to some parameter of the model</p>
<p><strong>Backward Pass</strong> - Computing the gradients of the loss with respect to all model parameters</p>
<p><strong>Gradient Descent</strong> - Taking a step in the directions opposite to the gradients to make the model parameters a little bit better</p>
<p><strong>Learning Rate</strong> - The size of the step we take when applying SGD to update the parameters of the model. Usually a very tiny model</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://www.youtube.com/watch?v=hBBOjCiFcuo">FastAI Lesson 3</a></li>
<li><a href="https://colab.research.google.com/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb#scrollTo=0rEdjkeOSJbJ">FastAI Chapter 4, MNIST Basics</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work">How Does a Neural Net Really Work</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/which-image-models-are-best/">Which Image Models are Best</a></li>
<li><a href="https://youtu.be/aircAruvnKk?feature=shared">3Blue1Brown Neural Networks</a></li>
<li><a href="https://karpathy.ai/zero-to-hero.html">Andrej Karpathy Neural Networks Zero to Hero</a></li>
<li><a href="https://towardsdatascience.com/understanding-dimensions-in-pytorch-6edf9972d3be">Understanding Dimensions in PyTorch</a></li>
<li><a href="https://medium.com/intuitionmath/numpy-sum-axis-intuition-6eb94926a5d1">Understanding Numpy Axis</a></li>
<li><a href="https://pytorch.org/docs/stable/index.html">Pytorch Documentation</a></li>
<li><a href="https://docs.fast.ai/">fastai Documentation</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson3/FASTAI_Lesson_3_V3.html</guid>
  <pubDate>Mon, 18 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 2: Production</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson2/ModelDeployment.html</link>
  <description><![CDATA[ 




<section id="announcments" class="level2">
<h2 class="anchored" data-anchor-id="announcments">Announcments</h2>
<p>Finally back! Had some deadlines and issues with gradio, kaggle, Firefox gtk rendering, quarto and jupyter but everything is working now. I’d like to give a shoutout to Kevin Liu for his help in getting up to speed with the updated gradio API. The example provided by Dr.&nbsp;Tanishq Abraham isn’t compatible with the updated version of Gradio so with Kevin’s notes on the gradio errors he ran into, I managed to get a model up on hugging face spaces with the new gradio syntax.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this lesson, Jeremy walks through a bear classification model example and then spends most of the lesson focusing on how to deploy a model into production. By production, Jeremy is referring to using a model outside of a Jupyter notebook. This is very useful because it provides a way for designing a custom inviting interface for interacting with a trained model. The decision of what the user interface should look like comes down to project scope, goals and the people using the model.</p>
<p>If you’re a programmer, designer or learning deep learning like me, then it might be fun to hack around with javascript + the web to build a really nice interface. This can be a project in its own. The other group of people are data scientists, boss, team or people who need to interact with a prototype model ASAP. In that case, there are many handy python libraries and tools such as <a href="https://colab.research.google.com/">colab</a>, <a href="https://altair-viz.github.io/">altair</a>, <a href="https://www.gradio.app/">gradio</a> and <a href="https://streamlit.io/">streamlit</a> which provide a set of components that have been determined to be highly effective for rapid prototyping and sharing work on the web.</p>
<p>If you are looking to build a nice application I would maybe start with gradio or streamlit for prototyping but then work with a designer or web developer to build a nicer interface since I’ve learned from personal experience that python libraries that render javascript, html and css can be a debugging nightmare when creating interactive web user interfaces.</p>
<p>Using gradio reminded me a lot of using streamlit. I remember liking streamlit for its simplicity in creating components but its simplicity was also its curse because of the nightmare it created when a user wanted to customize components beyond what the library offered. I really liked the gradio version that was used by Tanishq in his example because the syntax was very explicit about what the arguments and parameters mean in a gradio function. What tripped me up in the new gradio syntax was how complicated it was to debug and set up components. Once I managed to grasp the pattern and syntax from the gradio documentation it was a smoother experience but if I was new to python it would have been very difficult. I try to avoid using streamlit when I can and I probably will do the same with gradio but the experience setting it up and deploying a model on hugging face spaces with a web interface was worth learning. I might come back to this lesson in the future once I finish the rest of the course to experiment with how to deploy a model.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p><strong>Object Recognition</strong> - Computers can recognize what items are in an image at least as well as people can.</p>
<p><strong>Object Detection</strong> - Computers can recgonize where objects in an image are, and can highlight their locations and name each found object.</p>
<p><strong>Segmentation</strong> - A sub-area of <code>object detection</code> where every pixel is categorized on what kind of object it is part of</p>
<p><strong>Data Augmentation</strong> - creating random variations of our input data such that they appear different but do not change the information in the data. Augmentation techniques for images include rotation, flipping, perspective warping, brightness, contrast.</p>
</section>
<section id="picasso-or-matisse-model" class="level2">
<h2 class="anchored" data-anchor-id="picasso-or-matisse-model">Picasso or Matisse Model</h2>
<p>Inspired by Jeremy’s bear example, I changed my Picasso Braque example from my previous post and decided to instead try two different artists who weren’t so similar, in this case I chose Henri Matisse and Pablo Picasso. I trained the model the same way I did the Picasso Braques example but one thing I noticed was that some of the images seemed off for a duckduckgo search where duckduckgo would pull up a portrait of Picasso that didn’t look like it was from the same period I was searching. To try and fix this I tried to refresh the notebook runs multiple times until I got base images from actual Picasso and Matisse paintings. Similar to the Picasso Braque example, my Picasso predictions were off even though the label was correct but the Matisse ones were accurate.</p>
<p>After I tried Picasso and Matisse paintings, I tried different Picasso artworks such as his sculptures and got correct classifications. One person I shared the model with tried uploading their family thanksgiving photo to see what happened and the model classified the photo as 97%. This was quite intriguing to me because I had not even trained the model on images other than picasso and matisse paintings. I’m only writing on Lesson 2, but Jeremy’s discussion about transfer learning in Lesson 1 and the book has me wondering if the classification of the 97% Picasso Thanksgiving photo is a bug and use case I didn’t consider or if it has something to do with the resnet-18 base model with how it picked up the color, line and movement.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the latest libraries</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai duckduckgo_search</span></code></pre></div>
</div>
<section id="step-1-gather-data" class="level3">
<h3 class="anchored" data-anchor-id="step-1-gather-data">Step 1: Gather Data</h3>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ddg_images</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function for searching for images</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> L(ddg_images(term, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="6469196d-efd1-4e70-f9ae-21da7cae8718" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso Fauvism Paintings'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso Fauvism Paintings'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'https://i.pinimg.com/736x/b5/69/e1/b569e151ba0a9adf0136f5bdd7d4401b.jpg'</code></pre>
</div>
</div>
<div class="cell" data-outputid="3696c818-6658-4da8-dfee-ff9a0553f4ee" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb7-3">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span></span>
<span id="cb7-4">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb7-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson2/ModelDeployment_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="a8183896-c442-4137-a429-71b716fef8ff" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Henri Matisse Fauvism Paintings'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb8-2">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>,</span>
<span id="cb8-3">            show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-4">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Henri Matisse Fauvism Paintings'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson2/ModelDeployment_files/figure-html/cell-6-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="ad422104-34f2-4d49-a4e2-0b5036eac642" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Henri Matisse'</span></span>
<span id="cb11-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso_or_matisse'</span>)</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb11-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb11-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-8">    download_images(dest,urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fauvism paintings'</span>))</span>
<span id="cb11-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb11-10">    download_images(dest,urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> still life fauvism paintings'</span>))</span>
<span id="cb11-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb11-12">    download_images(dest,urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fauvism scenic paintings'</span>))</span>
<span id="cb11-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb11-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso fauvism paintings'
Searching for 'Pablo Picasso still life fauvism paintings'
Searching for 'Pablo Picasso fauvism scenic paintings'
Searching for 'Henri Matisse fauvism paintings'
Searching for 'Henri Matisse still life fauvism paintings'
Searching for 'Henri Matisse fauvism scenic paintings'</code></pre>
</div>
</div>
</section>
<section id="step-2-train-model" class="level3">
<h3 class="anchored" data-anchor-id="step-2-train-model">Step 2: Train Model</h3>
<div class="cell" data-outputid="429acff4-66aa-4a83-edb2-bfe578ead261" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that failed to download properly</span></span>
<span id="cb13-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb13-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb13-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0</code></pre>
</div>
</div>
<div class="cell" data-outputid="012ee09f-5275-4f48-dd64-c22a631d28f8" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training set, validation set</span></span>
<span id="cb15-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify input type(image), output type(category aka label)</span></span>
<span id="cb15-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb15-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb15-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into 80% training data, and 20% validation data</span></span>
<span id="cb15-7">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the label</span></span>
<span id="cb15-9">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize and resize all images to 192 x 192</span></span>
<span id="cb15-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb15-12">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson2/ModelDeployment_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="3337aab5-1727-4520-d4b6-9863c25d2359" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train a resnet model on the data</span></span>
<span id="cb16-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb16-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.003311</td>
<td>0.399668</td>
<td>0.160377</td>
<td>00:04</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.362328</td>
<td>0.233523</td>
<td>0.084906</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.323960</td>
<td>0.221361</td>
<td>0.075472</td>
<td>00:03</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.253416</td>
<td>0.133047</td>
<td>0.037736</td>
<td>00:04</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.199347</td>
<td>0.111490</td>
<td>0.037736</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="step-3-test-model" class="level3">
<h3 class="anchored" data-anchor-id="step-3-test-model">Step 3: Test Model</h3>
<div class="cell" data-outputid="00f7b617-3796-450e-883a-f6dad2b4eb67" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">is_picasso,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span>))</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_picasso<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a picasso: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: Pablo Picasso.
Probability it's a picasso: 0.0005</code></pre>
</div>
</div>
<div class="cell" data-outputid="008c95d8-0c6a-493c-81a2-ab733366c777" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">is_matisse,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>))</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_matisse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a matisse: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: Henri Matisse.
Probability it's a matisse: 0.9936</code></pre>
</div>
</div>
</section>
<section id="step-4-save-and-export-model" class="level3">
<h3 class="anchored" data-anchor-id="step-4-save-and-export-model">Step 4: Save and Export Model</h3>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">learn.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model.pkl'</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="jeremy-howards-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremy-howards-advice">Jeremy Howard’s Advice</h2>
<ul>
<li>Train a model before data cleaning because it helps find data issues more quickly and easily.</li>
</ul>
</section>
<section id="gradio-hugging-face-spaces" class="level2">
<h2 class="anchored" data-anchor-id="gradio-hugging-face-spaces">Gradio + Hugging Face Spaces</h2>
<p>The following code was originally written by Dr.&nbsp;Tanishq Abraham and published in the blog post: <a href="https://www.tanishq.ai/blog/posts/2021-11-16-gradio-huggingface.html">Gradio + Hugging Face Spaces: A Tutorial</a>. It was modified by me and Kevin Liu to work with the current version of the gradio api. Currently the code works on Hugging Face Spaces but may break in the future as gradio continues updating its api.</p>
<p>My recommendation to get gradio and Hugging Face Spaces working is to start off with Tanishq’s article and consult the gradio documentation to figure out the differences between the current version of the api and the version used in the article. I tried getting the pet classifier example working first before moving on to applying gradio to my Picasso Matisse Model which saved a lot of headache trying to figure out how git LFS and Hugging Face Spaces worked with my example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb22-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> skimage</span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load model </span></span>
<span id="cb22-6">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_learner(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model.pkl'</span>) </span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define prediction function </span></span>
<span id="cb22-9">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.dls.vocab</span>
<span id="cb22-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict(img):</span>
<span id="cb22-11">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.create(img)</span>
<span id="cb22-12">    pred,pred_idx,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(img)</span>
<span id="cb22-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {labels[i]: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(probs[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels))}</span>
<span id="cb22-14"></span>
<span id="cb22-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define interface structure </span></span>
<span id="cb22-16">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Picasso or Mattise Classifier"</span></span>
<span id="cb22-17">description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A classifier trained on Pablo Picasso and Henri Mattise paintings with fast.ai."</span></span>
<span id="cb22-18">examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matisse.jpg'</span>]</span>
<span id="cb22-19">gr.Interface(fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predict, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gr.Image(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pil"</span>)], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gr.Label(num_top_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)).launch(share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-20"></span>
<span id="cb22-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interpretation = 'default'</span></span>
<span id="cb22-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enable_queue = True </span></span>
<span id="cb22-23"></span>
<span id="cb22-24"></span>
<span id="cb22-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def greet(name):</span></span>
<span id="cb22-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return "Hello " + name + "!!"</span></span>
<span id="cb22-27"></span>
<span id="cb22-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iface = gr.Interface(fn=greet, inputs="text", outputs="text")</span></span>
<span id="cb22-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iface.launch()</span></span></code></pre></div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://huggingface.co/spaces/mozartfish/picasso_or_matisse">Picasso or Mattise Gradio + Hugging Face Spaces</a></li>
<li><a href="https://www.youtube.com/watch?v=F4tvM4Vb3A0">FastAI Lesson 2</a></li>
<li><a href="https://colab.research.google.com/github/fastai/fastbook/blob/master/02_production.ipynb#scrollTo=-tldOlQyxQOf">FastAI Chapter 2, Production</a></li>
<li><a href="https://huggingface.co/spaces">Hugging Face Spaces</a></li>
<li><a href="https://www.gradio.app/">Gradio</a></li>
<li><a href="https://www.youtube.com/watch?v=8X4u9sca3Io">How to Set Up an SSH Key(GitHub, Hugging Face Spaces)</a></li>
<li><a href="https://www.tanishq.ai/blog/posts/2021-11-16-gradio-huggingface.html">Gradio + Hugging Face Spaces: A Tutorial</a></li>
<li><a href="https://www.gradio.app/docs/interface">Gradio Documentation</a></li>
<li><a href="https://docs.fast.ai/">fastai Documentation</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson2/ModelDeployment.html</guid>
  <pubDate>Thu, 30 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 1: Getting Started</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting.html</link>
  <description><![CDATA[ 




<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this lesson, Jeremy walks through a bird classification example which back in 2015 was considered the bleeding edge of state of the art. 8 years later, it’s hard to believe that I can run this on my own local machine. Even though my training is in computer science, I found some of the definitions and the code in this lesson challenging which is where Chapter 1 was really helpful. I would strongly recommend checking out the definitions in this chapter because they are still used today when talking about more advanced models like GPT-4.</p>
</section>
<section id="terminology" class="level2">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<ul>
<li><p><strong>Machine Learning</strong> - The training of programs developed by teaching a computer learn from experience rather than coding the individual steps</p></li>
<li><p><strong>Deep Learning</strong> - A computer technique that uses layers of neural networks to extract and transform data. Neural networks layers are trained by algorithms that minimize their errors and improve their accuracy. This is how a network learns to perform a specific task. Deep learning is a sub-discipline of <code>machine learning</code>.</p></li>
<li><p><strong>Dataset</strong> - A bunch of data ie. images, sounds, text, files or anything else.</p></li>
<li><p><strong>Label</strong> - The data we’re trying to predict ie. dog or cat.</p></li>
<li><p><strong>Independent Variable</strong> - Data that does not include labels</p></li>
<li><p><strong>Dependent Variable</strong> - the correct label ie. dog or cat. Also called <strong>targets.</strong></p></li>
<li><p><strong>Architecture</strong> - The structure of the model we’re trying to fit. A mathematical function that we’re passing the input data and parameters to.</p></li>
<li><p><strong>Parameters</strong> - The values in the model that change what task it can do and are updated through model training. In Arthur Samuel’s definitions the synonym for parameters is weights which has a different meaning in modern deep learning.</p></li>
<li><p><strong>Parameter(Weight) Assignment</strong> - Particular choice of values for parameters.</p></li>
<li><p><strong>Weights</strong> - A particular type of model parameter.</p></li>
<li><p><strong>Fit</strong> - Update the model parameters such that the predictions of the model using the input data match the target labels.</p></li>
<li><p><strong>Train</strong> - Synoym for fit.</p></li>
<li><p><strong>Pretrained Model</strong> - A model that has already been trained, generally using a large dataset and will be fine-tuned ie. resnet class of models.</p></li>
<li><p><strong>Fine-Tune</strong> - Update a pretrained model for a different task.</p></li>
<li><p><strong>Epoch</strong> - One complete pass through the input data.</p></li>
<li><p><strong>Loss</strong> - A measure of how good the model is, chosen to drive training via <code>Stochastic Gradient Descent (SGD)</code>.</p></li>
<li><p><strong>Metric</strong> - A measurement of how good the model is, using the validation set, chosen for human consumption.</p></li>
<li><p><strong>Validation Set</strong> - A set of data held out from training, used only for measuring how good the model is.</p></li>
<li><p><strong>Training Set</strong> - The data used for fitting the model; does not include any data from the validation set.</p></li>
<li><p><strong>Overfitting</strong> - Training a model in such a way that it remembers specific features of the input data rather than generalizing.</p></li>
<li><p><strong>Convolutional Neural Network (CNN)</strong> - A type of neural network that works particularly well for computer vision tasks.</p></li>
<li><p><strong>Transfer Learning</strong> - Using a pretrained model for a task different to what it was originally trained for.</p></li>
<li><p><strong>Head Layer</strong> - When using a pretrained model, replace the last layer with one or more layers with randomized weights of an appropriate size for the dataset you are working with. This customizes a model specifically for your task when using a pretrained model.</p></li>
</ul>
</section>
<section id="limitations-of-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="limitations-of-machine-learning">Limitations of Machine Learning</h2>
<ol type="1">
<li>A model cannot be created without data</li>
<li>A model can only learn to operate on patterns seen in input data used to train it</li>
<li>This learning approach only creates <code>predictions</code> <strong>not</strong> <code>recommend actions</code></li>
<li>We need <code>labels</code> + <code>data</code> (pictures of dogs and cats that have labels saying which ones are dogs and which ones are cats)</li>
</ol>
</section>
<section id="is-it-a-bird-example" class="level2">
<h2 class="anchored" data-anchor-id="is-it-a-bird-example">Is It a Bird? Example</h2>
<p>The following code in this example is created and written by Jeremy Howard and FastAI as found in the example <a href="https://www.kaggle.com/code/jhoward/is-it-a-bird-creating-a-model-from-your-own-data">Is it a bird? Creating a model from your own data</a>. My modification was adding comments for myself to the data block section so that I could understand what each part of the datablock is doing.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:05:02.130923Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:05:02.130165Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:05:18.134163Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:05:18.132504Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:05:02.130893Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os </span>
<span id="cb1-2">iskaggle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAGGLE_KERNEL_RUN_TYPE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> iskaggle:</span>
<span id="cb1-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Uqq fastai duckduckgo_search</span></code></pre></div>
</div>
<section id="step-1-gather-data" class="level3">
<h3 class="anchored" data-anchor-id="step-1-gather-data">Step 1: Gather Data</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:11:11.575122Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:11:11.574696Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:11:11.933428Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:11:11.932692Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:11:11.575080Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> duckduckgo_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ddg_images </span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function for searching for images </span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> search_images(term, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>):</span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Searching for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>term<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> L(ddg_images(term, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)).itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:11:50.875794Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:11:50.875301Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:11:51.988151Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:11:51.987179Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:11:50.875763Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'bird photos'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'https://images.alphacoders.com/492/492674.jpg'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:13:07.435284Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:13:07.434751Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:13:15.880636Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:13:15.879720Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:13:07.435241Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url </span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb7-3">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span></span>
<span id="cb7-4">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb7-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb7-7"></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version &gt;=1.16.5 and &lt;1.23.0 is required for this version of SciPy (detected version 1.24.3
  warnings.warn(f"A NumPy version &gt;={np_minversion} and &lt;{np_maxversion}"</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:15:07.714114Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:15:07.713714Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:15:09.048645Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:15:09.047656Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:15:07.714085Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest photos'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>, </span>
<span id="cb9-2">             show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-3">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photos'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting_files/figure-html/cell-6-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:19:42.776156Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:19:42.775040Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:21:22.118506Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:21:22.117220Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:19:42.776115Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'forest'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird'</span></span>
<span id="cb12-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird_or_not'</span>)</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep </span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb12-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb12-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> photo'</span>))</span>
<span id="cb12-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb12-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sun photo'</span>))</span>
<span id="cb12-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb12-12">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> shade photo'</span>))</span>
<span id="cb12-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb12-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'forest photo'
Searching for 'forest sun photo'
Searching for 'forest shade photo'
Searching for 'bird photo'
Searching for 'bird sun photo'
Searching for 'bird shade photo'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
</div>
</section>
<section id="step-2-train-model" class="level3">
<h3 class="anchored" data-anchor-id="step-2-train-model">Step 2: Train Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:21:43.415508Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:21:43.415132Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:21:44.330428Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:21:44.329327Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:21:43.415478Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that failed to download properly </span></span>
<span id="cb15-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb15-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>3</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:24:10.522517Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:24:10.522169Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:24:15.181854Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:24:15.180708Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:24:10.522489Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training set, validation set </span></span>
<span id="cb17-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb17-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify input type(image), output type(category aka label)</span></span>
<span id="cb17-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb17-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb17-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into 80% training data, and 20% validation data</span></span>
<span id="cb17-7">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the label </span></span>
<span id="cb17-9">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize and resize all images to 192 x 192</span></span>
<span id="cb17-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb17-12">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb17-13"></span>
<span id="cb17-14">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:29:36.801651Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:29:36.800809Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:29:42.341723Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:29:42.340624Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:29:36.801604Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train resnet on the data</span></span>
<span id="cb18-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb18-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.744936</td>
<td>0.402673</td>
<td>0.156250</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.178611</td>
<td>0.097689</td>
<td>0.031250</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.117756</td>
<td>0.136063</td>
<td>0.031250</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.079709</td>
<td>0.154602</td>
<td>0.031250</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="step-3-test-model" class="level3">
<h3 class="anchored" data-anchor-id="step-3-test-model">Step 3: Test Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:29:43.986183Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:29:43.985792Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:29:44.105360Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:29:44.104307Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:29:43.986152Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">is_bird,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bird.jpg'</span>))</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_bird<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a bird: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a : bird.
Probability it's a bird: 0.9996</code></pre>
</div>
</div>
</section>
</section>
<section id="picasso-cubist-painting-or-georges-braque-cubist-painting" class="level2">
<h2 class="anchored" data-anchor-id="picasso-cubist-painting-or-georges-braque-cubist-painting">Picasso Cubist Painting or Georges Braque Cubist Painting</h2>
<p>This code was written by me based on Jeremy and FastAI’s bird example. I picked this example because of an interest in art, the similarity between Picasso and Braque’s cubist art, and the question of whether a computer would be able to tell the difference between the two artists when shown a random cubist painting by either Picasso or Braque.</p>
<section id="step-1-gather-data-1" class="level3">
<h3 class="anchored" data-anchor-id="step-1-gather-data-1">Step 1: Gather Data</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:32:56.351463Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:32:56.351013Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:32:57.031947Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:32:57.031020Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:32:56.351430Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso Cubist Painting'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-2">urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso Cubist Painting'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.10/site-packages/duckduckgo_search/compat.py:40: UserWarning: ddg_images is deprecated. Use DDGS().images() generator
  warnings.warn("ddg_images is deprecated. Use DDGS().images() generator")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'http://www.baaqii.com/promanage/productimage/OP/OP0288.jpg'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:33:24.105350Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:33:24.104946Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:33:24.810112Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:33:24.809127Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:33:24.105319Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastdownload <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_url </span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb25-3">dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span></span>
<span id="cb25-4">download_url(urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dest, show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb25-5">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(dest)</span>
<span id="cb25-6">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:34:37.957206Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:34:37.956156Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:34:38.684411Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:34:38.683411Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:34:37.957157Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">download_url(search_images(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Georges Braque Cubist Painting'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb26-2">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'braque.jpg'</span>, </span>
<span id="cb26-3">             show_progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-4">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'braque.jpg'</span>).to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'George Braque Cubist Painting'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:39:27.385024Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:39:27.384560Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:40:49.816235Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:40:49.814961Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:39:27.384989Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">searches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pablo Picasso'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Georges Braque'</span></span>
<span id="cb28-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso_or_braque'</span>)</span>
<span id="cb28-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep </span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> searches:</span>
<span id="cb28-6">    dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span>
<span id="cb28-7">    dest.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb28-8">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> cubist painting'</span>))</span>
<span id="cb28-9">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server</span></span>
<span id="cb28-10">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fauvist painting'</span>))</span>
<span id="cb28-11">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb28-12">    download_images(dest, urls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>search_images(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>o<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> geometric painting'</span>))</span>
<span id="cb28-13">    sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep between searches to avoid spamming server </span></span>
<span id="cb28-14">    resize_images(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o, max_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Searching for 'Pablo Picasso cubist painting'
Searching for 'Pablo Picasso fauvist painting'
Searching for 'Pablo Picasso geometric painting'
Searching for 'George Braque cubist painting'
Searching for 'George Braque fauvist painting'
Searching for 'George Braque geometric painting'</code></pre>
</div>
</div>
</section>
<section id="step-2-train-model-1" class="level3">
<h3 class="anchored" data-anchor-id="step-2-train-model-1">Step 2: Train Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:40:49.819938Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:40:49.819467Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:40:50.977727Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:40:50.976477Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:40:49.819897Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove images that failed to download properly </span></span>
<span id="cb30-2">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(get_image_files(path))</span>
<span id="cb30-3">failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)</span>
<span id="cb30-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(failed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>2</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:40:50.979956Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:40:50.979488Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:40:51.979411Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:40:51.978394Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:40:50.979914Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training set, validation set </span></span>
<span id="cb32-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb32-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify input type(image), output type(category aka label)</span></span>
<span id="cb32-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb32-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb32-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into 80% training data, and 20% validation data</span></span>
<span id="cb32-7">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the label </span></span>
<span id="cb32-9">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb32-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standardize and resize all images to 192 x 192</span></span>
<span id="cb32-11">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'squish'</span>)]</span>
<span id="cb32-12">).dataloaders(path, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb32-13"></span>
<span id="cb32-14">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:43:02.501100Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:43:02.499961Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:43:10.282060Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:43:10.280941Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:43:02.501063Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train resnet on the data</span></span>
<span id="cb33-2">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb33-3">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.963409</td>
<td>0.409861</td>
<td>0.157143</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.281930</td>
<td>0.232642</td>
<td>0.057143</td>
<td>00:01</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.227495</td>
<td>0.084337</td>
<td>0.028571</td>
<td>00:01</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.163790</td>
<td>0.051675</td>
<td>0.014286</td>
<td>00:01</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="step-3-test-model-1" class="level3">
<h3 class="anchored" data-anchor-id="step-3-test-model-1">Step 3: Test Model</h3>
<p>There is something wrong here because the probability is incorrect. I can’t figure out whether I messed up in the data phase, architecture choice (resnet34 instead of resnet18), or a programming mistake. My guess is that the program should have a probability of choosing the right result around the same percentage as the bird example. If anyone knows what the issue might be, please reach out.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-11-22T07:47:00.809792Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-11-22T07:47:00.808871Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-11-22T07:47:00.889913Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-11-22T07:47:00.888745Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-11-22T07:47:00.809752Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">is_picasso,_,probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.predict(PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'picasso.jpg'</span>))</span>
<span id="cb34-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is a: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>is_picasso<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb34-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Probability it's a picasso: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>This is a: Pablo Picasso.
Probability it's a picasso: 0.0006</code></pre>
</div>
</div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://course.fast.ai/Lessons/lesson1.html">FastAI Lesson 1: Getting Started</a></li>
<li><a href="https://colab.research.google.com/github/fastai/fastbook/blob/master/01_intro.ipynb">FastAI Chapter 1, Intro</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/is-it-a-bird-creating-a-model-from-your-own-data">Is it a bird? Creating a model from your own data</a></li>
<li><a href="https://www.kaggle.com/code/jhoward/jupyter-notebook-101">Jupyter Notebook 101</a></li>
<li><a href="https://docs.fast.ai/tutorial.vision.html">FastAI Docs</a></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson1/picasso-or-braque-cubist-painting.html</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>FastAI Lesson 0: How to FastAI</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/fastai-lesson0/index.html</link>
  <description><![CDATA[ 




<p>I’ve recently started <a href="https://course.fast.ai/">FastAI Practical Deep Learning for Coders</a> to learn about machine learning. To hold myself accountable and finish the course I am going to try to write a blog post for every video in the series starting with <code>Lesson 0</code>. By doing this my goal is to not only learn about deep learning and track my progress but reinforce my learning by trying to explain what I’ve learned for people new to machine learning like me. <code>Lesson 0</code> isn’t officially presented in the course until <code>Lesson 3</code> but it provides valuable advice for how to complete FastAI and actually learn how to write deep learning code.</p>
<p><code>Lesson 0</code> doesn’t have any code examples or notebooks but I took Jeremy’s advice about blogging and interacting with the community by setting up this Quarto blog as the <code>Lesson 0</code> project. <code>Lesson 0</code> was created in 2020 before Twitter became X and closed off to people who didn’t have an account. Since then, some of the ML community and other academic communities in CS have migrated to <code>Discord</code> , <code>Mastodon</code>, and <code>Bluesky</code>. I’d recommend checking out the <code>FastAI Forums</code>, <code>FastAI Discord</code>, and <code>BlueSky</code>.</p>
<section id="jeremy-howards-advice" class="level2">
<h2 class="anchored" data-anchor-id="jeremy-howards-advice">Jeremy Howard’s Advice</h2>
<ol type="1">
<li>Commit to finish the course</li>
<li>Try to finish one really good project to show off what you’ve learned in the course</li>
<li>Share and blog about your work</li>
</ol>
</section>
<section id="how-to-watch-a-fastai-lesson" class="level2">
<h2 class="anchored" data-anchor-id="how-to-watch-a-fastai-lesson">How to Watch A FastAI Lesson</h2>
<p>This advice was presented by Jeremy Howard in <code>Lesson 0</code></p>
<ol type="1">
<li><p>Watch FastAI Lecture</p></li>
<li><p>Run notebooks and code presented in the lecture and experiment with code</p></li>
<li><p>Reproduce notebook from a clean notebook (Jeremy provides clean notebooks on github)</p></li>
<li><p>Repeat with a different dataset (could be personal project)</p></li>
</ol>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><p><a href="https://www.youtube.com/watch?v=gGxe2mN3kAg">FastAI Lesson 0: How to FastAI</a></p></li>
<li><p><a href="https://christinemcleavey.com/learning-about-deep-learning/">Christine Mcleavey’s Blog</a></p></li>
<li><p><a href="https://quarto.org/">Quarto</a></p></li>
<li><p><a href="https://bsky.app/">Bluesky</a></p></li>
</ol>


</section>

 ]]></description>
  <category>learning</category>
  <category>fastai</category>
  <category>deep learning</category>
  <guid>https://mozartfish.github.io/blog/posts/fastai-lesson0/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Pranav Rajan</dc:creator>
  <link>https://mozartfish.github.io/blog/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is my first blog post. Welcome!</p>
<p>I decided to start a blog inspired by Jeremy Howard’s Lecture 0 from the FastAI Course. Jeremy and FastAI used to maintain a blogging and publication tool called FastPages but transitioned to a new publication system called Quarto.</p>
<p>This blog is written in Quarto. Why Quarto? In the past I had attempted to used Medium and Substack but never fully spent the time to learn the tools to write a blog post. I decided to learn and publish with Quarto because of its capabilities to produce high quality scientific and technical documents with the ability to embed code and visualizations for review. Another reason why I like Quarto is how easy it is to write markdown and publish a blog.</p>
<p>Going forward I hope to use Quarto to write about my programming projects, thoughts,and improve my writing.</p>



 ]]></description>
  <category>news</category>
  <guid>https://mozartfish.github.io/blog/posts/welcome/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="https://mozartfish.github.io/blog/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
